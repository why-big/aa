
TMJL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015f4  080040a8  080040a8  000140a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080056a0  080056a0  000156a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080056a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000240  20000010  080056b0  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000250  080056b0  00020250  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00021ab6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004461  00000000  00000000  00041aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c78  00000000  00000000  00045f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ac78  00000000  00000000  00046bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004746  00000000  00000000  00051840  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  00055f86  2**0
                  CONTENTS, READONLY
 15 .debug_loc    00008eb9  00000000  00000000  00056002  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000011f8  00000000  00000000  0005eec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000023e4  00000000  00000000  000600b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004090 	.word	0x08004090

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004090 	.word	0x08004090

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uhi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5a09      	ldrh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_llsr>:
 8000258:	40d0      	lsrs	r0, r2
 800025a:	1c0b      	adds	r3, r1, #0
 800025c:	40d1      	lsrs	r1, r2
 800025e:	469c      	mov	ip, r3
 8000260:	3a20      	subs	r2, #32
 8000262:	40d3      	lsrs	r3, r2
 8000264:	4318      	orrs	r0, r3
 8000266:	4252      	negs	r2, r2
 8000268:	4663      	mov	r3, ip
 800026a:	4093      	lsls	r3, r2
 800026c:	4318      	orrs	r0, r3
 800026e:	4770      	bx	lr

08000270 <received_data_Reset>:
 * 输入  ： 无
 * 输出  ： 无
 * 履历　：V0.00  2019-5-2
********************************************/
static void received_data_Reset(void)
{
 8000270:	b510      	push	{r4, lr}
	memset(Host_Rec_buff, 0, sizeof(Host_Rec_buff));   //清空缓存区
 8000272:	22c8      	movs	r2, #200	; 0xc8
 8000274:	2100      	movs	r1, #0
 8000276:	4806      	ldr	r0, [pc, #24]	; (8000290 <received_data_Reset+0x20>)
 8000278:	f003 fee9 	bl	800404e <memset>
    Rec_OK_Flag =0;
 800027c:	2300      	movs	r3, #0
 800027e:	4a05      	ldr	r2, [pc, #20]	; (8000294 <received_data_Reset+0x24>)
 8000280:	7013      	strb	r3, [r2, #0]
	Rec_Count=0;
 8000282:	4a05      	ldr	r2, [pc, #20]	; (8000298 <received_data_Reset+0x28>)
 8000284:	8013      	strh	r3, [r2, #0]
	//Data_Length =0;
	frame_interval_time=0;        /* 帧间隔计数  */
 8000286:	4a05      	ldr	r2, [pc, #20]	; (800029c <received_data_Reset+0x2c>)
 8000288:	6013      	str	r3, [r2, #0]
	frame_interval_time_flag=0;   /* 帧间隔计数标志  */
 800028a:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <received_data_Reset+0x30>)
 800028c:	6013      	str	r3, [r2, #0]

	//HAL_UART_Receive_IT(&MESH_UART_ID,(uint8_t *)Host_Rec_byte,1);
}
 800028e:	bd10      	pop	{r4, pc}
 8000290:	2000002c 	.word	0x2000002c
 8000294:	200000f8 	.word	0x200000f8
 8000298:	200000f6 	.word	0x200000f6
 800029c:	200000fc 	.word	0x200000fc
 80002a0:	20000100 	.word	0x20000100

080002a4 <bl_data_handle_init>:
 * 输入  ： 无
 * 输出  ： 无
 * 履历　：V0.00  2019-5-2
********************************************/
void bl_data_handle_init(void)
{
 80002a4:	b510      	push	{r4, lr}
	received_data_Reset();
 80002a6:	f7ff ffe3 	bl	8000270 <received_data_Reset>
	while(HAL_OK != HAL_UART_Receive_IT(&huart1,(uint8_t *)Host_Rec_byte,1));
 80002aa:	2201      	movs	r2, #1
 80002ac:	4903      	ldr	r1, [pc, #12]	; (80002bc <bl_data_handle_init+0x18>)
 80002ae:	4804      	ldr	r0, [pc, #16]	; (80002c0 <bl_data_handle_init+0x1c>)
 80002b0:	f003 fafa 	bl	80038a8 <HAL_UART_Receive_IT>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d1f8      	bne.n	80002aa <bl_data_handle_init+0x6>

}
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	200000f4 	.word	0x200000f4
 80002c0:	200001b8 	.word	0x200001b8

080002c4 <bl_control_function>:
 * 输入  ：无
 * 输出  ：无
 * 履历　：V0.00  2019-5-2
 ********************************************/
void bl_control_function(void)
{
 80002c4:	b570      	push	{r4, r5, r6, lr}
   if(em_BL_switch == SWITCH_OPEN){//打开
 80002c6:	4c2e      	ldr	r4, [pc, #184]	; (8000380 <bl_control_function+0xbc>)
	  BL_POWER_ON;
 80002c8:	2101      	movs	r1, #1
   if(em_BL_switch == SWITCH_OPEN){//打开
 80002ca:	7822      	ldrb	r2, [r4, #0]
 80002cc:	2a00      	cmp	r2, #0
 80002ce:	d001      	beq.n	80002d4 <bl_control_function+0x10>
   }else{         //关闭
	  BL_POWER_OFF;
 80002d0:	2201      	movs	r2, #1
 80002d2:	0011      	movs	r1, r2
 80002d4:	482b      	ldr	r0, [pc, #172]	; (8000384 <bl_control_function+0xc0>)
 80002d6:	f002 fc61 	bl	8002b9c <HAL_GPIO_WritePin>
    if(Rec_OK_Flag == 0){
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <bl_control_function+0xc4>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d012      	beq.n	8000308 <bl_control_function+0x44>
    if(strstr((char const*)Host_Rec_buff,"CONNECTED") != NULL){
 80002e2:	4d2a      	ldr	r5, [pc, #168]	; (800038c <bl_control_function+0xc8>)
 80002e4:	492a      	ldr	r1, [pc, #168]	; (8000390 <bl_control_function+0xcc>)
 80002e6:	0028      	movs	r0, r5
 80002e8:	f003 feb9 	bl	800405e <strstr>
    	em_bl_state = BL_STATUS_LINK_OK;  //连接成功
 80002ec:	2203      	movs	r2, #3
    if(strstr((char const*)Host_Rec_buff,"CONNECTED") != NULL){
 80002ee:	2800      	cmp	r0, #0
 80002f0:	d106      	bne.n	8000300 <bl_control_function+0x3c>
    }else if(strstr((char const*)Host_Rec_buff,"POWER ON") != NULL){
 80002f2:	4928      	ldr	r1, [pc, #160]	; (8000394 <bl_control_function+0xd0>)
 80002f4:	0028      	movs	r0, r5
 80002f6:	f003 feb2 	bl	800405e <strstr>
 80002fa:	2800      	cmp	r0, #0
 80002fc:	d029      	beq.n	8000352 <bl_control_function+0x8e>
        em_bl_state = BL_STATUS_LINKING;  //连接中
 80002fe:	2202      	movs	r2, #2
 8000300:	4b25      	ldr	r3, [pc, #148]	; (8000398 <bl_control_function+0xd4>)
 8000302:	701a      	strb	r2, [r3, #0]
    received_data_Reset();
 8000304:	f7ff ffb4 	bl	8000270 <received_data_Reset>
   }
   received_data_processing(); //收到本体数据的处理

   if(bl_init_flag == 0x5A){
 8000308:	4824      	ldr	r0, [pc, #144]	; (800039c <bl_control_function+0xd8>)
 800030a:	4d25      	ldr	r5, [pc, #148]	; (80003a0 <bl_control_function+0xdc>)
 800030c:	7803      	ldrb	r3, [r0, #0]
 800030e:	2b5a      	cmp	r3, #90	; 0x5a
 8000310:	d112      	bne.n	8000338 <bl_control_function+0x74>
	   bl_restart_flag=0;
 8000312:	2200      	movs	r2, #0
	   bl_delay_count++;
 8000314:	4923      	ldr	r1, [pc, #140]	; (80003a4 <bl_control_function+0xe0>)
	   bl_restart_flag=0;
 8000316:	702a      	strb	r2, [r5, #0]
	   bl_delay_count++;
 8000318:	780b      	ldrb	r3, [r1, #0]
 800031a:	3301      	adds	r3, #1
 800031c:	b2db      	uxtb	r3, r3
 800031e:	700b      	strb	r3, [r1, #0]
	   if(bl_delay_count == 1){
 8000320:	2b01      	cmp	r3, #1
 8000322:	d11d      	bne.n	8000360 <bl_control_function+0x9c>
		   HAL_UART_Transmit_IT(&huart1,(uint8_t*)str_delvmlink,strlen(str_delvmlink));
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <bl_control_function+0xe4>)
 8000326:	681e      	ldr	r6, [r3, #0]
 8000328:	0030      	movs	r0, r6
 800032a:	f7ff feed 	bl	8000108 <strlen>
 800032e:	0031      	movs	r1, r6
 8000330:	b282      	uxth	r2, r0
 8000332:	481e      	ldr	r0, [pc, #120]	; (80003ac <bl_control_function+0xe8>)
 8000334:	f003 fa8a 	bl	800384c <HAL_UART_Transmit_IT>
		   bl_init_flag = 0;
		   em_BL_switch = SWITCH_OPEN;
	   }
   }

   if(bl_restart_flag == 0x5A){
 8000338:	782b      	ldrb	r3, [r5, #0]
 800033a:	2b5a      	cmp	r3, #90	; 0x5a
 800033c:	d108      	bne.n	8000350 <bl_control_function+0x8c>
	   bl_delay_count++;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <bl_control_function+0xe0>)
 8000340:	7813      	ldrb	r3, [r2, #0]
 8000342:	3301      	adds	r3, #1
 8000344:	b2db      	uxtb	r3, r3
 8000346:	7013      	strb	r3, [r2, #0]
	   if(bl_delay_count <= (1000/10)){
 8000348:	2b64      	cmp	r3, #100	; 0x64
 800034a:	d815      	bhi.n	8000378 <bl_control_function+0xb4>
		   em_BL_switch = SWITCH_CLOSE;
 800034c:	2301      	movs	r3, #1
	   }else{
		   bl_delay_count = 0;
		   bl_restart_flag = 0;
		   em_BL_switch = SWITCH_OPEN;
 800034e:	7023      	strb	r3, [r4, #0]
	   }
   }


}
 8000350:	bd70      	pop	{r4, r5, r6, pc}
    }else if(strstr((char const*)Host_Rec_buff,"DISCONNECT") != NULL){
 8000352:	4917      	ldr	r1, [pc, #92]	; (80003b0 <bl_control_function+0xec>)
 8000354:	0028      	movs	r0, r5
 8000356:	f003 fe82 	bl	800405e <strstr>
 800035a:	2800      	cmp	r0, #0
 800035c:	d1cf      	bne.n	80002fe <bl_control_function+0x3a>
 800035e:	e7d1      	b.n	8000304 <bl_control_function+0x40>
	   }else if(bl_delay_count <= (500/10)){
 8000360:	2b32      	cmp	r3, #50	; 0x32
 8000362:	d801      	bhi.n	8000368 <bl_control_function+0xa4>
		   em_BL_switch = SWITCH_OPEN;
 8000364:	7022      	strb	r2, [r4, #0]
 8000366:	e7e7      	b.n	8000338 <bl_control_function+0x74>
	   }else if(bl_delay_count <= (1500/10)){
 8000368:	2b96      	cmp	r3, #150	; 0x96
 800036a:	d802      	bhi.n	8000372 <bl_control_function+0xae>
		   em_BL_switch = SWITCH_CLOSE;
 800036c:	2301      	movs	r3, #1
 800036e:	7023      	strb	r3, [r4, #0]
 8000370:	e7e2      	b.n	8000338 <bl_control_function+0x74>
		   bl_delay_count = 0;
 8000372:	700a      	strb	r2, [r1, #0]
		   bl_init_flag = 0;
 8000374:	7002      	strb	r2, [r0, #0]
 8000376:	e7f5      	b.n	8000364 <bl_control_function+0xa0>
		   bl_delay_count = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	7013      	strb	r3, [r2, #0]
		   bl_restart_flag = 0;
 800037c:	702b      	strb	r3, [r5, #0]
 800037e:	e7e6      	b.n	800034e <bl_control_function+0x8a>
 8000380:	20000121 	.word	0x20000121
 8000384:	48001400 	.word	0x48001400
 8000388:	200000f8 	.word	0x200000f8
 800038c:	2000002c 	.word	0x2000002c
 8000390:	08005188 	.word	0x08005188
 8000394:	08005192 	.word	0x08005192
 8000398:	2000011f 	.word	0x2000011f
 800039c:	200000fa 	.word	0x200000fa
 80003a0:	200000fb 	.word	0x200000fb
 80003a4:	200000f9 	.word	0x200000f9
 80003a8:	20000000 	.word	0x20000000
 80003ac:	200001b8 	.word	0x200001b8
 80003b0:	0800519b 	.word	0x0800519b

080003b4 <bl_bind_init>:
 * 输出  ： 无
 * 履历　：V0.00  2019-5-2
********************************************/
void bl_bind_init(void)
{
	bl_init_flag = 0x5A;    //初始化
 80003b4:	225a      	movs	r2, #90	; 0x5a
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <bl_bind_init+0x14>)
 80003b8:	701a      	strb	r2, [r3, #0]
	bl_delay_count = 0;     //延时计数
 80003ba:	2300      	movs	r3, #0
 80003bc:	4a03      	ldr	r2, [pc, #12]	; (80003cc <bl_bind_init+0x18>)
 80003be:	7013      	strb	r3, [r2, #0]
	em_bl_state = BL_STATUS_RESET;    //重启
 80003c0:	4a03      	ldr	r2, [pc, #12]	; (80003d0 <bl_bind_init+0x1c>)
 80003c2:	7013      	strb	r3, [r2, #0]
}
 80003c4:	4770      	bx	lr
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	200000fa 	.word	0x200000fa
 80003cc:	200000f9 	.word	0x200000f9
 80003d0:	2000011f 	.word	0x2000011f

080003d4 <bl_binding>:
 * 输出  ： 无
 * 履历　：V0.00  2019-5-2
********************************************/
void bl_binding(void)
{
   bl_restart_flag = 0x5A;//重启标志
 80003d4:	225a      	movs	r2, #90	; 0x5a
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <bl_binding+0x14>)
 80003d8:	701a      	strb	r2, [r3, #0]
   bl_delay_count = 0;  //延时计数
 80003da:	2200      	movs	r2, #0
 80003dc:	4b03      	ldr	r3, [pc, #12]	; (80003ec <bl_binding+0x18>)
 80003de:	701a      	strb	r2, [r3, #0]
   em_bl_state = BL_STATUS_RESTART;  //出厂设置
 80003e0:	4b03      	ldr	r3, [pc, #12]	; (80003f0 <bl_binding+0x1c>)
 80003e2:	3201      	adds	r2, #1
 80003e4:	701a      	strb	r2, [r3, #0]
}
 80003e6:	4770      	bx	lr
 80003e8:	200000fb 	.word	0x200000fb
 80003ec:	200000f9 	.word	0x200000f9
 80003f0:	2000011f 	.word	0x2000011f

080003f4 <UART_RxTime>:
 * 函数名: UART_RxTime
 * 说明:
 ********************************/
void UART_RxTime(void)
{
	if(frame_interval_time_flag == 1){
 80003f4:	4907      	ldr	r1, [pc, #28]	; (8000414 <UART_RxTime+0x20>)
 80003f6:	6808      	ldr	r0, [r1, #0]
 80003f8:	2801      	cmp	r0, #1
 80003fa:	d10a      	bne.n	8000412 <UART_RxTime+0x1e>
		frame_interval_time ++ ;        /* 帧间隔计数  */
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <UART_RxTime+0x24>)
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	3201      	adds	r2, #1
 8000402:	601a      	str	r2, [r3, #0]
		if(frame_interval_time>=30){    //30ms帧间隔
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b1d      	cmp	r3, #29
 8000408:	d903      	bls.n	8000412 <UART_RxTime+0x1e>
			Rec_OK_Flag = 1;
 800040a:	4b04      	ldr	r3, [pc, #16]	; (800041c <UART_RxTime+0x28>)
 800040c:	7018      	strb	r0, [r3, #0]
			frame_interval_time_flag=0;   /* 帧间隔计数标志  */
 800040e:	2300      	movs	r3, #0
 8000410:	600b      	str	r3, [r1, #0]
		}
	}
}
 8000412:	4770      	bx	lr
 8000414:	20000100 	.word	0x20000100
 8000418:	200000fc 	.word	0x200000fc
 800041c:	200000f8 	.word	0x200000f8

08000420 <HAL_UART_RxCpltCallback>:
/********************************
 * 函数名：HAL_UART_RxCpltCallback
 * 说明: 接收中断回调函数
 ********************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000420:	b570      	push	{r4, r5, r6, lr}

	if(UartHandle == &huart1){
 8000422:	4c12      	ldr	r4, [pc, #72]	; (800046c <HAL_UART_RxCpltCallback+0x4c>)
 8000424:	42a0      	cmp	r0, r4
 8000426:	d11f      	bne.n	8000468 <HAL_UART_RxCpltCallback+0x48>
	frame_interval_time=0;        /* 帧间隔计数  */
 8000428:	2200      	movs	r2, #0
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <HAL_UART_RxCpltCallback+0x50>)
	frame_interval_time_flag=1;   /* 帧间隔计数标志  */
 800042c:	4911      	ldr	r1, [pc, #68]	; (8000474 <HAL_UART_RxCpltCallback+0x54>)
	frame_interval_time=0;        /* 帧间隔计数  */
 800042e:	601a      	str	r2, [r3, #0]
	frame_interval_time_flag=1;   /* 帧间隔计数标志  */
 8000430:	2301      	movs	r3, #1
	Host_Rec_buff[Rec_Count] = Host_Rec_byte[0];
 8000432:	4a11      	ldr	r2, [pc, #68]	; (8000478 <HAL_UART_RxCpltCallback+0x58>)
 8000434:	4d11      	ldr	r5, [pc, #68]	; (800047c <HAL_UART_RxCpltCallback+0x5c>)
	frame_interval_time_flag=1;   /* 帧间隔计数标志  */
 8000436:	600b      	str	r3, [r1, #0]
	Host_Rec_buff[Rec_Count] = Host_Rec_byte[0];
 8000438:	782e      	ldrb	r6, [r5, #0]
 800043a:	4811      	ldr	r0, [pc, #68]	; (8000480 <HAL_UART_RxCpltCallback+0x60>)
 800043c:	8813      	ldrh	r3, [r2, #0]
 800043e:	54c6      	strb	r6, [r0, r3]
	if(Rec_OK_Flag == 0){
 8000440:	4810      	ldr	r0, [pc, #64]	; (8000484 <HAL_UART_RxCpltCallback+0x64>)
 8000442:	7806      	ldrb	r6, [r0, #0]
 8000444:	2e00      	cmp	r6, #0
 8000446:	d101      	bne.n	800044c <HAL_UART_RxCpltCallback+0x2c>
	    Rec_Count++;
 8000448:	3301      	adds	r3, #1
 800044a:	8013      	strh	r3, [r2, #0]
	if(Rec_Count > 198){
 800044c:	8813      	ldrh	r3, [r2, #0]
 800044e:	2bc6      	cmp	r3, #198	; 0xc6
 8000450:	d903      	bls.n	800045a <HAL_UART_RxCpltCallback+0x3a>
		Rec_OK_Flag = 1;
 8000452:	2301      	movs	r3, #1
 8000454:	7003      	strb	r3, [r0, #0]
		frame_interval_time_flag=0;   /* 帧间隔计数标志  */
 8000456:	2300      	movs	r3, #0
 8000458:	600b      	str	r3, [r1, #0]
	while(HAL_OK != HAL_UART_Receive_IT(&huart1,(uint8_t *)Host_Rec_byte,1));
 800045a:	2201      	movs	r2, #1
 800045c:	0029      	movs	r1, r5
 800045e:	0020      	movs	r0, r4
 8000460:	f003 fa22 	bl	80038a8 <HAL_UART_Receive_IT>
 8000464:	2800      	cmp	r0, #0
 8000466:	d1f8      	bne.n	800045a <HAL_UART_RxCpltCallback+0x3a>
		UART_RxCallback();
	}
}
 8000468:	bd70      	pop	{r4, r5, r6, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	200001b8 	.word	0x200001b8
 8000470:	200000fc 	.word	0x200000fc
 8000474:	20000100 	.word	0x20000100
 8000478:	200000f6 	.word	0x200000f6
 800047c:	200000f4 	.word	0x200000f4
 8000480:	2000002c 	.word	0x2000002c
 8000484:	200000f8 	.word	0x200000f8

08000488 <task_control_power_on_function>:
//	   em_play_switch = SWITCH_OPEN;
//   }else{
//	   em_play_switch = SWITCH_CLOSE;
//   }
   //byte4:bit7-bit4: 0001音频解码模式  0000音频输入模式
   if((ui_data&0x000000F0)== 0x00000010){
 8000488:	22f0      	movs	r2, #240	; 0xf0
   uint32_t ui_data = *(__IO uint32_t*)(0x08007C00);
 800048a:	4b21      	ldr	r3, [pc, #132]	; (8000510 <task_control_power_on_function+0x88>)
 * 输入  ：无
 * 输出  ：无
 * 履历  ：V0.00  2019-4-13
 ********************************************/
void task_control_power_on_function(void)
{
 800048c:	b510      	push	{r4, lr}
   uint32_t ui_data = *(__IO uint32_t*)(0x08007C00);
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4920      	ldr	r1, [pc, #128]	; (8000514 <task_control_power_on_function+0x8c>)
   if((ui_data&0x000000F0)== 0x00000010){
 8000492:	401a      	ands	r2, r3
 8000494:	2a10      	cmp	r2, #16
 8000496:	d131      	bne.n	80004fc <task_control_power_on_function+0x74>
	   em_audio_mode = AUDIO_DECODING;
 8000498:	2200      	movs	r2, #0
	   em_audio_mode = AUDIO_INPUT;
 800049a:	700a      	strb	r2, [r1, #0]
   if((ui_data&0x0000F000)== 0x00001000){
 800049c:	22f0      	movs	r2, #240	; 0xf0
 800049e:	2080      	movs	r0, #128	; 0x80
 80004a0:	0212      	lsls	r2, r2, #8
 80004a2:	401a      	ands	r2, r3
 80004a4:	0140      	lsls	r0, r0, #5
 80004a6:	491c      	ldr	r1, [pc, #112]	; (8000518 <task_control_power_on_function+0x90>)
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d129      	bne.n	8000500 <task_control_power_on_function+0x78>
	   em_BL_switch = SWITCH_OPEN;
 80004ac:	2200      	movs	r2, #0
	   em_BL_switch = SWITCH_CLOSE;
 80004ae:	700a      	strb	r2, [r1, #0]
   if((ui_data&0x00000F00)== 0x00000100){
 80004b0:	22f0      	movs	r2, #240	; 0xf0
 80004b2:	2080      	movs	r0, #128	; 0x80
 80004b4:	0112      	lsls	r2, r2, #4
 80004b6:	401a      	ands	r2, r3
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4918      	ldr	r1, [pc, #96]	; (800051c <task_control_power_on_function+0x94>)
 80004bc:	4282      	cmp	r2, r0
 80004be:	d121      	bne.n	8000504 <task_control_power_on_function+0x7c>
   	   em_FM_switch = SWITCH_OPEN;
 80004c0:	2200      	movs	r2, #0
   uc_fm_channel = (ui_data>>16)&0xff;
 80004c2:	0c1b      	lsrs	r3, r3, #16
 80004c4:	b2db      	uxtb	r3, r3
   	   em_FM_switch = SWITCH_CLOSE;
 80004c6:	700a      	strb	r2, [r1, #0]
 80004c8:	4a15      	ldr	r2, [pc, #84]	; (8000520 <task_control_power_on_function+0x98>)
   if(uc_fm_channel>108){
 80004ca:	2b6c      	cmp	r3, #108	; 0x6c
 80004cc:	d91c      	bls.n	8000508 <task_control_power_on_function+0x80>
	   uc_fm_channel=108;
 80004ce:	236c      	movs	r3, #108	; 0x6c
	   uc_fm_channel=76;
 80004d0:	7013      	strb	r3, [r2, #0]
	flash_read_handle();
	first_power_on_flag = 1;//初次上电标志位
 80004d2:	2201      	movs	r2, #1
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <task_control_power_on_function+0x9c>)
	uc_lcd_init_state = 0;//用于液晶初始化判断
	uc_lcd_init_count = 0;//用于液晶初始化计数
	em_work_mode = WORK_MODE_SCREEN_INIT;//液晶初始化
	LCD_POWER_ON;
 80004d6:	2180      	movs	r1, #128	; 0x80
	first_power_on_flag = 1;//初次上电标志位
 80004d8:	701a      	strb	r2, [r3, #0]
	uc_lcd_init_state = 0;//用于液晶初始化判断
 80004da:	2200      	movs	r2, #0
	LCD_POWER_ON;
 80004dc:	2090      	movs	r0, #144	; 0x90
	uc_lcd_init_state = 0;//用于液晶初始化判断
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <task_control_power_on_function+0xa0>)
	LCD_POWER_ON;
 80004e0:	0049      	lsls	r1, r1, #1
	uc_lcd_init_state = 0;//用于液晶初始化判断
 80004e2:	701a      	strb	r2, [r3, #0]
	uc_lcd_init_count = 0;//用于液晶初始化计数
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <task_control_power_on_function+0xa4>)
	LCD_POWER_ON;
 80004e6:	05c0      	lsls	r0, r0, #23
	uc_lcd_init_count = 0;//用于液晶初始化计数
 80004e8:	801a      	strh	r2, [r3, #0]
	em_work_mode = WORK_MODE_SCREEN_INIT;//液晶初始化
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <task_control_power_on_function+0xa8>)
 80004ec:	701a      	strb	r2, [r3, #0]
	LCD_POWER_ON;
 80004ee:	f002 fb55 	bl	8002b9c <HAL_GPIO_WritePin>
	bl_data_handle_init();
 80004f2:	f7ff fed7 	bl	80002a4 <bl_data_handle_init>
	qn8027_init_function();
 80004f6:	f001 f807 	bl	8001508 <qn8027_init_function>
}
 80004fa:	bd10      	pop	{r4, pc}
	   em_audio_mode = AUDIO_INPUT;
 80004fc:	2201      	movs	r2, #1
 80004fe:	e7cc      	b.n	800049a <task_control_power_on_function+0x12>
	   em_BL_switch = SWITCH_CLOSE;
 8000500:	2201      	movs	r2, #1
 8000502:	e7d4      	b.n	80004ae <task_control_power_on_function+0x26>
   	   em_FM_switch = SWITCH_CLOSE;
 8000504:	2201      	movs	r2, #1
 8000506:	e7dc      	b.n	80004c2 <task_control_power_on_function+0x3a>
   }else if(uc_fm_channel<76){
 8000508:	2b4b      	cmp	r3, #75	; 0x4b
 800050a:	d8e1      	bhi.n	80004d0 <task_control_power_on_function+0x48>
	   uc_fm_channel=76;
 800050c:	234c      	movs	r3, #76	; 0x4c
 800050e:	e7df      	b.n	80004d0 <task_control_power_on_function+0x48>
 8000510:	08007c00 	.word	0x08007c00
 8000514:	20000120 	.word	0x20000120
 8000518:	20000121 	.word	0x20000121
 800051c:	20000123 	.word	0x20000123
 8000520:	20000004 	.word	0x20000004
 8000524:	2000010b 	.word	0x2000010b
 8000528:	20000112 	.word	0x20000112
 800052c:	20000110 	.word	0x20000110
 8000530:	20000122 	.word	0x20000122

08000534 <task_control_main_function>:
 * 输入  ：  无
 * 输出  ：  无
 * 履历  ：  V0.00  2019-4-13
********************************************/
void task_control_main_function(void)
{
 8000534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000536:	b089      	sub	sp, #36	; 0x24
	bl_control_function();
 8000538:	f7ff fec4 	bl	80002c4 <bl_control_function>

	switch(em_work_mode){
 800053c:	4ba6      	ldr	r3, [pc, #664]	; (80007d8 <task_control_main_function+0x2a4>)
 800053e:	7818      	ldrb	r0, [r3, #0]
 8000540:	2805      	cmp	r0, #5
 8000542:	d819      	bhi.n	8000578 <task_control_main_function+0x44>
 8000544:	f7ff fdf2 	bl	800012c <__gnu_thumb1_case_uhi>
 8000548:	00ba0006 	.word	0x00ba0006
 800054c:	017800f9 	.word	0x017800f9
 8000550:	04e403bc 	.word	0x04e403bc
	if(uc_lcd_init_state == 0){
 8000554:	4da1      	ldr	r5, [pc, #644]	; (80007dc <task_control_main_function+0x2a8>)
 8000556:	782c      	ldrb	r4, [r5, #0]
 8000558:	2c00      	cmp	r4, #0
 800055a:	d10f      	bne.n	800057c <task_control_main_function+0x48>
		OLED_RST_Clr();
 800055c:	0022      	movs	r2, r4
 800055e:	2101      	movs	r1, #1
 8000560:	489f      	ldr	r0, [pc, #636]	; (80007e0 <task_control_main_function+0x2ac>)
 8000562:	f002 fb1b 	bl	8002b9c <HAL_GPIO_WritePin>
		uc_lcd_init_count++;
 8000566:	4a9f      	ldr	r2, [pc, #636]	; (80007e4 <task_control_main_function+0x2b0>)
 8000568:	8813      	ldrh	r3, [r2, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	b29b      	uxth	r3, r3
		if(uc_lcd_init_count>20){
 800056e:	2b14      	cmp	r3, #20
 8000570:	d911      	bls.n	8000596 <task_control_main_function+0x62>
			uc_lcd_init_state = 1;
 8000572:	2301      	movs	r3, #1
			uc_lcd_init_count = 0;
 8000574:	8014      	strh	r4, [r2, #0]
			uc_lcd_init_state = 2;
 8000576:	702b      	strb	r3, [r5, #0]
	   //		break;
	   	   default:
	   	       break;
	}

}
 8000578:	b009      	add	sp, #36	; 0x24
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(uc_lcd_init_state == 1){
 800057c:	2c01      	cmp	r4, #1
 800057e:	d110      	bne.n	80005a2 <task_control_main_function+0x6e>
		OLED_RST_Set();
 8000580:	0022      	movs	r2, r4
 8000582:	0021      	movs	r1, r4
 8000584:	4896      	ldr	r0, [pc, #600]	; (80007e0 <task_control_main_function+0x2ac>)
 8000586:	f002 fb09 	bl	8002b9c <HAL_GPIO_WritePin>
		uc_lcd_init_count++;
 800058a:	4a96      	ldr	r2, [pc, #600]	; (80007e4 <task_control_main_function+0x2b0>)
 800058c:	8813      	ldrh	r3, [r2, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	b29b      	uxth	r3, r3
		if(uc_lcd_init_count>30){
 8000592:	2b1e      	cmp	r3, #30
 8000594:	d801      	bhi.n	800059a <task_control_main_function+0x66>
		uc_lcd_init_count++;
 8000596:	8013      	strh	r3, [r2, #0]
 8000598:	e7ee      	b.n	8000578 <task_control_main_function+0x44>
			uc_lcd_init_count = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	8013      	strh	r3, [r2, #0]
			uc_lcd_init_state = 2;
 800059e:	3302      	adds	r3, #2
 80005a0:	e7e9      	b.n	8000576 <task_control_main_function+0x42>
	lcd_init();
 80005a2:	f001 fc97 	bl	8001ed4 <lcd_init>
	MX_IWDG_Refresh();
 80005a6:	f001 fe1b 	bl	80021e0 <MX_IWDG_Refresh>
	if(first_power_on_flag == 1){
 80005aa:	4a8f      	ldr	r2, [pc, #572]	; (80007e8 <task_control_main_function+0x2b4>)
 80005ac:	7813      	ldrb	r3, [r2, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d104      	bne.n	80005bc <task_control_main_function+0x88>
		first_power_on_flag = 0;
 80005b2:	2100      	movs	r1, #0
 80005b4:	7011      	strb	r1, [r2, #0]
		em_work_mode = WORK_MODE_POWER_ON; //开机logo
 80005b6:	4a88      	ldr	r2, [pc, #544]	; (80007d8 <task_control_main_function+0x2a4>)
 80005b8:	7013      	strb	r3, [r2, #0]
 80005ba:	e7dd      	b.n	8000578 <task_control_main_function+0x44>
		em_work_mode = WORK_MODE_NORMAL;   //正常模式
 80005bc:	2303      	movs	r3, #3
		uckey_value = KEY_NONE;   //没有键值
 80005be:	2500      	movs	r5, #0
		em_work_mode = WORK_MODE_NORMAL;   //正常模式
 80005c0:	4a85      	ldr	r2, [pc, #532]	; (80007d8 <task_control_main_function+0x2a4>)
 80005c2:	7013      	strb	r3, [r2, #0]
		uckey_value = KEY_NONE;   //没有键值
 80005c4:	4b89      	ldr	r3, [pc, #548]	; (80007ec <task_control_main_function+0x2b8>)
		disp_rectangle(39,0,1,80,LGRAY);//
 80005c6:	4c8a      	ldr	r4, [pc, #552]	; (80007f0 <task_control_main_function+0x2bc>)
		uckey_value = KEY_NONE;   //没有键值
 80005c8:	701d      	strb	r5, [r3, #0]
		disp_rectangle(39,0,1,80,LGRAY);//
 80005ca:	2201      	movs	r2, #1
 80005cc:	9400      	str	r4, [sp, #0]
 80005ce:	2350      	movs	r3, #80	; 0x50
 80005d0:	0029      	movs	r1, r5
 80005d2:	2027      	movs	r0, #39	; 0x27
 80005d4:	f001 fc44 	bl	8001e60 <disp_rectangle>
		disp_rectangle(120,0,1,80,LGRAY);
 80005d8:	9400      	str	r4, [sp, #0]
 80005da:	2350      	movs	r3, #80	; 0x50
 80005dc:	2201      	movs	r2, #1
 80005de:	0029      	movs	r1, r5
 80005e0:	2078      	movs	r0, #120	; 0x78
 80005e2:	f001 fc3d 	bl	8001e60 <disp_rectangle>
		disp_rectangle(40,0,80,80,DCYAN);
 80005e6:	2350      	movs	r3, #80	; 0x50
 80005e8:	4c82      	ldr	r4, [pc, #520]	; (80007f4 <task_control_main_function+0x2c0>)
 80005ea:	001a      	movs	r2, r3
 80005ec:	9400      	str	r4, [sp, #0]
 80005ee:	0029      	movs	r1, r5
 80005f0:	2028      	movs	r0, #40	; 0x28
 80005f2:	f001 fc35 	bl	8001e60 <disp_rectangle>
		if(em_FM_switch == SWITCH_OPEN){//FM广播开关
 80005f6:	4b80      	ldr	r3, [pc, #512]	; (80007f8 <task_control_main_function+0x2c4>)
 80005f8:	4a80      	ldr	r2, [pc, #512]	; (80007fc <task_control_main_function+0x2c8>)
 80005fa:	781e      	ldrb	r6, [r3, #0]
 80005fc:	42ae      	cmp	r6, r5
 80005fe:	d000      	beq.n	8000602 <task_control_main_function+0xce>
 8000600:	e094      	b.n	800072c <task_control_main_function+0x1f8>
			 disp_image_3232(128,45,gImage_FM,GRAYBLUE,BLACK);
 8000602:	4b7f      	ldr	r3, [pc, #508]	; (8000800 <task_control_main_function+0x2cc>)
 8000604:	9600      	str	r6, [sp, #0]
 8000606:	212d      	movs	r1, #45	; 0x2d
 8000608:	2080      	movs	r0, #128	; 0x80
 800060a:	f001 fb35 	bl	8001c78 <disp_image_3232>
			 if(uc_fm_channel>99){//三位数
 800060e:	4b7d      	ldr	r3, [pc, #500]	; (8000804 <task_control_main_function+0x2d0>)
 8000610:	ad05      	add	r5, sp, #20
 8000612:	781f      	ldrb	r7, [r3, #0]
 8000614:	2f63      	cmp	r7, #99	; 0x63
 8000616:	d801      	bhi.n	800061c <task_control_main_function+0xe8>
 8000618:	f000 fde3 	bl	80011e2 <task_control_main_function+0xcae>
			 	disp_buff[0] = (uc_fm_channel/100)+0x30;
 800061c:	2164      	movs	r1, #100	; 0x64
 800061e:	0038      	movs	r0, r7
 8000620:	f7ff fd8e 	bl	8000140 <__udivsi3>
 8000624:	3030      	adds	r0, #48	; 0x30
 8000626:	7028      	strb	r0, [r5, #0]
			 	disp_buff[1] = (uc_fm_channel/10%10)+0x30;
 8000628:	210a      	movs	r1, #10
 800062a:	0038      	movs	r0, r7
 800062c:	f7ff fd88 	bl	8000140 <__udivsi3>
 8000630:	210a      	movs	r1, #10
 8000632:	b2c0      	uxtb	r0, r0
 8000634:	f7ff fe0a 	bl	800024c <__aeabi_uidivmod>
 8000638:	3130      	adds	r1, #48	; 0x30
 800063a:	7069      	strb	r1, [r5, #1]
			 	disp_buff[2] = (uc_fm_channel%10)+0x30;
 800063c:	0038      	movs	r0, r7
 800063e:	210a      	movs	r1, #10
 8000640:	f7ff fe04 	bl	800024c <__aeabi_uidivmod>
 8000644:	3130      	adds	r1, #48	; 0x30
 8000646:	70a9      	strb	r1, [r5, #2]
			 	display_gb1212(134,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 8000648:	231f      	movs	r3, #31
 800064a:	002a      	movs	r2, r5
 800064c:	213a      	movs	r1, #58	; 0x3a
 800064e:	2086      	movs	r0, #134	; 0x86
			 	disp_buff[3] = 0;
 8000650:	70ee      	strb	r6, [r5, #3]
			 	display_gb1212(134,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 8000652:	9600      	str	r6, [sp, #0]
			 	display_gb1212(141,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 8000654:	f001 f982 	bl	800195c <display_gb1212>
	    if(em_BL_switch == SWITCH_OPEN){//蓝牙开关
 8000658:	4b6b      	ldr	r3, [pc, #428]	; (8000808 <task_control_main_function+0x2d4>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <task_control_main_function+0x130>
 8000660:	f000 fdd3 	bl	800120a <task_control_main_function+0xcd6>
			 if(em_bl_state == BL_STATUS_LINK_OK){ //连接成功
 8000664:	4a69      	ldr	r2, [pc, #420]	; (800080c <task_control_main_function+0x2d8>)
 8000666:	7812      	ldrb	r2, [r2, #0]
			 	disp_image_3232(2,45,gImage_BL_ON,GRAYBLUE,BLACK);
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	4b65      	ldr	r3, [pc, #404]	; (8000800 <task_control_main_function+0x2cc>)
			 if(em_bl_state == BL_STATUS_LINK_OK){ //连接成功
 800066c:	2a03      	cmp	r2, #3
 800066e:	d001      	beq.n	8000674 <task_control_main_function+0x140>
 8000670:	f000 fdce 	bl	8001210 <task_control_main_function+0xcdc>
			 	disp_image_3232(2,45,gImage_BL_ON,GRAYBLUE,BLACK);
 8000674:	4a66      	ldr	r2, [pc, #408]	; (8000810 <task_control_main_function+0x2dc>)
			 disp_image_3232(2,45,gImage_BL_OFF,GRAY,BLACK);
 8000676:	212d      	movs	r1, #45	; 0x2d
 8000678:	2002      	movs	r0, #2
 800067a:	f001 fafd 	bl	8001c78 <disp_image_3232>
		if(em_play_switch == SWITCH_OPEN){  //方糖播放开关
 800067e:	4b65      	ldr	r3, [pc, #404]	; (8000814 <task_control_main_function+0x2e0>)
 8000680:	4a65      	ldr	r2, [pc, #404]	; (8000818 <task_control_main_function+0x2e4>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <task_control_main_function+0x158>
 8000688:	f000 fdc5 	bl	8001216 <task_control_main_function+0xce2>
			 disp_image_3232(2,5,gImage_audio,GRAYBLUE,BLACK);
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	4b5c      	ldr	r3, [pc, #368]	; (8000800 <task_control_main_function+0x2cc>)
			 disp_image_3232(2,5,gImage_audio,GRAY,BLACK);
 8000690:	2105      	movs	r1, #5
 8000692:	2002      	movs	r0, #2
 8000694:	f001 faf0 	bl	8001c78 <disp_image_3232>
	    if(em_audio_mode == AUDIO_DECODING){  //音频处理模式 音频解码
 8000698:	4b60      	ldr	r3, [pc, #384]	; (800081c <task_control_main_function+0x2e8>)
 800069a:	4a61      	ldr	r2, [pc, #388]	; (8000820 <task_control_main_function+0x2ec>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4d61      	ldr	r5, [pc, #388]	; (8000824 <task_control_main_function+0x2f0>)
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <task_control_main_function+0x174>
 80006a4:	f000 fdbc 	bl	8001220 <task_control_main_function+0xcec>
			 disp_image_3232(128,5,gImage_headset,GRAYBLUE,BLACK);
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2105      	movs	r1, #5
 80006ac:	4b54      	ldr	r3, [pc, #336]	; (8000800 <task_control_main_function+0x2cc>)
 80006ae:	2080      	movs	r0, #128	; 0x80
 80006b0:	f001 fae2 	bl	8001c78 <disp_image_3232>
			 display_gb1616(64,2,"模式",BLUE,DCYAN);//LGRAY
 80006b4:	9400      	str	r4, [sp, #0]
 80006b6:	231f      	movs	r3, #31
 80006b8:	002a      	movs	r2, r5
 80006ba:	e2ef      	b.n	8000c9c <task_control_main_function+0x768>
	uc_lcd_init_count++;
 80006bc:	4a49      	ldr	r2, [pc, #292]	; (80007e4 <task_control_main_function+0x2b0>)
 80006be:	8813      	ldrh	r3, [r2, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	8013      	strh	r3, [r2, #0]
	if(uc_lcd_init_count==1){
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d107      	bne.n	80006da <task_control_main_function+0x1a6>
		disp_image_10080(31,0,gImage_logo,BLUE,BLACK);
 80006ca:	2100      	movs	r1, #0
 80006cc:	331e      	adds	r3, #30
 80006ce:	9100      	str	r1, [sp, #0]
 80006d0:	4a55      	ldr	r2, [pc, #340]	; (8000828 <task_control_main_function+0x2f4>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fb72 	bl	8001dbc <disp_image_10080>
 80006d8:	e74e      	b.n	8000578 <task_control_main_function+0x44>
	}else if(uc_lcd_init_count==(1000/10)){
 80006da:	2b64      	cmp	r3, #100	; 0x64
 80006dc:	d109      	bne.n	80006f2 <task_control_main_function+0x1be>
		display_gb1616(20,30,"方糖配我更精彩",RED,BLACK);
 80006de:	2300      	movs	r3, #0
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	23f8      	movs	r3, #248	; 0xf8
 80006e4:	211e      	movs	r1, #30
 80006e6:	2014      	movs	r0, #20
 80006e8:	4a50      	ldr	r2, [pc, #320]	; (800082c <task_control_main_function+0x2f8>)
 80006ea:	021b      	lsls	r3, r3, #8
		display_gb1616(132,60,"1.0",GREEN,BLACK);
 80006ec:	f001 f9e6 	bl	8001abc <display_gb1616>
 80006f0:	e742      	b.n	8000578 <task_control_main_function+0x44>
	}else if(uc_lcd_init_count==(3000/10)){
 80006f2:	2196      	movs	r1, #150	; 0x96
 80006f4:	0049      	lsls	r1, r1, #1
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d107      	bne.n	800070a <task_control_main_function+0x1d6>
		display_gb1616(132,60,"1.0",GREEN,BLACK);
 80006fa:	2300      	movs	r3, #0
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	23fc      	movs	r3, #252	; 0xfc
 8000700:	4a4b      	ldr	r2, [pc, #300]	; (8000830 <task_control_main_function+0x2fc>)
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	39f0      	subs	r1, #240	; 0xf0
 8000706:	2084      	movs	r0, #132	; 0x84
 8000708:	e7f0      	b.n	80006ec <task_control_main_function+0x1b8>
	}else if(uc_lcd_init_count==(5000/10)){
 800070a:	21fa      	movs	r1, #250	; 0xfa
 800070c:	0049      	lsls	r1, r1, #1
 800070e:	428b      	cmp	r3, r1
 8000710:	d103      	bne.n	800071a <task_control_main_function+0x1e6>
		disp_clear_screen(BLACK);
 8000712:	2000      	movs	r0, #0
 8000714:	f001 fa84 	bl	8001c20 <disp_clear_screen>
 8000718:	e72e      	b.n	8000578 <task_control_main_function+0x44>
	}else if(uc_lcd_init_count>(5000/10)){
 800071a:	428b      	cmp	r3, r1
 800071c:	d800      	bhi.n	8000720 <task_control_main_function+0x1ec>
 800071e:	e72b      	b.n	8000578 <task_control_main_function+0x44>
		uc_lcd_init_count =0 ;
 8000720:	2500      	movs	r5, #0
		em_work_mode = WORK_MODE_NORMAL;   //正常模式
 8000722:	2303      	movs	r3, #3
		uc_lcd_init_count =0 ;
 8000724:	8015      	strh	r5, [r2, #0]
		em_work_mode = WORK_MODE_NORMAL;   //正常模式
 8000726:	4a2c      	ldr	r2, [pc, #176]	; (80007d8 <task_control_main_function+0x2a4>)
 8000728:	7013      	strb	r3, [r2, #0]
 800072a:	e74b      	b.n	80005c4 <task_control_main_function+0x90>
			disp_image_3232(128,45,gImage_FM,GRAY,BLACK);
 800072c:	9500      	str	r5, [sp, #0]
			 	disp_image_3232(128,45,gImage_FM,GRAY,BLACK);
 800072e:	4b41      	ldr	r3, [pc, #260]	; (8000834 <task_control_main_function+0x300>)
 8000730:	212d      	movs	r1, #45	; 0x2d
 8000732:	2080      	movs	r0, #128	; 0x80
 8000734:	f001 faa0 	bl	8001c78 <disp_image_3232>
 8000738:	e78e      	b.n	8000658 <task_control_main_function+0x124>
  LCD_POWER_OFF;
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	2090      	movs	r0, #144	; 0x90
 800073e:	2201      	movs	r2, #1
 8000740:	0049      	lsls	r1, r1, #1
 8000742:	05c0      	lsls	r0, r0, #23
 8000744:	f002 fa2a 	bl	8002b9c <HAL_GPIO_WritePin>
  LCD_SCL_CLR;
 8000748:	2090      	movs	r0, #144	; 0x90
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	05c0      	lsls	r0, r0, #23
 8000750:	f002 fa24 	bl	8002b9c <HAL_GPIO_WritePin>
  LCD_SDA_CLR;
 8000754:	2090      	movs	r0, #144	; 0x90
 8000756:	2200      	movs	r2, #0
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	05c0      	lsls	r0, r0, #23
 800075c:	f002 fa1e 	bl	8002b9c <HAL_GPIO_WritePin>
  LCD_RESET_CLR;
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	481e      	ldr	r0, [pc, #120]	; (80007e0 <task_control_main_function+0x2ac>)
 8000766:	f002 fa19 	bl	8002b9c <HAL_GPIO_WritePin>
  LCD_RS_CLR;
 800076a:	2090      	movs	r0, #144	; 0x90
 800076c:	2200      	movs	r2, #0
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	05c0      	lsls	r0, r0, #23
 8000772:	f002 fa13 	bl	8002b9c <HAL_GPIO_WritePin>
  LCD_CS_CLR;
 8000776:	2200      	movs	r2, #0
 8000778:	2102      	movs	r1, #2
 800077a:	4819      	ldr	r0, [pc, #100]	; (80007e0 <task_control_main_function+0x2ac>)
 800077c:	f002 fa0e 	bl	8002b9c <HAL_GPIO_WritePin>
  if(uckey_value != KEY_NONE){  //有按键
 8000780:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <task_control_main_function+0x2b8>)
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	2a00      	cmp	r2, #0
 8000786:	d100      	bne.n	800078a <task_control_main_function+0x256>
 8000788:	e6f6      	b.n	8000578 <task_control_main_function+0x44>
	  uckey_value = KEY_NONE;
 800078a:	2200      	movs	r2, #0
	  LCD_POWER_ON;
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	2090      	movs	r0, #144	; 0x90
	  uckey_value = KEY_NONE;
 8000790:	701a      	strb	r2, [r3, #0]
	  em_work_mode = WORK_MODE_SCREEN_INIT;  //液晶初始化
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <task_control_main_function+0x2a4>)
	  LCD_POWER_ON;
 8000794:	0049      	lsls	r1, r1, #1
 8000796:	05c0      	lsls	r0, r0, #23
	  em_work_mode = WORK_MODE_SCREEN_INIT;  //液晶初始化
 8000798:	701a      	strb	r2, [r3, #0]
	  LCD_POWER_ON;
 800079a:	f002 f9ff 	bl	8002b9c <HAL_GPIO_WritePin>
	  LCD_SCL_SET;
 800079e:	2090      	movs	r0, #144	; 0x90
 80007a0:	2201      	movs	r2, #1
 80007a2:	2120      	movs	r1, #32
 80007a4:	05c0      	lsls	r0, r0, #23
 80007a6:	f002 f9f9 	bl	8002b9c <HAL_GPIO_WritePin>
	  LCD_SDA_SET;
 80007aa:	2090      	movs	r0, #144	; 0x90
 80007ac:	2201      	movs	r2, #1
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	05c0      	lsls	r0, r0, #23
 80007b2:	f002 f9f3 	bl	8002b9c <HAL_GPIO_WritePin>
	  LCD_RESET_SET;
 80007b6:	2201      	movs	r2, #1
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <task_control_main_function+0x2ac>)
 80007ba:	0011      	movs	r1, r2
 80007bc:	f002 f9ee 	bl	8002b9c <HAL_GPIO_WritePin>
	  LCD_RS_SET;
 80007c0:	2090      	movs	r0, #144	; 0x90
 80007c2:	2201      	movs	r2, #1
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	05c0      	lsls	r0, r0, #23
 80007c8:	f002 f9e8 	bl	8002b9c <HAL_GPIO_WritePin>
	  LCD_CS_SET;
 80007cc:	2201      	movs	r2, #1
 80007ce:	2102      	movs	r1, #2
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <task_control_main_function+0x2ac>)
 80007d2:	f002 f9e3 	bl	8002b9c <HAL_GPIO_WritePin>
 80007d6:	e6cf      	b.n	8000578 <task_control_main_function+0x44>
 80007d8:	20000122 	.word	0x20000122
 80007dc:	20000112 	.word	0x20000112
 80007e0:	48000400 	.word	0x48000400
 80007e4:	20000110 	.word	0x20000110
 80007e8:	2000010b 	.word	0x2000010b
 80007ec:	20000124 	.word	0x20000124
 80007f0:	0000c618 	.word	0x0000c618
 80007f4:	000003ef 	.word	0x000003ef
 80007f8:	20000123 	.word	0x20000123
 80007fc:	08004ab8 	.word	0x08004ab8
 8000800:	00005458 	.word	0x00005458
 8000804:	20000004 	.word	0x20000004
 8000808:	20000121 	.word	0x20000121
 800080c:	2000011f 	.word	0x2000011f
 8000810:	08004a38 	.word	0x08004a38
 8000814:	20000107 	.word	0x20000107
 8000818:	08004b38 	.word	0x08004b38
 800081c:	20000120 	.word	0x20000120
 8000820:	08004bb8 	.word	0x08004bb8
 8000824:	080051b3 	.word	0x080051b3
 8000828:	08004c38 	.word	0x08004c38
 800082c:	080051ca 	.word	0x080051ca
 8000830:	080051d9 	.word	0x080051d9
 8000834:	00008430 	.word	0x00008430
  task_qn8027_function();
 8000838:	f000 fe9e 	bl	8001578 <task_qn8027_function>
  dormancy_exit_count++;   //休眠计数
 800083c:	4cd9      	ldr	r4, [pc, #868]	; (8000ba4 <task_control_main_function+0x670>)
  if(dormancy_exit_count >= (5*60*1000/10)){//5min
 800083e:	4fda      	ldr	r7, [pc, #872]	; (8000ba8 <task_control_main_function+0x674>)
  dormancy_exit_count++;   //休眠计数
 8000840:	8823      	ldrh	r3, [r4, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	b29b      	uxth	r3, r3
  if(dormancy_exit_count >= (5*60*1000/10)){//5min
 8000846:	42bb      	cmp	r3, r7
 8000848:	d878      	bhi.n	800093c <task_control_main_function+0x408>
  dormancy_exit_count++;   //休眠计数
 800084a:	8023      	strh	r3, [r4, #0]
  if(em_play_switch == SWITCH_OPEN){//方糖播放开关
 800084c:	4bd7      	ldr	r3, [pc, #860]	; (8000bac <task_control_main_function+0x678>)
	  DAC_MTUE_OFF;
 800084e:	2201      	movs	r2, #1
  if(em_play_switch == SWITCH_OPEN){//方糖播放开关
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d000      	beq.n	8000858 <task_control_main_function+0x324>
	  DAC_MTUE_ON;
 8000856:	2200      	movs	r2, #0
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	2090      	movs	r0, #144	; 0x90
 800085c:	0149      	lsls	r1, r1, #5
 800085e:	05c0      	lsls	r0, r0, #23
 8000860:	f002 f99c 	bl	8002b9c <HAL_GPIO_WritePin>
  if(falsh_write_flag == 0x5A){ //flash数据写标志
 8000864:	4ed2      	ldr	r6, [pc, #840]	; (8000bb0 <task_control_main_function+0x67c>)
 8000866:	4dd3      	ldr	r5, [pc, #844]	; (8000bb4 <task_control_main_function+0x680>)
 8000868:	7833      	ldrb	r3, [r6, #0]
 800086a:	4ad3      	ldr	r2, [pc, #844]	; (8000bb8 <task_control_main_function+0x684>)
 800086c:	2b5a      	cmp	r3, #90	; 0x5a
 800086e:	d16b      	bne.n	8000948 <task_control_main_function+0x414>
	  falsh_write_count++;
 8000870:	8813      	ldrh	r3, [r2, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	b29b      	uxth	r3, r3
 8000876:	8013      	strh	r3, [r2, #0]
	  if(falsh_write_count >= (5*60*1000/10)){//5min
 8000878:	42bb      	cmp	r3, r7
 800087a:	d92a      	bls.n	80008d2 <task_control_main_function+0x39e>
		  falsh_write_flag = 0;
 800087c:	2700      	movs	r7, #0
 800087e:	7037      	strb	r7, [r6, #0]
   uint32_t PageError = 0;//设置PageError
 8000880:	9704      	str	r7, [sp, #16]
   HAL_FLASH_Unlock();//1、解锁FLASH
 8000882:	f001 ff31 	bl	80026e8 <HAL_FLASH_Unlock>
   f.PageAddress = 0x08007C00;//起始地址
 8000886:	4bcd      	ldr	r3, [pc, #820]	; (8000bbc <task_control_main_function+0x688>)
   HAL_FLASHEx_Erase(&f, &PageError);
 8000888:	a904      	add	r1, sp, #16
   f.PageAddress = 0x08007C00;//起始地址
 800088a:	9306      	str	r3, [sp, #24]
   f.NbPages = 1;//擦除1个页
 800088c:	2301      	movs	r3, #1
   HAL_FLASHEx_Erase(&f, &PageError);
 800088e:	a805      	add	r0, sp, #20
   f.NbPages = 1;//擦除1个页
 8000890:	9307      	str	r3, [sp, #28]
   f.TypeErase = FLASH_TYPEERASE_PAGES;/*!<Pages erase only*/
 8000892:	9705      	str	r7, [sp, #20]
   HAL_FLASHEx_Erase(&f, &PageError);
 8000894:	f001 ffea 	bl	800286c <HAL_FLASHEx_Erase>
   if(em_audio_mode == AUDIO_DECODING){//音频处理模式 音频解码
 8000898:	782a      	ldrb	r2, [r5, #0]
	   ui_data |= 0x10;
 800089a:	4253      	negs	r3, r2
 800089c:	415a      	adcs	r2, r3
   if(em_BL_switch == SWITCH_OPEN){   //蓝牙开关
 800089e:	4bc8      	ldr	r3, [pc, #800]	; (8000bc0 <task_control_main_function+0x68c>)
	   ui_data |= 0x10;
 80008a0:	0112      	lsls	r2, r2, #4
   if(em_BL_switch == SWITCH_OPEN){   //蓝牙开关
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	42bb      	cmp	r3, r7
 80008a6:	d102      	bne.n	80008ae <task_control_main_function+0x37a>
   	   ui_data |= 0x1000;
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	015b      	lsls	r3, r3, #5
 80008ac:	431a      	orrs	r2, r3
   if(em_FM_switch == SWITCH_OPEN){   //FM开关
 80008ae:	4bc5      	ldr	r3, [pc, #788]	; (8000bc4 <task_control_main_function+0x690>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d102      	bne.n	80008bc <task_control_main_function+0x388>
      ui_data |= 0x0100;
 80008b6:	3301      	adds	r3, #1
 80008b8:	33ff      	adds	r3, #255	; 0xff
 80008ba:	431a      	orrs	r2, r3
   ui_dataq = uc_fm_channel;
 80008bc:	4bc2      	ldr	r3, [pc, #776]	; (8000bc8 <task_control_main_function+0x694>)
   HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x08007C00, ui_data);
 80008be:	49bf      	ldr	r1, [pc, #764]	; (8000bbc <task_control_main_function+0x688>)
   ui_dataq = uc_fm_channel;
 80008c0:	781b      	ldrb	r3, [r3, #0]
   HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x08007C00, ui_data);
 80008c2:	2002      	movs	r0, #2
   ui_data |= ((ui_dataq<<16)&0x00ff0000);//广播频道
 80008c4:	041b      	lsls	r3, r3, #16
 80008c6:	431a      	orrs	r2, r3
   HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x08007C00, ui_data);
 80008c8:	2300      	movs	r3, #0
 80008ca:	f001 ff53 	bl	8002774 <HAL_FLASH_Program>
   HAL_FLASH_Lock();
 80008ce:	f001 ff1d 	bl	800270c <HAL_FLASH_Lock>
  if(em_audio_mode == AUDIO_DECODING){ //音频解码
 80008d2:	782a      	ldrb	r2, [r5, #0]
	  DAC_POWER_ON;
 80008d4:	2101      	movs	r1, #1
  if(em_audio_mode == AUDIO_DECODING){ //音频解码
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	d001      	beq.n	80008de <task_control_main_function+0x3aa>
	  DAC_POWER_OFF;
 80008da:	2201      	movs	r2, #1
 80008dc:	0011      	movs	r1, r2
 80008de:	2090      	movs	r0, #144	; 0x90
 80008e0:	05c0      	lsls	r0, r0, #23
 80008e2:	f002 f95b 	bl	8002b9c <HAL_GPIO_WritePin>
  if(em_bl_state_old != em_bl_state){
 80008e6:	4bb9      	ldr	r3, [pc, #740]	; (8000bcc <task_control_main_function+0x698>)
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	4bb9      	ldr	r3, [pc, #740]	; (8000bd0 <task_control_main_function+0x69c>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d00d      	beq.n	800090e <task_control_main_function+0x3da>
 80008f2:	2300      	movs	r3, #0
		  disp_image_3232(2,45,gImage_BL_ON,GRAYBLUE,BLACK);
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	4bb7      	ldr	r3, [pc, #732]	; (8000bd4 <task_control_main_function+0x6a0>)
	  if(em_bl_state == BL_STATUS_LINK_OK){ //连接成功
 80008f8:	2a03      	cmp	r2, #3
 80008fa:	d128      	bne.n	800094e <task_control_main_function+0x41a>
		  disp_image_3232(2,45,gImage_BL_ON,GRAYBLUE,BLACK);
 80008fc:	4ab6      	ldr	r2, [pc, #728]	; (8000bd8 <task_control_main_function+0x6a4>)
	  	  disp_image_3232(2,45,gImage_BL_OFF,GRAYBLUE,BLACK);
 80008fe:	212d      	movs	r1, #45	; 0x2d
 8000900:	2002      	movs	r0, #2
 8000902:	f001 f9b9 	bl	8001c78 <disp_image_3232>
      em_bl_state_old = em_bl_state;//记录蓝牙状态
 8000906:	4bb1      	ldr	r3, [pc, #708]	; (8000bcc <task_control_main_function+0x698>)
 8000908:	781a      	ldrb	r2, [r3, #0]
 800090a:	4bb1      	ldr	r3, [pc, #708]	; (8000bd0 <task_control_main_function+0x69c>)
 800090c:	701a      	strb	r2, [r3, #0]
  if(uckey_value == KEY_FM_SHORT_PRESS){  //FM键 短按
 800090e:	4bb3      	ldr	r3, [pc, #716]	; (8000bdc <task_control_main_function+0x6a8>)
 8000910:	7819      	ldrb	r1, [r3, #0]
 8000912:	b2c9      	uxtb	r1, r1
 8000914:	2901      	cmp	r1, #1
 8000916:	d15a      	bne.n	80009ce <task_control_main_function+0x49a>
	  uckey_value = KEY_NONE;
 8000918:	2500      	movs	r5, #0
 800091a:	701d      	strb	r5, [r3, #0]
	  falsh_write_flag = 0x5A; //flash数据写标志
 800091c:	235a      	movs	r3, #90	; 0x5a
 800091e:	7033      	strb	r3, [r6, #0]
	  if(em_FM_switch == SWITCH_OPEN){//FM广播开关
 8000920:	4ba8      	ldr	r3, [pc, #672]	; (8000bc4 <task_control_main_function+0x690>)
	  dormancy_exit_count=0; //休眠计数
 8000922:	8025      	strh	r5, [r4, #0]
	  if(em_FM_switch == SWITCH_OPEN){//FM广播开关
 8000924:	7818      	ldrb	r0, [r3, #0]
 8000926:	4aae      	ldr	r2, [pc, #696]	; (8000be0 <task_control_main_function+0x6ac>)
 8000928:	42a8      	cmp	r0, r5
 800092a:	d112      	bne.n	8000952 <task_control_main_function+0x41e>
		  em_FM_switch = SWITCH_CLOSE;
 800092c:	7019      	strb	r1, [r3, #0]
		  disp_image_3232(128,45,gImage_FM,GRAY,BLACK);
 800092e:	9000      	str	r0, [sp, #0]
 8000930:	2080      	movs	r0, #128	; 0x80
 8000932:	4bac      	ldr	r3, [pc, #688]	; (8000be4 <task_control_main_function+0x6b0>)
 8000934:	312c      	adds	r1, #44	; 0x2c
		  disp_image_3232(2,5,gImage_audio,GRAYBLUE,BLACK);
 8000936:	f001 f99f 	bl	8001c78 <disp_image_3232>
 800093a:	e61d      	b.n	8000578 <task_control_main_function+0x44>
	  dormancy_exit_count=0; //休眠计数
 800093c:	2300      	movs	r3, #0
	  em_work_mode = WORK_MODE_SCREEN_CLOSE; //息屏
 800093e:	4aaa      	ldr	r2, [pc, #680]	; (8000be8 <task_control_main_function+0x6b4>)
	  dormancy_exit_count=0; //休眠计数
 8000940:	8023      	strh	r3, [r4, #0]
	  em_work_mode = WORK_MODE_SCREEN_CLOSE; //息屏
 8000942:	3302      	adds	r3, #2
 8000944:	7013      	strb	r3, [r2, #0]
 8000946:	e781      	b.n	800084c <task_control_main_function+0x318>
	  falsh_write_count=0;
 8000948:	2300      	movs	r3, #0
 800094a:	8013      	strh	r3, [r2, #0]
 800094c:	e7c1      	b.n	80008d2 <task_control_main_function+0x39e>
	  	  disp_image_3232(2,45,gImage_BL_OFF,GRAYBLUE,BLACK);
 800094e:	4aa7      	ldr	r2, [pc, #668]	; (8000bec <task_control_main_function+0x6b8>)
 8000950:	e7d5      	b.n	80008fe <task_control_main_function+0x3ca>
		  em_FM_switch = SWITCH_OPEN;
 8000952:	701d      	strb	r5, [r3, #0]
		  disp_image_3232(128,45,gImage_FM,GRAYBLUE,BLACK);
 8000954:	212d      	movs	r1, #45	; 0x2d
 8000956:	4b9f      	ldr	r3, [pc, #636]	; (8000bd4 <task_control_main_function+0x6a0>)
 8000958:	9500      	str	r5, [sp, #0]
 800095a:	2080      	movs	r0, #128	; 0x80
 800095c:	f001 f98c 	bl	8001c78 <disp_image_3232>
		  if(uc_fm_channel>99){//三位数
 8000960:	4b99      	ldr	r3, [pc, #612]	; (8000bc8 <task_control_main_function+0x694>)
 8000962:	ac05      	add	r4, sp, #20
 8000964:	781e      	ldrb	r6, [r3, #0]
 8000966:	2e63      	cmp	r6, #99	; 0x63
 8000968:	d91e      	bls.n	80009a8 <task_control_main_function+0x474>
			 disp_buff[0] = (uc_fm_channel/100)+0x30;
 800096a:	2164      	movs	r1, #100	; 0x64
 800096c:	0030      	movs	r0, r6
 800096e:	f7ff fbe7 	bl	8000140 <__udivsi3>
 8000972:	3030      	adds	r0, #48	; 0x30
 8000974:	7020      	strb	r0, [r4, #0]
			 disp_buff[1] = (uc_fm_channel/10%10)+0x30;
 8000976:	210a      	movs	r1, #10
 8000978:	0030      	movs	r0, r6
 800097a:	f7ff fbe1 	bl	8000140 <__udivsi3>
 800097e:	210a      	movs	r1, #10
 8000980:	b2c0      	uxtb	r0, r0
 8000982:	f7ff fc63 	bl	800024c <__aeabi_uidivmod>
 8000986:	3130      	adds	r1, #48	; 0x30
 8000988:	7061      	strb	r1, [r4, #1]
			 disp_buff[2] = (uc_fm_channel%10)+0x30;
 800098a:	0030      	movs	r0, r6
 800098c:	210a      	movs	r1, #10
 800098e:	f7ff fc5d 	bl	800024c <__aeabi_uidivmod>
 8000992:	3130      	adds	r1, #48	; 0x30
 8000994:	70a1      	strb	r1, [r4, #2]
			 display_gb1212(134,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 8000996:	231f      	movs	r3, #31
 8000998:	0022      	movs	r2, r4
 800099a:	213a      	movs	r1, #58	; 0x3a
 800099c:	2086      	movs	r0, #134	; 0x86
			 disp_buff[3] = 0;
 800099e:	70e5      	strb	r5, [r4, #3]
			 display_gb1212(134,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 80009a0:	9500      	str	r5, [sp, #0]
			 display_gb1212(56,67,"音频输入",GREEN,DCYAN);//RED
 80009a2:	f000 ffdb 	bl	800195c <display_gb1212>
}
 80009a6:	e5e7      	b.n	8000578 <task_control_main_function+0x44>
			 disp_buff[0] = (uc_fm_channel/10%10)+0x30;
 80009a8:	210a      	movs	r1, #10
 80009aa:	0030      	movs	r0, r6
 80009ac:	f7ff fbc8 	bl	8000140 <__udivsi3>
 80009b0:	3030      	adds	r0, #48	; 0x30
 80009b2:	7020      	strb	r0, [r4, #0]
			 disp_buff[1] = (uc_fm_channel%10)+0x30;
 80009b4:	210a      	movs	r1, #10
 80009b6:	0030      	movs	r0, r6
 80009b8:	f7ff fc48 	bl	800024c <__aeabi_uidivmod>
 80009bc:	3130      	adds	r1, #48	; 0x30
 80009be:	7061      	strb	r1, [r4, #1]
			 disp_buff[2] = 0;
 80009c0:	70a5      	strb	r5, [r4, #2]
			 display_gb1212(141,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 80009c2:	231f      	movs	r3, #31
 80009c4:	9500      	str	r5, [sp, #0]
 80009c6:	0022      	movs	r2, r4
 80009c8:	213a      	movs	r1, #58	; 0x3a
 80009ca:	208d      	movs	r0, #141	; 0x8d
 80009cc:	e7e9      	b.n	80009a2 <task_control_main_function+0x46e>
  }else if(uckey_value == KEY_FM_LONG_PRESS){  //FM键 长按
 80009ce:	781f      	ldrb	r7, [r3, #0]
 80009d0:	b2ff      	uxtb	r7, r7
 80009d2:	2f02      	cmp	r7, #2
 80009d4:	d168      	bne.n	8000aa8 <task_control_main_function+0x574>
	  uckey_value = KEY_NONE;
 80009d6:	2500      	movs	r5, #0
 80009d8:	701d      	strb	r5, [r3, #0]
	  menu_exit_count = 0;   //菜单退出计数
 80009da:	4b85      	ldr	r3, [pc, #532]	; (8000bf0 <task_control_main_function+0x6bc>)
	  em_work_mode = WORK_MODE_FM;  //FM设置
 80009dc:	4a82      	ldr	r2, [pc, #520]	; (8000be8 <task_control_main_function+0x6b4>)
	  menu_exit_count = 0;   //菜单退出计数
 80009de:	801d      	strh	r5, [r3, #0]
	  em_work_mode = WORK_MODE_FM;  //FM设置
 80009e0:	2305      	movs	r3, #5
 80009e2:	7013      	strb	r3, [r2, #0]
	  em_FM_switch = SWITCH_OPEN;
 80009e4:	4b77      	ldr	r3, [pc, #476]	; (8000bc4 <task_control_main_function+0x690>)
	  disp_clear_screen(BLACK);
 80009e6:	0028      	movs	r0, r5
	  dormancy_exit_count=0; //休眠计数
 80009e8:	8025      	strh	r5, [r4, #0]
	  em_FM_switch = SWITCH_OPEN;
 80009ea:	701d      	strb	r5, [r3, #0]
	  disp_clear_screen(BLACK);
 80009ec:	f001 f918 	bl	8001c20 <disp_clear_screen>
	  uc_fm_channel_old = uc_fm_channel;//记录FM调频值
 80009f0:	4b75      	ldr	r3, [pc, #468]	; (8000bc8 <task_control_main_function+0x694>)
 80009f2:	4c80      	ldr	r4, [pc, #512]	; (8000bf4 <task_control_main_function+0x6c0>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
	  display_gb1616(55,2,"FM调频",RED,BLACK);//LGRAY
 80009f6:	4a80      	ldr	r2, [pc, #512]	; (8000bf8 <task_control_main_function+0x6c4>)
	  uc_fm_channel_old = uc_fm_channel;//记录FM调频值
 80009f8:	7023      	strb	r3, [r4, #0]
	  display_gb1616(55,2,"FM调频",RED,BLACK);//LGRAY
 80009fa:	23f8      	movs	r3, #248	; 0xf8
 80009fc:	0039      	movs	r1, r7
 80009fe:	021b      	lsls	r3, r3, #8
 8000a00:	2037      	movs	r0, #55	; 0x37
 8000a02:	9500      	str	r5, [sp, #0]
 8000a04:	f001 f85a 	bl	8001abc <display_gb1616>
	  display_gb1212(4,65,"减",GREEN,BLACK);
 8000a08:	23fc      	movs	r3, #252	; 0xfc
 8000a0a:	4a7c      	ldr	r2, [pc, #496]	; (8000bfc <task_control_main_function+0x6c8>)
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	2141      	movs	r1, #65	; 0x41
 8000a10:	2004      	movs	r0, #4
 8000a12:	9500      	str	r5, [sp, #0]
 8000a14:	f000 ffa2 	bl	800195c <display_gb1212>
	  display_gb1212(144,65,"加",GREEN,BLACK);
 8000a18:	23fc      	movs	r3, #252	; 0xfc
 8000a1a:	4a79      	ldr	r2, [pc, #484]	; (8000c00 <task_control_main_function+0x6cc>)
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	2141      	movs	r1, #65	; 0x41
 8000a20:	2090      	movs	r0, #144	; 0x90
 8000a22:	9500      	str	r5, [sp, #0]
 8000a24:	f000 ff9a 	bl	800195c <display_gb1212>
	  display_gb1212(66,65,"确定",GREEN,BLACK);
 8000a28:	23fc      	movs	r3, #252	; 0xfc
 8000a2a:	9500      	str	r5, [sp, #0]
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	4a75      	ldr	r2, [pc, #468]	; (8000c04 <task_control_main_function+0x6d0>)
 8000a30:	2141      	movs	r1, #65	; 0x41
 8000a32:	2042      	movs	r0, #66	; 0x42
 8000a34:	f000 ff92 	bl	800195c <display_gb1212>
	  if(uc_fm_channel_old < 76){//保护
 8000a38:	7823      	ldrb	r3, [r4, #0]
 8000a3a:	2b4b      	cmp	r3, #75	; 0x4b
 8000a3c:	d801      	bhi.n	8000a42 <task_control_main_function+0x50e>
		  uc_fm_channel_old=76;
 8000a3e:	234c      	movs	r3, #76	; 0x4c
 8000a40:	7023      	strb	r3, [r4, #0]
	  if(uc_fm_channel_old>99){//三位数
 8000a42:	7825      	ldrb	r5, [r4, #0]
 8000a44:	ac05      	add	r4, sp, #20
 8000a46:	2d63      	cmp	r5, #99	; 0x63
 8000a48:	d925      	bls.n	8000a96 <task_control_main_function+0x562>
		  disp_buff[0] = (uc_fm_channel_old/100)+0x30;
 8000a4a:	2164      	movs	r1, #100	; 0x64
 8000a4c:	0028      	movs	r0, r5
 8000a4e:	f7ff fb77 	bl	8000140 <__udivsi3>
 8000a52:	3030      	adds	r0, #48	; 0x30
 8000a54:	7020      	strb	r0, [r4, #0]
		  disp_buff[1] = (uc_fm_channel_old/10%10)+0x30;
 8000a56:	210a      	movs	r1, #10
 8000a58:	0028      	movs	r0, r5
 8000a5a:	f7ff fb71 	bl	8000140 <__udivsi3>
 8000a5e:	210a      	movs	r1, #10
 8000a60:	b2c0      	uxtb	r0, r0
 8000a62:	f7ff fbf3 	bl	800024c <__aeabi_uidivmod>
 8000a66:	3130      	adds	r1, #48	; 0x30
 8000a68:	7061      	strb	r1, [r4, #1]
		  disp_buff[2] = (uc_fm_channel_old%10)+0x30;
 8000a6a:	0028      	movs	r0, r5
 8000a6c:	210a      	movs	r1, #10
 8000a6e:	f7ff fbed 	bl	800024c <__aeabi_uidivmod>
	  display_gb1616(42,30,(const char*)disp_buff,YELLOW,BLACK);//数字显示
 8000a72:	2500      	movs	r5, #0
		  disp_buff[3] = 0;
 8000a74:	2300      	movs	r3, #0
		  disp_buff[2] = (uc_fm_channel_old%10)+0x30;
 8000a76:	3130      	adds	r1, #48	; 0x30
 8000a78:	70a1      	strb	r1, [r4, #2]
		  disp_buff[3] = 0;
 8000a7a:	70e3      	strb	r3, [r4, #3]
	  display_gb1616(42,30,(const char*)disp_buff,YELLOW,BLACK);//数字显示
 8000a7c:	0022      	movs	r2, r4
 8000a7e:	4b62      	ldr	r3, [pc, #392]	; (8000c08 <task_control_main_function+0x6d4>)
 8000a80:	211e      	movs	r1, #30
 8000a82:	202a      	movs	r0, #42	; 0x2a
 8000a84:	9500      	str	r5, [sp, #0]
 8000a86:	f001 f819 	bl	8001abc <display_gb1616>
	  display_gb1616(88,30,"MHz",BLUE,BLACK);//数字显示
 8000a8a:	9500      	str	r5, [sp, #0]
 8000a8c:	231f      	movs	r3, #31
 8000a8e:	4a5f      	ldr	r2, [pc, #380]	; (8000c0c <task_control_main_function+0x6d8>)
 8000a90:	211e      	movs	r1, #30
 8000a92:	2058      	movs	r0, #88	; 0x58
 8000a94:	e62a      	b.n	80006ec <task_control_main_function+0x1b8>
		  disp_buff[0] = ' ';
 8000a96:	2320      	movs	r3, #32
		  disp_buff[1] = (uc_fm_channel_old/10%10)+0x30;
 8000a98:	210a      	movs	r1, #10
		  disp_buff[0] = ' ';
 8000a9a:	7023      	strb	r3, [r4, #0]
		  disp_buff[1] = (uc_fm_channel_old/10%10)+0x30;
 8000a9c:	0028      	movs	r0, r5
 8000a9e:	f7ff fb4f 	bl	8000140 <__udivsi3>
 8000aa2:	3030      	adds	r0, #48	; 0x30
 8000aa4:	7060      	strb	r0, [r4, #1]
 8000aa6:	e7e0      	b.n	8000a6a <task_control_main_function+0x536>
  }else if(uckey_value == KEY_BL_SHORT_PRESS){  //蓝牙键 短按
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	2a03      	cmp	r2, #3
 8000aac:	d115      	bne.n	8000ada <task_control_main_function+0x5a6>
	  uckey_value = KEY_NONE;
 8000aae:	2100      	movs	r1, #0
 8000ab0:	7019      	strb	r1, [r3, #0]
	  falsh_write_flag = 0x5A; //flash数据写标志
 8000ab2:	235a      	movs	r3, #90	; 0x5a
 8000ab4:	7033      	strb	r3, [r6, #0]
	  if(em_BL_switch == SWITCH_OPEN){//蓝牙开关
 8000ab6:	4b42      	ldr	r3, [pc, #264]	; (8000bc0 <task_control_main_function+0x68c>)
	  dormancy_exit_count=0; //休眠计数
 8000ab8:	8021      	strh	r1, [r4, #0]
	  if(em_BL_switch == SWITCH_OPEN){//蓝牙开关
 8000aba:	7818      	ldrb	r0, [r3, #0]
 8000abc:	4a4b      	ldr	r2, [pc, #300]	; (8000bec <task_control_main_function+0x6b8>)
 8000abe:	4288      	cmp	r0, r1
 8000ac0:	d106      	bne.n	8000ad0 <task_control_main_function+0x59c>
		  em_BL_switch = SWITCH_CLOSE;
 8000ac2:	3101      	adds	r1, #1
 8000ac4:	7019      	strb	r1, [r3, #0]
		  disp_image_3232(2,45,gImage_BL_OFF,GRAY,BLACK);
 8000ac6:	4b47      	ldr	r3, [pc, #284]	; (8000be4 <task_control_main_function+0x6b0>)
 8000ac8:	9000      	str	r0, [sp, #0]
 8000aca:	312c      	adds	r1, #44	; 0x2c
		  disp_image_3232(2,5,gImage_audio,GRAYBLUE,BLACK);
 8000acc:	2002      	movs	r0, #2
 8000ace:	e732      	b.n	8000936 <task_control_main_function+0x402>
		  em_BL_switch = SWITCH_OPEN;
 8000ad0:	7019      	strb	r1, [r3, #0]
		  disp_image_3232(2,45,gImage_BL_OFF,GRAYBLUE,BLACK);
 8000ad2:	9100      	str	r1, [sp, #0]
 8000ad4:	4b3f      	ldr	r3, [pc, #252]	; (8000bd4 <task_control_main_function+0x6a0>)
 8000ad6:	212d      	movs	r1, #45	; 0x2d
 8000ad8:	e7f8      	b.n	8000acc <task_control_main_function+0x598>
  }else if(uckey_value == KEY_BL_LONG_PRESS){  //蓝牙键 长按
 8000ada:	781f      	ldrb	r7, [r3, #0]
 8000adc:	b2ff      	uxtb	r7, r7
 8000ade:	2f04      	cmp	r7, #4
 8000ae0:	d148      	bne.n	8000b74 <task_control_main_function+0x640>
	  uckey_value = KEY_NONE;
 8000ae2:	2500      	movs	r5, #0
 8000ae4:	701d      	strb	r5, [r3, #0]
	  menu_exit_count = 0;   //菜单退出计数
 8000ae6:	4b42      	ldr	r3, [pc, #264]	; (8000bf0 <task_control_main_function+0x6bc>)
	  disp_clear_screen(BLACK);
 8000ae8:	0028      	movs	r0, r5
	  menu_exit_count = 0;   //菜单退出计数
 8000aea:	801d      	strh	r5, [r3, #0]
	  em_work_mode = WORK_MODE_BL;   //蓝牙设置
 8000aec:	4b3e      	ldr	r3, [pc, #248]	; (8000be8 <task_control_main_function+0x6b4>)
	  dormancy_exit_count=0; //休眠计数
 8000aee:	8025      	strh	r5, [r4, #0]
	  em_work_mode = WORK_MODE_BL;   //蓝牙设置
 8000af0:	701f      	strb	r7, [r3, #0]
	  em_BL_switch = SWITCH_OPEN;
 8000af2:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <task_control_main_function+0x68c>)
 8000af4:	701d      	strb	r5, [r3, #0]
	  disp_clear_screen(BLACK);
 8000af6:	f001 f893 	bl	8001c20 <disp_clear_screen>
	  display_gb1616(50,2,"蓝牙设置",RED,BLACK);//LGRAY
 8000afa:	23f8      	movs	r3, #248	; 0xf8
 8000afc:	4a44      	ldr	r2, [pc, #272]	; (8000c10 <task_control_main_function+0x6dc>)
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	2102      	movs	r1, #2
 8000b02:	2032      	movs	r0, #50	; 0x32
 8000b04:	9500      	str	r5, [sp, #0]
 8000b06:	f000 ffd9 	bl	8001abc <display_gb1616>
	  display_gb1212(4,65,"复位",GREEN,BLACK);
 8000b0a:	23fc      	movs	r3, #252	; 0xfc
 8000b0c:	4a41      	ldr	r2, [pc, #260]	; (8000c14 <task_control_main_function+0x6e0>)
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	2141      	movs	r1, #65	; 0x41
 8000b12:	0038      	movs	r0, r7
 8000b14:	9500      	str	r5, [sp, #0]
 8000b16:	f000 ff21 	bl	800195c <display_gb1212>
	  display_gb1212(135,65,"重启",GREEN,BLACK);
 8000b1a:	23fc      	movs	r3, #252	; 0xfc
 8000b1c:	4a3e      	ldr	r2, [pc, #248]	; (8000c18 <task_control_main_function+0x6e4>)
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	2141      	movs	r1, #65	; 0x41
 8000b22:	2087      	movs	r0, #135	; 0x87
 8000b24:	9500      	str	r5, [sp, #0]
 8000b26:	f000 ff19 	bl	800195c <display_gb1212>
	  display_gb1212(66,65,"返回",GREEN,BLACK);
 8000b2a:	23fc      	movs	r3, #252	; 0xfc
 8000b2c:	9500      	str	r5, [sp, #0]
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	4a3a      	ldr	r2, [pc, #232]	; (8000c1c <task_control_main_function+0x6e8>)
 8000b32:	2141      	movs	r1, #65	; 0x41
 8000b34:	2042      	movs	r0, #66	; 0x42
 8000b36:	f000 ff11 	bl	800195c <display_gb1212>
	  if(em_bl_state == BL_STATUS_RESET){ //出厂设置
 8000b3a:	4c24      	ldr	r4, [pc, #144]	; (8000bcc <task_control_main_function+0x698>)
 8000b3c:	7823      	ldrb	r3, [r4, #0]
 8000b3e:	42ab      	cmp	r3, r5
 8000b40:	d10a      	bne.n	8000b58 <task_control_main_function+0x624>
	  	  display_gb1212(45,35,"数据清除中",YELLOW,BLACK);
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	4a36      	ldr	r2, [pc, #216]	; (8000c20 <task_control_main_function+0x6ec>)
 8000b46:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <task_control_main_function+0x6d4>)
		  display_gb1212(45,35,"詹连接成功",BLUE,BLACK);//
 8000b48:	2123      	movs	r1, #35	; 0x23
 8000b4a:	202d      	movs	r0, #45	; 0x2d
 8000b4c:	f000 ff06 	bl	800195c <display_gb1212>
	  em_bl_state_old = em_bl_state;//记录蓝牙状态
 8000b50:	7822      	ldrb	r2, [r4, #0]
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <task_control_main_function+0x69c>)
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	e50f      	b.n	8000578 <task_control_main_function+0x44>
		  display_gb1212(45,35,"詹重启中詹",YELLOW,BLACK);
 8000b58:	9500      	str	r5, [sp, #0]
	  }else if(em_bl_state == BL_STATUS_RESTART){ //重启中
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d102      	bne.n	8000b64 <task_control_main_function+0x630>
		  display_gb1212(45,35,"詹重启中詹",YELLOW,BLACK);
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <task_control_main_function+0x6d4>)
 8000b60:	4a30      	ldr	r2, [pc, #192]	; (8000c24 <task_control_main_function+0x6f0>)
 8000b62:	e7f1      	b.n	8000b48 <task_control_main_function+0x614>
	  }else if(em_bl_state == BL_STATUS_LINKING){ //连接中
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d102      	bne.n	8000b6e <task_control_main_function+0x63a>
		  display_gb1212(45,35,"詹连接中詹",YELLOW,BLACK);//
 8000b68:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <task_control_main_function+0x6d4>)
 8000b6a:	4a2f      	ldr	r2, [pc, #188]	; (8000c28 <task_control_main_function+0x6f4>)
 8000b6c:	e7ec      	b.n	8000b48 <task_control_main_function+0x614>
		  display_gb1212(45,35,"詹连接成功",BLUE,BLACK);//
 8000b6e:	231f      	movs	r3, #31
 8000b70:	4a2e      	ldr	r2, [pc, #184]	; (8000c2c <task_control_main_function+0x6f8>)
 8000b72:	e7e9      	b.n	8000b48 <task_control_main_function+0x614>
  }else if(uckey_value == KEY_MAIN_SHORT_PRESS){  //主键 短按
 8000b74:	7819      	ldrb	r1, [r3, #0]
 8000b76:	b2c9      	uxtb	r1, r1
 8000b78:	2905      	cmp	r1, #5
 8000b7a:	d15b      	bne.n	8000c34 <task_control_main_function+0x700>
	  uckey_value = KEY_NONE;
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	7018      	strb	r0, [r3, #0]
	  if(em_play_switch == SWITCH_OPEN){  //方糖播放开关
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <task_control_main_function+0x678>)
	  dormancy_exit_count=0; //休眠计数
 8000b82:	8020      	strh	r0, [r4, #0]
	  if(em_play_switch == SWITCH_OPEN){  //方糖播放开关
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4a2a      	ldr	r2, [pc, #168]	; (8000c30 <task_control_main_function+0x6fc>)
 8000b88:	4283      	cmp	r3, r0
 8000b8a:	d106      	bne.n	8000b9a <task_control_main_function+0x666>
		  em_play_switch = SWITCH_CLOSE;
 8000b8c:	4c07      	ldr	r4, [pc, #28]	; (8000bac <task_control_main_function+0x678>)
 8000b8e:	3001      	adds	r0, #1
 8000b90:	7020      	strb	r0, [r4, #0]
		  disp_image_3232(2,5,gImage_audio,GRAY,BLACK);
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	3001      	adds	r0, #1
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <task_control_main_function+0x6b0>)
 8000b98:	e6cd      	b.n	8000936 <task_control_main_function+0x402>
		  em_play_switch = SWITCH_OPEN;
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <task_control_main_function+0x678>)
 8000b9c:	7018      	strb	r0, [r3, #0]
		  disp_image_3232(2,5,gImage_audio,GRAYBLUE,BLACK);
 8000b9e:	9000      	str	r0, [sp, #0]
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <task_control_main_function+0x6a0>)
 8000ba2:	e793      	b.n	8000acc <task_control_main_function+0x598>
 8000ba4:	20000104 	.word	0x20000104
 8000ba8:	0000752f 	.word	0x0000752f
 8000bac:	20000107 	.word	0x20000107
 8000bb0:	2000010a 	.word	0x2000010a
 8000bb4:	20000120 	.word	0x20000120
 8000bb8:	20000108 	.word	0x20000108
 8000bbc:	08007c00 	.word	0x08007c00
 8000bc0:	20000121 	.word	0x20000121
 8000bc4:	20000123 	.word	0x20000123
 8000bc8:	20000004 	.word	0x20000004
 8000bcc:	2000011f 	.word	0x2000011f
 8000bd0:	20000106 	.word	0x20000106
 8000bd4:	00005458 	.word	0x00005458
 8000bd8:	08004a38 	.word	0x08004a38
 8000bdc:	20000124 	.word	0x20000124
 8000be0:	08004ab8 	.word	0x08004ab8
 8000be4:	00008430 	.word	0x00008430
 8000be8:	20000122 	.word	0x20000122
 8000bec:	080049b8 	.word	0x080049b8
 8000bf0:	2000010c 	.word	0x2000010c
 8000bf4:	2000010e 	.word	0x2000010e
 8000bf8:	080051dd 	.word	0x080051dd
 8000bfc:	080051e4 	.word	0x080051e4
 8000c00:	080051e7 	.word	0x080051e7
 8000c04:	080051ea 	.word	0x080051ea
 8000c08:	0000ffe0 	.word	0x0000ffe0
 8000c0c:	080051ef 	.word	0x080051ef
 8000c10:	080051f3 	.word	0x080051f3
 8000c14:	080051fc 	.word	0x080051fc
 8000c18:	08005201 	.word	0x08005201
 8000c1c:	08005206 	.word	0x08005206
 8000c20:	0800520b 	.word	0x0800520b
 8000c24:	08005216 	.word	0x08005216
 8000c28:	08005221 	.word	0x08005221
 8000c2c:	0800522c 	.word	0x0800522c
 8000c30:	08004b38 	.word	0x08004b38
  }else if(uckey_value == KEY_MAIN_LONG_PRESS){   //主键 长按
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	2a06      	cmp	r2, #6
 8000c38:	d000      	beq.n	8000c3c <task_control_main_function+0x708>
 8000c3a:	e49d      	b.n	8000578 <task_control_main_function+0x44>
	  uckey_value = KEY_NONE;
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	7019      	strb	r1, [r3, #0]
	  falsh_write_flag = 0x5A; //flash数据写标志
 8000c40:	235a      	movs	r3, #90	; 0x5a
 8000c42:	7033      	strb	r3, [r6, #0]
	  if(em_audio_mode == AUDIO_DECODING){  //音频处理模式 音频解码
 8000c44:	782b      	ldrb	r3, [r5, #0]
	  dormancy_exit_count=0; //休眠计数
 8000c46:	8021      	strh	r1, [r4, #0]
 8000c48:	4ad8      	ldr	r2, [pc, #864]	; (8000fac <task_control_main_function+0xa78>)
 8000c4a:	4cd9      	ldr	r4, [pc, #868]	; (8000fb0 <task_control_main_function+0xa7c>)
 8000c4c:	4ed9      	ldr	r6, [pc, #868]	; (8000fb4 <task_control_main_function+0xa80>)
	  if(em_audio_mode == AUDIO_DECODING){  //音频处理模式 音频解码
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d11a      	bne.n	8000c88 <task_control_main_function+0x754>
		  em_audio_mode = AUDIO_INPUT;//音频输入
 8000c52:	3101      	adds	r1, #1
 8000c54:	7029      	strb	r1, [r5, #0]
		  disp_image_3232(128,5,gImage_headset,GRAY,BLACK);
 8000c56:	2080      	movs	r0, #128	; 0x80
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	3104      	adds	r1, #4
 8000c5c:	4bd6      	ldr	r3, [pc, #856]	; (8000fb8 <task_control_main_function+0xa84>)
 8000c5e:	f001 f80b 	bl	8001c78 <disp_image_3232>
		  display_gb1616(64,2,"模式",BLUE,DCYAN);
 8000c62:	231f      	movs	r3, #31
 8000c64:	0032      	movs	r2, r6
 8000c66:	9400      	str	r4, [sp, #0]
			 display_gb1616(64,2,"模式",BLUE,DCYAN);//LGRAY
 8000c68:	2102      	movs	r1, #2
 8000c6a:	2040      	movs	r0, #64	; 0x40
 8000c6c:	f000 ff26 	bl	8001abc <display_gb1616>
			 disp_image_8040(40,20,gImage_35mm,YELLOW,DCYAN);//LIGHTGREEN
 8000c70:	4bd2      	ldr	r3, [pc, #840]	; (8000fbc <task_control_main_function+0xa88>)
 8000c72:	4ad3      	ldr	r2, [pc, #844]	; (8000fc0 <task_control_main_function+0xa8c>)
 8000c74:	9400      	str	r4, [sp, #0]
 8000c76:	2114      	movs	r1, #20
 8000c78:	2028      	movs	r0, #40	; 0x28
 8000c7a:	f001 f84d 	bl	8001d18 <disp_image_8040>
			 display_gb1212(56,67,"音频输入",GREEN,DCYAN);//RED
 8000c7e:	23fc      	movs	r3, #252	; 0xfc
 8000c80:	9400      	str	r4, [sp, #0]
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	4acf      	ldr	r2, [pc, #828]	; (8000fc4 <task_control_main_function+0xa90>)
 8000c86:	e018      	b.n	8000cba <task_control_main_function+0x786>
		  em_audio_mode = AUDIO_DECODING;////音频解码
 8000c88:	7029      	strb	r1, [r5, #0]
		  disp_image_3232(128,5,gImage_headset,GRAYBLUE,BLACK);
 8000c8a:	4bcf      	ldr	r3, [pc, #828]	; (8000fc8 <task_control_main_function+0xa94>)
 8000c8c:	9100      	str	r1, [sp, #0]
 8000c8e:	2080      	movs	r0, #128	; 0x80
 8000c90:	2105      	movs	r1, #5
 8000c92:	f000 fff1 	bl	8001c78 <disp_image_3232>
		  display_gb1616(64,2,"模式",BLUE,DCYAN);//LGRAY
 8000c96:	231f      	movs	r3, #31
 8000c98:	0032      	movs	r2, r6
 8000c9a:	9400      	str	r4, [sp, #0]
			 display_gb1616(64,2,"模式",BLUE,DCYAN);//LGRAY
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	2040      	movs	r0, #64	; 0x40
 8000ca0:	f000 ff0c 	bl	8001abc <display_gb1616>
			 disp_image_8040(40,20,gImage_music,MAGENTA,DCYAN);//LIGHTGREEN
 8000ca4:	4bc9      	ldr	r3, [pc, #804]	; (8000fcc <task_control_main_function+0xa98>)
 8000ca6:	4aca      	ldr	r2, [pc, #808]	; (8000fd0 <task_control_main_function+0xa9c>)
 8000ca8:	9400      	str	r4, [sp, #0]
 8000caa:	2114      	movs	r1, #20
 8000cac:	2028      	movs	r0, #40	; 0x28
 8000cae:	f001 f833 	bl	8001d18 <disp_image_8040>
			 display_gb1212(56,67,"方糖解码",GREEN,DCYAN);//RED
 8000cb2:	23fc      	movs	r3, #252	; 0xfc
 8000cb4:	4ac7      	ldr	r2, [pc, #796]	; (8000fd4 <task_control_main_function+0xaa0>)
 8000cb6:	9400      	str	r4, [sp, #0]
 8000cb8:	00db      	lsls	r3, r3, #3
			 display_gb1212(56,67,"音频输入",GREEN,DCYAN);//RED
 8000cba:	2143      	movs	r1, #67	; 0x43
 8000cbc:	2038      	movs	r0, #56	; 0x38
 8000cbe:	e670      	b.n	80009a2 <task_control_main_function+0x46e>
    if(em_bl_state_old != em_bl_state){
 8000cc0:	4bc5      	ldr	r3, [pc, #788]	; (8000fd8 <task_control_main_function+0xaa4>)
 8000cc2:	4cc6      	ldr	r4, [pc, #792]	; (8000fdc <task_control_main_function+0xaa8>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	7822      	ldrb	r2, [r4, #0]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d00b      	beq.n	8000ce4 <task_control_main_function+0x7b0>
    	if(em_bl_state == BL_STATUS_RESET){ //出厂设置
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d13e      	bne.n	8000d4e <task_control_main_function+0x81a>
    		display_gb1212(45,35,"数据清除中",YELLOW,BLACK);
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	4ac3      	ldr	r2, [pc, #780]	; (8000fe0 <task_control_main_function+0xaac>)
 8000cd4:	4bb9      	ldr	r3, [pc, #740]	; (8000fbc <task_control_main_function+0xa88>)
    		display_gb1212(45,35,"詹连接成功",BLUE,BLACK);//
 8000cd6:	2123      	movs	r1, #35	; 0x23
 8000cd8:	202d      	movs	r0, #45	; 0x2d
 8000cda:	f000 fe3f 	bl	800195c <display_gb1212>
    	em_bl_state_old = em_bl_state;//记录蓝牙状态
 8000cde:	4bbe      	ldr	r3, [pc, #760]	; (8000fd8 <task_control_main_function+0xaa4>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	7023      	strb	r3, [r4, #0]
	if(uckey_value == KEY_FM_SHORT_PRESS){  //FM键 短按 +
 8000ce4:	4bbf      	ldr	r3, [pc, #764]	; (8000fe4 <task_control_main_function+0xab0>)
 8000ce6:	4dc0      	ldr	r5, [pc, #768]	; (8000fe8 <task_control_main_function+0xab4>)
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	2a01      	cmp	r2, #1
 8000cec:	d13e      	bne.n	8000d6c <task_control_main_function+0x838>
	    uckey_value = KEY_NONE;
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
	    menu_exit_count = 0;   //菜单退出计数
 8000cf2:	802a      	strh	r2, [r5, #0]
	    bl_binding();
 8000cf4:	f7ff fb6e 	bl	80003d4 <bl_binding>
	menu_exit_count++;   //菜单退出计数
 8000cf8:	882b      	ldrh	r3, [r5, #0]
	if(menu_exit_count > (30*1000/10)){//30S无操作自动退出
 8000cfa:	4abc      	ldr	r2, [pc, #752]	; (8000fec <task_control_main_function+0xab8>)
	menu_exit_count++;   //菜单退出计数
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	802b      	strh	r3, [r5, #0]
	if(menu_exit_count > (30*1000/10)){//30S无操作自动退出
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d800      	bhi.n	8000d08 <task_control_main_function+0x7d4>
 8000d06:	e437      	b.n	8000578 <task_control_main_function+0x44>
		em_work_mode = WORK_MODE_NORMAL; //正常模式
 8000d08:	2303      	movs	r3, #3
 8000d0a:	4ab9      	ldr	r2, [pc, #740]	; (8000ff0 <task_control_main_function+0xabc>)
	    disp_rectangle(39,0,1,80,LGRAY);//
 8000d0c:	4cb9      	ldr	r4, [pc, #740]	; (8000ff4 <task_control_main_function+0xac0>)
		em_work_mode = WORK_MODE_NORMAL; //正常模式
 8000d0e:	7013      	strb	r3, [r2, #0]
	    disp_rectangle(39,0,1,80,LGRAY);//
 8000d10:	2100      	movs	r1, #0
 8000d12:	9400      	str	r4, [sp, #0]
 8000d14:	334d      	adds	r3, #77	; 0x4d
 8000d16:	2201      	movs	r2, #1
 8000d18:	2027      	movs	r0, #39	; 0x27
 8000d1a:	f001 f8a1 	bl	8001e60 <disp_rectangle>
	    disp_rectangle(120,0,1,80,LGRAY);
 8000d1e:	9400      	str	r4, [sp, #0]
 8000d20:	2350      	movs	r3, #80	; 0x50
 8000d22:	2201      	movs	r2, #1
 8000d24:	2100      	movs	r1, #0
 8000d26:	2078      	movs	r0, #120	; 0x78
 8000d28:	f001 f89a 	bl	8001e60 <disp_rectangle>
		disp_rectangle(40,0,80,80,DCYAN);
 8000d2c:	2350      	movs	r3, #80	; 0x50
 8000d2e:	4ca0      	ldr	r4, [pc, #640]	; (8000fb0 <task_control_main_function+0xa7c>)
 8000d30:	001a      	movs	r2, r3
 8000d32:	9400      	str	r4, [sp, #0]
 8000d34:	2100      	movs	r1, #0
 8000d36:	2028      	movs	r0, #40	; 0x28
 8000d38:	f001 f892 	bl	8001e60 <disp_rectangle>
		if(em_FM_switch == SWITCH_OPEN){//FM广播开关
 8000d3c:	4bae      	ldr	r3, [pc, #696]	; (8000ff8 <task_control_main_function+0xac4>)
 8000d3e:	4aaf      	ldr	r2, [pc, #700]	; (8000ffc <task_control_main_function+0xac8>)
 8000d40:	781e      	ldrb	r6, [r3, #0]
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d100      	bne.n	8000d48 <task_control_main_function+0x814>
 8000d46:	e45c      	b.n	8000602 <task_control_main_function+0xce>
			 	disp_image_3232(128,45,gImage_FM,GRAY,BLACK);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	e4ef      	b.n	800072e <task_control_main_function+0x1fa>
 8000d4e:	2200      	movs	r2, #0
    		display_gb1212(45,35,"詹重启中詹",YELLOW,BLACK);
 8000d50:	9200      	str	r2, [sp, #0]
    	}else if(em_bl_state == BL_STATUS_RESTART){ //重启中
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d102      	bne.n	8000d5c <task_control_main_function+0x828>
    		display_gb1212(45,35,"詹重启中詹",YELLOW,BLACK);
 8000d56:	4b99      	ldr	r3, [pc, #612]	; (8000fbc <task_control_main_function+0xa88>)
 8000d58:	4aa9      	ldr	r2, [pc, #676]	; (8001000 <task_control_main_function+0xacc>)
 8000d5a:	e7bc      	b.n	8000cd6 <task_control_main_function+0x7a2>
    	}else if(em_bl_state == BL_STATUS_LINKING){ //连接中
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d102      	bne.n	8000d66 <task_control_main_function+0x832>
    		display_gb1212(45,35,"詹连接中詹",YELLOW,BLACK);//
 8000d60:	4b96      	ldr	r3, [pc, #600]	; (8000fbc <task_control_main_function+0xa88>)
 8000d62:	4aa8      	ldr	r2, [pc, #672]	; (8001004 <task_control_main_function+0xad0>)
 8000d64:	e7b7      	b.n	8000cd6 <task_control_main_function+0x7a2>
    		display_gb1212(45,35,"詹连接成功",BLUE,BLACK);//
 8000d66:	231f      	movs	r3, #31
 8000d68:	4aa7      	ldr	r2, [pc, #668]	; (8001008 <task_control_main_function+0xad4>)
 8000d6a:	e7b4      	b.n	8000cd6 <task_control_main_function+0x7a2>
    }else if(uckey_value == KEY_BL_SHORT_PRESS){  //蓝牙键 短按 -
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	2a03      	cmp	r2, #3
 8000d70:	d105      	bne.n	8000d7e <task_control_main_function+0x84a>
	    uckey_value = KEY_NONE;
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
	    menu_exit_count = 0;   //菜单退出计数
 8000d76:	802a      	strh	r2, [r5, #0]
	    bl_bind_init();
 8000d78:	f7ff fb1c 	bl	80003b4 <bl_bind_init>
 8000d7c:	e7bc      	b.n	8000cf8 <task_control_main_function+0x7c4>
    }else if(uckey_value == KEY_MAIN_SHORT_PRESS){  //主键 短按
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	2a05      	cmp	r2, #5
 8000d82:	d000      	beq.n	8000d86 <task_control_main_function+0x852>
 8000d84:	e21e      	b.n	80011c4 <task_control_main_function+0xc90>
	    uckey_value = KEY_NONE;
 8000d86:	2400      	movs	r4, #0
 8000d88:	701c      	strb	r4, [r3, #0]
	    em_work_mode = WORK_MODE_NORMAL; //正常模式
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	4a98      	ldr	r2, [pc, #608]	; (8000ff0 <task_control_main_function+0xabc>)
	 	disp_rectangle(39,0,1,80,LGRAY);//
 8000d8e:	4e99      	ldr	r6, [pc, #612]	; (8000ff4 <task_control_main_function+0xac0>)
	    em_work_mode = WORK_MODE_NORMAL; //正常模式
 8000d90:	7013      	strb	r3, [r2, #0]
	    menu_exit_count = 0;   //菜单退出计数
 8000d92:	802c      	strh	r4, [r5, #0]
	 	disp_rectangle(39,0,1,80,LGRAY);//
 8000d94:	334d      	adds	r3, #77	; 0x4d
 8000d96:	9600      	str	r6, [sp, #0]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	0021      	movs	r1, r4
 8000d9c:	2027      	movs	r0, #39	; 0x27
 8000d9e:	f001 f85f 	bl	8001e60 <disp_rectangle>
	 	disp_rectangle(120,0,1,80,LGRAY);
 8000da2:	9600      	str	r6, [sp, #0]
 8000da4:	2350      	movs	r3, #80	; 0x50
 8000da6:	2201      	movs	r2, #1
 8000da8:	0021      	movs	r1, r4
 8000daa:	2078      	movs	r0, #120	; 0x78
 8000dac:	f001 f858 	bl	8001e60 <disp_rectangle>
	 	disp_rectangle(40,0,80,80,DCYAN);
 8000db0:	2350      	movs	r3, #80	; 0x50
 8000db2:	4e7f      	ldr	r6, [pc, #508]	; (8000fb0 <task_control_main_function+0xa7c>)
 8000db4:	001a      	movs	r2, r3
 8000db6:	9600      	str	r6, [sp, #0]
 8000db8:	0021      	movs	r1, r4
 8000dba:	2028      	movs	r0, #40	; 0x28
 8000dbc:	f001 f850 	bl	8001e60 <disp_rectangle>
	 	if(em_FM_switch == SWITCH_OPEN){//FM广播开关
 8000dc0:	4b8d      	ldr	r3, [pc, #564]	; (8000ff8 <task_control_main_function+0xac4>)
 8000dc2:	4a8e      	ldr	r2, [pc, #568]	; (8000ffc <task_control_main_function+0xac8>)
 8000dc4:	781f      	ldrb	r7, [r3, #0]
 8000dc6:	42a7      	cmp	r7, r4
 8000dc8:	d178      	bne.n	8000ebc <task_control_main_function+0x988>
	 	     disp_image_3232(128,45,gImage_FM,GRAYBLUE,BLACK);
 8000dca:	4b7f      	ldr	r3, [pc, #508]	; (8000fc8 <task_control_main_function+0xa94>)
 8000dcc:	9700      	str	r7, [sp, #0]
 8000dce:	212d      	movs	r1, #45	; 0x2d
 8000dd0:	2080      	movs	r0, #128	; 0x80
 8000dd2:	f000 ff51 	bl	8001c78 <disp_image_3232>
	 	     if(uc_fm_channel>99){//三位数
 8000dd6:	4b8d      	ldr	r3, [pc, #564]	; (800100c <task_control_main_function+0xad8>)
 8000dd8:	ac05      	add	r4, sp, #20
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	9303      	str	r3, [sp, #12]
 8000dde:	2b63      	cmp	r3, #99	; 0x63
 8000de0:	d959      	bls.n	8000e96 <task_control_main_function+0x962>
	 	   	    disp_buff[0] = (uc_fm_channel/100)+0x30;
 8000de2:	0018      	movs	r0, r3
 8000de4:	2164      	movs	r1, #100	; 0x64
 8000de6:	f7ff f9ab 	bl	8000140 <__udivsi3>
 8000dea:	3030      	adds	r0, #48	; 0x30
 8000dec:	7020      	strb	r0, [r4, #0]
	 	   	    disp_buff[1] = (uc_fm_channel/10%10)+0x30;
 8000dee:	210a      	movs	r1, #10
 8000df0:	9803      	ldr	r0, [sp, #12]
 8000df2:	f7ff f9a5 	bl	8000140 <__udivsi3>
 8000df6:	210a      	movs	r1, #10
 8000df8:	b2c0      	uxtb	r0, r0
 8000dfa:	f7ff fa27 	bl	800024c <__aeabi_uidivmod>
 8000dfe:	3130      	adds	r1, #48	; 0x30
 8000e00:	7061      	strb	r1, [r4, #1]
	 	   	    disp_buff[2] = (uc_fm_channel%10)+0x30;
 8000e02:	9803      	ldr	r0, [sp, #12]
 8000e04:	210a      	movs	r1, #10
 8000e06:	f7ff fa21 	bl	800024c <__aeabi_uidivmod>
 8000e0a:	3130      	adds	r1, #48	; 0x30
 8000e0c:	70a1      	strb	r1, [r4, #2]
	 	   	    display_gb1212(134,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 8000e0e:	231f      	movs	r3, #31
 8000e10:	0022      	movs	r2, r4
 8000e12:	213a      	movs	r1, #58	; 0x3a
 8000e14:	2086      	movs	r0, #134	; 0x86
	 	   	    disp_buff[3] = 0;
 8000e16:	70e7      	strb	r7, [r4, #3]
	 	   	    display_gb1212(134,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 8000e18:	9700      	str	r7, [sp, #0]
	 	   	    display_gb1212(141,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 8000e1a:	f000 fd9f 	bl	800195c <display_gb1212>
	 	if(em_BL_switch == SWITCH_OPEN){//蓝牙开关
 8000e1e:	4b7c      	ldr	r3, [pc, #496]	; (8001010 <task_control_main_function+0xadc>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d151      	bne.n	8000eca <task_control_main_function+0x996>
	 		if(em_bl_state == BL_STATUS_LINK_OK){ //连接成功
 8000e26:	4a6c      	ldr	r2, [pc, #432]	; (8000fd8 <task_control_main_function+0xaa4>)
 8000e28:	7812      	ldrb	r2, [r2, #0]
	 			disp_image_3232(2,45,gImage_BL_ON,GRAYBLUE,BLACK);
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	4b66      	ldr	r3, [pc, #408]	; (8000fc8 <task_control_main_function+0xa94>)
	 		if(em_bl_state == BL_STATUS_LINK_OK){ //连接成功
 8000e2e:	2a03      	cmp	r2, #3
 8000e30:	d14e      	bne.n	8000ed0 <task_control_main_function+0x99c>
	 			disp_image_3232(2,45,gImage_BL_ON,GRAYBLUE,BLACK);
 8000e32:	4a78      	ldr	r2, [pc, #480]	; (8001014 <task_control_main_function+0xae0>)
	 	    disp_image_3232(2,45,gImage_BL_OFF,GRAY,BLACK);
 8000e34:	212d      	movs	r1, #45	; 0x2d
 8000e36:	2002      	movs	r0, #2
 8000e38:	f000 ff1e 	bl	8001c78 <disp_image_3232>
	 	if(em_play_switch == SWITCH_OPEN){  //方糖播放开关
 8000e3c:	4b76      	ldr	r3, [pc, #472]	; (8001018 <task_control_main_function+0xae4>)
 8000e3e:	4a77      	ldr	r2, [pc, #476]	; (800101c <task_control_main_function+0xae8>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d146      	bne.n	8000ed4 <task_control_main_function+0x9a0>
	 	    disp_image_3232(2,5,gImage_audio,GRAYBLUE,BLACK);
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	4b5f      	ldr	r3, [pc, #380]	; (8000fc8 <task_control_main_function+0xa94>)
	 	   	disp_image_3232(2,5,gImage_audio,GRAY,BLACK);
 8000e4a:	2105      	movs	r1, #5
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f000 ff13 	bl	8001c78 <disp_image_3232>
	 	if(em_audio_mode == AUDIO_DECODING){  //音频处理模式 音频解码
 8000e52:	4b73      	ldr	r3, [pc, #460]	; (8001020 <task_control_main_function+0xaec>)
 8000e54:	4a55      	ldr	r2, [pc, #340]	; (8000fac <task_control_main_function+0xa78>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d13f      	bne.n	8000edc <task_control_main_function+0x9a8>
	 	   	disp_image_3232(128,5,gImage_headset,GRAYBLUE,BLACK);
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2105      	movs	r1, #5
 8000e60:	4b59      	ldr	r3, [pc, #356]	; (8000fc8 <task_control_main_function+0xa94>)
 8000e62:	2080      	movs	r0, #128	; 0x80
 8000e64:	f000 ff08 	bl	8001c78 <disp_image_3232>
	 	   	display_gb1616(64,2,"模式",BLUE,DCYAN);//LGRAY
 8000e68:	231f      	movs	r3, #31
 8000e6a:	4a52      	ldr	r2, [pc, #328]	; (8000fb4 <task_control_main_function+0xa80>)
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	2040      	movs	r0, #64	; 0x40
 8000e70:	9600      	str	r6, [sp, #0]
 8000e72:	f000 fe23 	bl	8001abc <display_gb1616>
	 	   	disp_image_8040(40,20,gImage_music,MAGENTA,DCYAN);//LIGHTGREEN
 8000e76:	9600      	str	r6, [sp, #0]
 8000e78:	4b54      	ldr	r3, [pc, #336]	; (8000fcc <task_control_main_function+0xa98>)
 8000e7a:	4a55      	ldr	r2, [pc, #340]	; (8000fd0 <task_control_main_function+0xa9c>)
 8000e7c:	2114      	movs	r1, #20
 8000e7e:	2028      	movs	r0, #40	; 0x28
 8000e80:	f000 ff4a 	bl	8001d18 <disp_image_8040>
	 	   	display_gb1212(56,67,"方糖解码",GREEN,DCYAN);//RED
 8000e84:	9600      	str	r6, [sp, #0]
	   		 display_gb1212(56,67,"方糖解码",GREEN,DCYAN);//RED
 8000e86:	23fc      	movs	r3, #252	; 0xfc
 8000e88:	4a52      	ldr	r2, [pc, #328]	; (8000fd4 <task_control_main_function+0xaa0>)
 8000e8a:	00db      	lsls	r3, r3, #3
	   		 display_gb1212(56,67,"音频输入",GREEN,DCYAN);//RED
 8000e8c:	2143      	movs	r1, #67	; 0x43
 8000e8e:	2038      	movs	r0, #56	; 0x38
 8000e90:	f000 fd64 	bl	800195c <display_gb1212>
 8000e94:	e730      	b.n	8000cf8 <task_control_main_function+0x7c4>
	 	   	    disp_buff[0] = (uc_fm_channel/10%10)+0x30;
 8000e96:	210a      	movs	r1, #10
 8000e98:	9803      	ldr	r0, [sp, #12]
 8000e9a:	f7ff f951 	bl	8000140 <__udivsi3>
 8000e9e:	3030      	adds	r0, #48	; 0x30
 8000ea0:	7020      	strb	r0, [r4, #0]
	 	   	    disp_buff[1] = (uc_fm_channel%10)+0x30;
 8000ea2:	210a      	movs	r1, #10
 8000ea4:	9803      	ldr	r0, [sp, #12]
 8000ea6:	f7ff f9d1 	bl	800024c <__aeabi_uidivmod>
 8000eaa:	3130      	adds	r1, #48	; 0x30
 8000eac:	7061      	strb	r1, [r4, #1]
	 	   	    disp_buff[2] = 0;
 8000eae:	70a7      	strb	r7, [r4, #2]
	 	   	    display_gb1212(141,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 8000eb0:	231f      	movs	r3, #31
 8000eb2:	9700      	str	r7, [sp, #0]
 8000eb4:	0022      	movs	r2, r4
 8000eb6:	213a      	movs	r1, #58	; 0x3a
 8000eb8:	208d      	movs	r0, #141	; 0x8d
 8000eba:	e7ae      	b.n	8000e1a <task_control_main_function+0x8e6>
	 	   	 disp_image_3232(128,45,gImage_FM,GRAY,BLACK);
 8000ebc:	9400      	str	r4, [sp, #0]
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <task_control_main_function+0xa84>)
 8000ec0:	212d      	movs	r1, #45	; 0x2d
 8000ec2:	2080      	movs	r0, #128	; 0x80
 8000ec4:	f000 fed8 	bl	8001c78 <disp_image_3232>
 8000ec8:	e7a9      	b.n	8000e1e <task_control_main_function+0x8ea>
	 	    disp_image_3232(2,45,gImage_BL_OFF,GRAY,BLACK);
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <task_control_main_function+0xa84>)
 8000ed0:	4a54      	ldr	r2, [pc, #336]	; (8001024 <task_control_main_function+0xaf0>)
 8000ed2:	e7af      	b.n	8000e34 <task_control_main_function+0x900>
	 	   	disp_image_3232(2,5,gImage_audio,GRAY,BLACK);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <task_control_main_function+0xa84>)
 8000eda:	e7b6      	b.n	8000e4a <task_control_main_function+0x916>
	 	   	disp_image_3232(128,5,gImage_headset,GRAY,BLACK);
 8000edc:	2300      	movs	r3, #0
 8000ede:	2105      	movs	r1, #5
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2080      	movs	r0, #128	; 0x80
 8000ee4:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <task_control_main_function+0xa84>)
 8000ee6:	f000 fec7 	bl	8001c78 <disp_image_3232>
	 	   	display_gb1616(64,2,"模式",BLUE,DCYAN);//LGRAY
 8000eea:	231f      	movs	r3, #31
 8000eec:	4a31      	ldr	r2, [pc, #196]	; (8000fb4 <task_control_main_function+0xa80>)
 8000eee:	2102      	movs	r1, #2
 8000ef0:	2040      	movs	r0, #64	; 0x40
 8000ef2:	9600      	str	r6, [sp, #0]
 8000ef4:	f000 fde2 	bl	8001abc <display_gb1616>
	 	   	disp_image_8040(40,20,gImage_35mm,YELLOW,DCYAN);//LIGHTGREEN
 8000ef8:	9600      	str	r6, [sp, #0]
 8000efa:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <task_control_main_function+0xa88>)
 8000efc:	4a30      	ldr	r2, [pc, #192]	; (8000fc0 <task_control_main_function+0xa8c>)
 8000efe:	2114      	movs	r1, #20
 8000f00:	2028      	movs	r0, #40	; 0x28
 8000f02:	f000 ff09 	bl	8001d18 <disp_image_8040>
	 	   	display_gb1212(56,67,"音频输入",GREEN,DCYAN);//RED
 8000f06:	9600      	str	r6, [sp, #0]
	   		 display_gb1212(56,67,"音频输入",GREEN,DCYAN);//RED
 8000f08:	23fc      	movs	r3, #252	; 0xfc
 8000f0a:	4a2e      	ldr	r2, [pc, #184]	; (8000fc4 <task_control_main_function+0xa90>)
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	e7bd      	b.n	8000e8c <task_control_main_function+0x958>
	if(uckey_value == KEY_FM_SHORT_PRESS){  //FM键 短按 +
 8000f10:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <task_control_main_function+0xab0>)
 8000f12:	4d35      	ldr	r5, [pc, #212]	; (8000fe8 <task_control_main_function+0xab4>)
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	2a01      	cmp	r2, #1
 8000f18:	d139      	bne.n	8000f8e <task_control_main_function+0xa5a>
	   uckey_value = KEY_NONE;
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
	   menu_exit_count = 0;   //菜单退出计数
 8000f1e:	802a      	strh	r2, [r5, #0]
	   uc_fm_channel_old++;
 8000f20:	4a41      	ldr	r2, [pc, #260]	; (8001028 <task_control_main_function+0xaf4>)
 8000f22:	7813      	ldrb	r3, [r2, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	b2db      	uxtb	r3, r3
	   if(uc_fm_channel_old > 108){
 8000f28:	2b6c      	cmp	r3, #108	; 0x6c
 8000f2a:	d815      	bhi.n	8000f58 <task_control_main_function+0xa24>
	   	   uc_fm_channel_old = 108;
 8000f2c:	7013      	strb	r3, [r2, #0]
	   if(uc_fm_channel_old>99){//三位数
 8000f2e:	7816      	ldrb	r6, [r2, #0]
 8000f30:	ac05      	add	r4, sp, #20
 8000f32:	2e63      	cmp	r6, #99	; 0x63
 8000f34:	d912      	bls.n	8000f5c <task_control_main_function+0xa28>
	  	   disp_buff[0] = (uc_fm_channel_old/100)+0x30;
 8000f36:	2164      	movs	r1, #100	; 0x64
 8000f38:	0030      	movs	r0, r6
 8000f3a:	f7ff f901 	bl	8000140 <__udivsi3>
 8000f3e:	3030      	adds	r0, #48	; 0x30
 8000f40:	7020      	strb	r0, [r4, #0]
	  	   disp_buff[1] = (uc_fm_channel_old/10%10)+0x30;
 8000f42:	210a      	movs	r1, #10
 8000f44:	0030      	movs	r0, r6
 8000f46:	f7ff f8fb 	bl	8000140 <__udivsi3>
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	b2c0      	uxtb	r0, r0
 8000f4e:	f7ff f97d 	bl	800024c <__aeabi_uidivmod>
 8000f52:	3130      	adds	r1, #48	; 0x30
 8000f54:	7061      	strb	r1, [r4, #1]
 8000f56:	e009      	b.n	8000f6c <task_control_main_function+0xa38>
		   uc_fm_channel_old = 76;
 8000f58:	234c      	movs	r3, #76	; 0x4c
 8000f5a:	e7e7      	b.n	8000f2c <task_control_main_function+0x9f8>
	  	   disp_buff[0] = ' ';
 8000f5c:	2320      	movs	r3, #32
	  	   disp_buff[1] = (uc_fm_channel_old/10%10)+0x30;
 8000f5e:	210a      	movs	r1, #10
	  	   disp_buff[0] = ' ';
 8000f60:	7023      	strb	r3, [r4, #0]
	  	   disp_buff[1] = (uc_fm_channel_old/10%10)+0x30;
 8000f62:	0030      	movs	r0, r6
 8000f64:	f7ff f8ec 	bl	8000140 <__udivsi3>
 8000f68:	3030      	adds	r0, #48	; 0x30
 8000f6a:	7060      	strb	r0, [r4, #1]
	  	   disp_buff[2] = (uc_fm_channel_old%10)+0x30;
 8000f6c:	0030      	movs	r0, r6
 8000f6e:	210a      	movs	r1, #10
 8000f70:	f7ff f96c 	bl	800024c <__aeabi_uidivmod>
	  	   disp_buff[3] = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	70e3      	strb	r3, [r4, #3]
	  display_gb1616(42,30,(const char*)disp_buff,YELLOW,BLACK);//数字显示
 8000f78:	2300      	movs	r3, #0
	  	   disp_buff[2] = (uc_fm_channel_old%10)+0x30;
 8000f7a:	3130      	adds	r1, #48	; 0x30
 8000f7c:	70a1      	strb	r1, [r4, #2]
	  display_gb1616(42,30,(const char*)disp_buff,YELLOW,BLACK);//数字显示
 8000f7e:	aa05      	add	r2, sp, #20
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	211e      	movs	r1, #30
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <task_control_main_function+0xa88>)
 8000f86:	202a      	movs	r0, #42	; 0x2a
 8000f88:	f000 fd98 	bl	8001abc <display_gb1616>
 8000f8c:	e6b4      	b.n	8000cf8 <task_control_main_function+0x7c4>
	}else if(uckey_value == KEY_BL_SHORT_PRESS){  //蓝牙键 短按 -
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	2a03      	cmp	r2, #3
 8000f92:	d14b      	bne.n	800102c <task_control_main_function+0xaf8>
	   uckey_value = KEY_NONE;
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
	   menu_exit_count = 0;   //菜单退出计数
 8000f98:	802a      	strh	r2, [r5, #0]
	   uc_fm_channel_old--;
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <task_control_main_function+0xaf4>)
 8000f9c:	7813      	ldrb	r3, [r2, #0]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
	   if(uc_fm_channel_old < 76){
 8000fa2:	2b4b      	cmp	r3, #75	; 0x4b
 8000fa4:	d8c2      	bhi.n	8000f2c <task_control_main_function+0x9f8>
	   	   uc_fm_channel_old = 108;
 8000fa6:	236c      	movs	r3, #108	; 0x6c
 8000fa8:	e7c0      	b.n	8000f2c <task_control_main_function+0x9f8>
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	08004bb8 	.word	0x08004bb8
 8000fb0:	000003ef 	.word	0x000003ef
 8000fb4:	080051b3 	.word	0x080051b3
 8000fb8:	00008430 	.word	0x00008430
 8000fbc:	0000ffe0 	.word	0x0000ffe0
 8000fc0:	08004828 	.word	0x08004828
 8000fc4:	080051c1 	.word	0x080051c1
 8000fc8:	00005458 	.word	0x00005458
 8000fcc:	0000f81f 	.word	0x0000f81f
 8000fd0:	08004ff8 	.word	0x08004ff8
 8000fd4:	080051b8 	.word	0x080051b8
 8000fd8:	2000011f 	.word	0x2000011f
 8000fdc:	20000106 	.word	0x20000106
 8000fe0:	0800520b 	.word	0x0800520b
 8000fe4:	20000124 	.word	0x20000124
 8000fe8:	2000010c 	.word	0x2000010c
 8000fec:	00000bb8 	.word	0x00000bb8
 8000ff0:	20000122 	.word	0x20000122
 8000ff4:	0000c618 	.word	0x0000c618
 8000ff8:	20000123 	.word	0x20000123
 8000ffc:	08004ab8 	.word	0x08004ab8
 8001000:	08005216 	.word	0x08005216
 8001004:	08005221 	.word	0x08005221
 8001008:	0800522c 	.word	0x0800522c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000121 	.word	0x20000121
 8001014:	08004a38 	.word	0x08004a38
 8001018:	20000107 	.word	0x20000107
 800101c:	08004b38 	.word	0x08004b38
 8001020:	20000120 	.word	0x20000120
 8001024:	080049b8 	.word	0x080049b8
 8001028:	2000010e 	.word	0x2000010e
	}else if(uckey_value == KEY_MAIN_SHORT_PRESS){  //主键 短按
 800102c:	781a      	ldrb	r2, [r3, #0]
 800102e:	2a05      	cmp	r2, #5
 8001030:	d000      	beq.n	8001034 <task_control_main_function+0xb00>
 8001032:	e0c7      	b.n	80011c4 <task_control_main_function+0xc90>
	   uckey_value = KEY_NONE;
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
	   em_work_mode = WORK_MODE_NORMAL; //正常模式
 8001038:	2303      	movs	r3, #3
	   menu_exit_count = 0;   //菜单退出计数
 800103a:	802a      	strh	r2, [r5, #0]
	   em_work_mode = WORK_MODE_NORMAL; //正常模式
 800103c:	4a7e      	ldr	r2, [pc, #504]	; (8001238 <task_control_main_function+0xd04>)
	   if(uc_fm_channel != uc_fm_channel_old){
 800103e:	4c7f      	ldr	r4, [pc, #508]	; (800123c <task_control_main_function+0xd08>)
	   em_work_mode = WORK_MODE_NORMAL; //正常模式
 8001040:	7013      	strb	r3, [r2, #0]
	   if(uc_fm_channel != uc_fm_channel_old){
 8001042:	4b7f      	ldr	r3, [pc, #508]	; (8001240 <task_control_main_function+0xd0c>)
 8001044:	7822      	ldrb	r2, [r4, #0]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	d005      	beq.n	8001058 <task_control_main_function+0xb24>
	      falsh_write_flag = 0x5A; //flash数据写标志
 800104c:	225a      	movs	r2, #90	; 0x5a
	      uc_fm_channel = uc_fm_channel_old;
 800104e:	7023      	strb	r3, [r4, #0]
	      falsh_write_flag = 0x5A; //flash数据写标志
 8001050:	4b7c      	ldr	r3, [pc, #496]	; (8001244 <task_control_main_function+0xd10>)
 8001052:	701a      	strb	r2, [r3, #0]
	      qn8027_fm_channel_set_function();//频率设置
 8001054:	f000 fa7c 	bl	8001550 <qn8027_fm_channel_set_function>
	   disp_rectangle(39,0,1,80,LGRAY);//
 8001058:	4e7b      	ldr	r6, [pc, #492]	; (8001248 <task_control_main_function+0xd14>)
 800105a:	2350      	movs	r3, #80	; 0x50
 800105c:	9600      	str	r6, [sp, #0]
 800105e:	2201      	movs	r2, #1
 8001060:	2100      	movs	r1, #0
 8001062:	2027      	movs	r0, #39	; 0x27
 8001064:	f000 fefc 	bl	8001e60 <disp_rectangle>
	   disp_rectangle(120,0,1,80,LGRAY);
 8001068:	9600      	str	r6, [sp, #0]
 800106a:	2350      	movs	r3, #80	; 0x50
 800106c:	2201      	movs	r2, #1
 800106e:	2100      	movs	r1, #0
 8001070:	2078      	movs	r0, #120	; 0x78
 8001072:	f000 fef5 	bl	8001e60 <disp_rectangle>
	   disp_rectangle(40,0,80,80,DCYAN);
 8001076:	2350      	movs	r3, #80	; 0x50
 8001078:	4f74      	ldr	r7, [pc, #464]	; (800124c <task_control_main_function+0xd18>)
 800107a:	001a      	movs	r2, r3
 800107c:	9700      	str	r7, [sp, #0]
 800107e:	2100      	movs	r1, #0
 8001080:	2028      	movs	r0, #40	; 0x28
 8001082:	f000 feed 	bl	8001e60 <disp_rectangle>
	   if(em_FM_switch == SWITCH_OPEN){//FM广播开关
 8001086:	4b72      	ldr	r3, [pc, #456]	; (8001250 <task_control_main_function+0xd1c>)
 8001088:	4a72      	ldr	r2, [pc, #456]	; (8001254 <task_control_main_function+0xd20>)
 800108a:	781e      	ldrb	r6, [r3, #0]
 800108c:	2e00      	cmp	r6, #0
 800108e:	d171      	bne.n	8001174 <task_control_main_function+0xc40>
	   		disp_image_3232(128,45,gImage_FM,GRAYBLUE,BLACK);
 8001090:	4b71      	ldr	r3, [pc, #452]	; (8001258 <task_control_main_function+0xd24>)
 8001092:	9600      	str	r6, [sp, #0]
 8001094:	212d      	movs	r1, #45	; 0x2d
 8001096:	2080      	movs	r0, #128	; 0x80
 8001098:	f000 fdee 	bl	8001c78 <disp_image_3232>
	   		if(uc_fm_channel>99){//三位数
 800109c:	7823      	ldrb	r3, [r4, #0]
 800109e:	ac05      	add	r4, sp, #20
 80010a0:	9303      	str	r3, [sp, #12]
 80010a2:	2b63      	cmp	r3, #99	; 0x63
 80010a4:	d953      	bls.n	800114e <task_control_main_function+0xc1a>
	   			disp_buff[0] = (uc_fm_channel/100)+0x30;
 80010a6:	0018      	movs	r0, r3
 80010a8:	2164      	movs	r1, #100	; 0x64
 80010aa:	f7ff f849 	bl	8000140 <__udivsi3>
 80010ae:	3030      	adds	r0, #48	; 0x30
 80010b0:	7020      	strb	r0, [r4, #0]
	   			disp_buff[1] = (uc_fm_channel/10%10)+0x30;
 80010b2:	210a      	movs	r1, #10
 80010b4:	9803      	ldr	r0, [sp, #12]
 80010b6:	f7ff f843 	bl	8000140 <__udivsi3>
 80010ba:	210a      	movs	r1, #10
 80010bc:	b2c0      	uxtb	r0, r0
 80010be:	f7ff f8c5 	bl	800024c <__aeabi_uidivmod>
 80010c2:	3130      	adds	r1, #48	; 0x30
 80010c4:	7061      	strb	r1, [r4, #1]
	   			disp_buff[2] = (uc_fm_channel%10)+0x30;
 80010c6:	9803      	ldr	r0, [sp, #12]
 80010c8:	210a      	movs	r1, #10
 80010ca:	f7ff f8bf 	bl	800024c <__aeabi_uidivmod>
 80010ce:	3130      	adds	r1, #48	; 0x30
 80010d0:	70a1      	strb	r1, [r4, #2]
	   			display_gb1212(134,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 80010d2:	231f      	movs	r3, #31
 80010d4:	0022      	movs	r2, r4
 80010d6:	213a      	movs	r1, #58	; 0x3a
 80010d8:	2086      	movs	r0, #134	; 0x86
	   			disp_buff[3] = 0;
 80010da:	70e6      	strb	r6, [r4, #3]
	   			display_gb1212(134,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 80010dc:	9600      	str	r6, [sp, #0]
	   			display_gb1212(141,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 80010de:	f000 fc3d 	bl	800195c <display_gb1212>
	   if(em_BL_switch == SWITCH_OPEN){//蓝牙开关
 80010e2:	4b5e      	ldr	r3, [pc, #376]	; (800125c <task_control_main_function+0xd28>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d14c      	bne.n	8001184 <task_control_main_function+0xc50>
		   if(em_bl_state == BL_STATUS_LINK_OK){ //连接成功
 80010ea:	4a5d      	ldr	r2, [pc, #372]	; (8001260 <task_control_main_function+0xd2c>)
 80010ec:	7812      	ldrb	r2, [r2, #0]
		   	   disp_image_3232(2,45,gImage_BL_ON,GRAYBLUE,BLACK);
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	4b59      	ldr	r3, [pc, #356]	; (8001258 <task_control_main_function+0xd24>)
		   if(em_bl_state == BL_STATUS_LINK_OK){ //连接成功
 80010f2:	2a03      	cmp	r2, #3
 80010f4:	d149      	bne.n	800118a <task_control_main_function+0xc56>
		   	   disp_image_3232(2,45,gImage_BL_ON,GRAYBLUE,BLACK);
 80010f6:	4a5b      	ldr	r2, [pc, #364]	; (8001264 <task_control_main_function+0xd30>)
	   		 disp_image_3232(2,45,gImage_BL_OFF,GRAY,BLACK);
 80010f8:	212d      	movs	r1, #45	; 0x2d
 80010fa:	2002      	movs	r0, #2
 80010fc:	f000 fdbc 	bl	8001c78 <disp_image_3232>
	   if(em_play_switch == SWITCH_OPEN){  //方糖播放开关
 8001100:	4b59      	ldr	r3, [pc, #356]	; (8001268 <task_control_main_function+0xd34>)
 8001102:	4a5a      	ldr	r2, [pc, #360]	; (800126c <task_control_main_function+0xd38>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d141      	bne.n	800118e <task_control_main_function+0xc5a>
	   		 disp_image_3232(2,5,gImage_audio,GRAYBLUE,BLACK);
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	4b52      	ldr	r3, [pc, #328]	; (8001258 <task_control_main_function+0xd24>)
	   		 disp_image_3232(2,5,gImage_audio,GRAY,BLACK);
 800110e:	2105      	movs	r1, #5
 8001110:	2002      	movs	r0, #2
 8001112:	f000 fdb1 	bl	8001c78 <disp_image_3232>
	   if(em_audio_mode == AUDIO_DECODING){  //音频处理模式 音频解码
 8001116:	4b56      	ldr	r3, [pc, #344]	; (8001270 <task_control_main_function+0xd3c>)
 8001118:	4a56      	ldr	r2, [pc, #344]	; (8001274 <task_control_main_function+0xd40>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4c56      	ldr	r4, [pc, #344]	; (8001278 <task_control_main_function+0xd44>)
 800111e:	2b00      	cmp	r3, #0
 8001120:	d139      	bne.n	8001196 <task_control_main_function+0xc62>
	   		 disp_image_3232(128,5,gImage_headset,GRAYBLUE,BLACK);
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2105      	movs	r1, #5
 8001126:	4b4c      	ldr	r3, [pc, #304]	; (8001258 <task_control_main_function+0xd24>)
 8001128:	2080      	movs	r0, #128	; 0x80
 800112a:	f000 fda5 	bl	8001c78 <disp_image_3232>
	   		 display_gb1616(64,2,"模式",BLUE,DCYAN);//LGRAY
 800112e:	231f      	movs	r3, #31
 8001130:	0022      	movs	r2, r4
 8001132:	2102      	movs	r1, #2
 8001134:	2040      	movs	r0, #64	; 0x40
 8001136:	9700      	str	r7, [sp, #0]
 8001138:	f000 fcc0 	bl	8001abc <display_gb1616>
	   		 disp_image_8040(40,20,gImage_music,MAGENTA,DCYAN);//LIGHTGREEN
 800113c:	9700      	str	r7, [sp, #0]
 800113e:	4b4f      	ldr	r3, [pc, #316]	; (800127c <task_control_main_function+0xd48>)
 8001140:	4a4f      	ldr	r2, [pc, #316]	; (8001280 <task_control_main_function+0xd4c>)
 8001142:	2114      	movs	r1, #20
 8001144:	2028      	movs	r0, #40	; 0x28
 8001146:	f000 fde7 	bl	8001d18 <disp_image_8040>
	   		 display_gb1212(56,67,"方糖解码",GREEN,DCYAN);//RED
 800114a:	9700      	str	r7, [sp, #0]
 800114c:	e69b      	b.n	8000e86 <task_control_main_function+0x952>
	   			disp_buff[0] = (uc_fm_channel/10%10)+0x30;
 800114e:	210a      	movs	r1, #10
 8001150:	9803      	ldr	r0, [sp, #12]
 8001152:	f7fe fff5 	bl	8000140 <__udivsi3>
 8001156:	3030      	adds	r0, #48	; 0x30
 8001158:	7020      	strb	r0, [r4, #0]
	   			disp_buff[1] = (uc_fm_channel%10)+0x30;
 800115a:	210a      	movs	r1, #10
 800115c:	9803      	ldr	r0, [sp, #12]
 800115e:	f7ff f875 	bl	800024c <__aeabi_uidivmod>
 8001162:	3130      	adds	r1, #48	; 0x30
 8001164:	7061      	strb	r1, [r4, #1]
	   			disp_buff[2] = 0;
 8001166:	70a6      	strb	r6, [r4, #2]
	   			display_gb1212(141,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 8001168:	231f      	movs	r3, #31
 800116a:	9600      	str	r6, [sp, #0]
 800116c:	0022      	movs	r2, r4
 800116e:	213a      	movs	r1, #58	; 0x3a
 8001170:	208d      	movs	r0, #141	; 0x8d
 8001172:	e7b4      	b.n	80010de <task_control_main_function+0xbaa>
	   		 disp_image_3232(128,45,gImage_FM,GRAY,BLACK);
 8001174:	2300      	movs	r3, #0
 8001176:	212d      	movs	r1, #45	; 0x2d
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2080      	movs	r0, #128	; 0x80
 800117c:	4b41      	ldr	r3, [pc, #260]	; (8001284 <task_control_main_function+0xd50>)
 800117e:	f000 fd7b 	bl	8001c78 <disp_image_3232>
 8001182:	e7ae      	b.n	80010e2 <task_control_main_function+0xbae>
	   		 disp_image_3232(2,45,gImage_BL_OFF,GRAY,BLACK);
 8001184:	2300      	movs	r3, #0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	4b3e      	ldr	r3, [pc, #248]	; (8001284 <task_control_main_function+0xd50>)
 800118a:	4a3f      	ldr	r2, [pc, #252]	; (8001288 <task_control_main_function+0xd54>)
 800118c:	e7b4      	b.n	80010f8 <task_control_main_function+0xbc4>
	   		 disp_image_3232(2,5,gImage_audio,GRAY,BLACK);
 800118e:	2300      	movs	r3, #0
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <task_control_main_function+0xd50>)
 8001194:	e7bb      	b.n	800110e <task_control_main_function+0xbda>
	   		 disp_image_3232(128,5,gImage_headset,GRAY,BLACK);
 8001196:	2300      	movs	r3, #0
 8001198:	2105      	movs	r1, #5
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2080      	movs	r0, #128	; 0x80
 800119e:	4b39      	ldr	r3, [pc, #228]	; (8001284 <task_control_main_function+0xd50>)
 80011a0:	f000 fd6a 	bl	8001c78 <disp_image_3232>
	   		 display_gb1616(64,2,"模式",BLUE,DCYAN);//LGRAY
 80011a4:	231f      	movs	r3, #31
 80011a6:	0022      	movs	r2, r4
 80011a8:	2102      	movs	r1, #2
 80011aa:	2040      	movs	r0, #64	; 0x40
 80011ac:	9700      	str	r7, [sp, #0]
 80011ae:	f000 fc85 	bl	8001abc <display_gb1616>
	   		 disp_image_8040(40,20,gImage_35mm,YELLOW,DCYAN);//LIGHTGREEN
 80011b2:	9700      	str	r7, [sp, #0]
 80011b4:	4b35      	ldr	r3, [pc, #212]	; (800128c <task_control_main_function+0xd58>)
 80011b6:	4a36      	ldr	r2, [pc, #216]	; (8001290 <task_control_main_function+0xd5c>)
 80011b8:	2114      	movs	r1, #20
 80011ba:	2028      	movs	r0, #40	; 0x28
 80011bc:	f000 fdac 	bl	8001d18 <disp_image_8040>
	   		 display_gb1212(56,67,"音频输入",GREEN,DCYAN);//RED
 80011c0:	9700      	str	r7, [sp, #0]
 80011c2:	e6a1      	b.n	8000f08 <task_control_main_function+0x9d4>
	}else if(uckey_value == KEY_BL_LONG_PRESS){   //蓝牙键 长按
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	2a04      	cmp	r2, #4
 80011c8:	d103      	bne.n	80011d2 <task_control_main_function+0xc9e>
		  uckey_value = KEY_NONE;
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
		  menu_exit_count = 0;   //菜单退出计数
 80011ce:	802a      	strh	r2, [r5, #0]
 80011d0:	e592      	b.n	8000cf8 <task_control_main_function+0x7c4>
	}else if(uckey_value == KEY_FM_LONG_PRESS){   //FM键 长按
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	2a02      	cmp	r2, #2
 80011d6:	d0f8      	beq.n	80011ca <task_control_main_function+0xc96>
	}else if(uckey_value == KEY_MAIN_LONG_PRESS){ //主键 长按
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	2a06      	cmp	r2, #6
 80011dc:	d000      	beq.n	80011e0 <task_control_main_function+0xcac>
 80011de:	e58b      	b.n	8000cf8 <task_control_main_function+0x7c4>
 80011e0:	e7f3      	b.n	80011ca <task_control_main_function+0xc96>
			 	disp_buff[0] = (uc_fm_channel/10%10)+0x30;
 80011e2:	210a      	movs	r1, #10
 80011e4:	0038      	movs	r0, r7
 80011e6:	f7fe ffab 	bl	8000140 <__udivsi3>
 80011ea:	3030      	adds	r0, #48	; 0x30
 80011ec:	7028      	strb	r0, [r5, #0]
			 	disp_buff[1] = (uc_fm_channel%10)+0x30;
 80011ee:	210a      	movs	r1, #10
 80011f0:	0038      	movs	r0, r7
 80011f2:	f7ff f82b 	bl	800024c <__aeabi_uidivmod>
 80011f6:	3130      	adds	r1, #48	; 0x30
 80011f8:	7069      	strb	r1, [r5, #1]
			 	disp_buff[2] = 0;
 80011fa:	70ae      	strb	r6, [r5, #2]
			 	display_gb1212(141,58,(const char*)disp_buff,BLUE,BLACK);//数字显示
 80011fc:	231f      	movs	r3, #31
 80011fe:	9600      	str	r6, [sp, #0]
 8001200:	002a      	movs	r2, r5
 8001202:	213a      	movs	r1, #58	; 0x3a
 8001204:	208d      	movs	r0, #141	; 0x8d
 8001206:	f7ff fa25 	bl	8000654 <task_control_main_function+0x120>
			 disp_image_3232(2,45,gImage_BL_OFF,GRAY,BLACK);
 800120a:	2300      	movs	r3, #0
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <task_control_main_function+0xd50>)
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <task_control_main_function+0xd54>)
 8001212:	f7ff fa30 	bl	8000676 <task_control_main_function+0x142>
			 disp_image_3232(2,5,gImage_audio,GRAY,BLACK);
 8001216:	2300      	movs	r3, #0
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <task_control_main_function+0xd50>)
 800121c:	f7ff fa38 	bl	8000690 <task_control_main_function+0x15c>
			 disp_image_3232(128,5,gImage_headset,GRAY,BLACK);
 8001220:	2300      	movs	r3, #0
 8001222:	2105      	movs	r1, #5
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2080      	movs	r0, #128	; 0x80
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <task_control_main_function+0xd50>)
 800122a:	f000 fd25 	bl	8001c78 <disp_image_3232>
			 display_gb1616(64,2,"模式",BLUE,DCYAN);//LGRAY
 800122e:	9400      	str	r4, [sp, #0]
 8001230:	231f      	movs	r3, #31
 8001232:	002a      	movs	r2, r5
 8001234:	e518      	b.n	8000c68 <task_control_main_function+0x734>
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	20000122 	.word	0x20000122
 800123c:	20000004 	.word	0x20000004
 8001240:	2000010e 	.word	0x2000010e
 8001244:	2000010a 	.word	0x2000010a
 8001248:	0000c618 	.word	0x0000c618
 800124c:	000003ef 	.word	0x000003ef
 8001250:	20000123 	.word	0x20000123
 8001254:	08004ab8 	.word	0x08004ab8
 8001258:	00005458 	.word	0x00005458
 800125c:	20000121 	.word	0x20000121
 8001260:	2000011f 	.word	0x2000011f
 8001264:	08004a38 	.word	0x08004a38
 8001268:	20000107 	.word	0x20000107
 800126c:	08004b38 	.word	0x08004b38
 8001270:	20000120 	.word	0x20000120
 8001274:	08004bb8 	.word	0x08004bb8
 8001278:	080051b3 	.word	0x080051b3
 800127c:	0000f81f 	.word	0x0000f81f
 8001280:	08004ff8 	.word	0x08004ff8
 8001284:	00008430 	.word	0x00008430
 8001288:	080049b8 	.word	0x080049b8
 800128c:	0000ffe0 	.word	0x0000ffe0
 8001290:	08004828 	.word	0x08004828

08001294 <ISR_key_handle_function>:
 * 输入  ：  无
 * 输出  ：  无
 * 履历  ：  V0.00  2019-5-1
********************************************/
void ISR_key_handle_function(void)
{
 8001294:	b510      	push	{r4, lr}
   if(uckey_value != KEY_NONE){ //当存在键值不在检测新的键值
 8001296:	4c33      	ldr	r4, [pc, #204]	; (8001364 <ISR_key_handle_function+0xd0>)
 8001298:	7823      	ldrb	r3, [r4, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d143      	bne.n	8001326 <ISR_key_handle_function+0x92>
//	   key_bl_count = 0;
//	   key_main_count = 0;
	   return;
   }
   //----------蓝牙健判断----------------
   if(KEY_BL==GPIO_PIN_RESET){
 800129e:	2090      	movs	r0, #144	; 0x90
 80012a0:	2102      	movs	r1, #2
 80012a2:	05c0      	lsls	r0, r0, #23
 80012a4:	f001 fc68 	bl	8002b78 <HAL_GPIO_ReadPin>
 80012a8:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <ISR_key_handle_function+0xd4>)
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d13c      	bne.n	8001328 <ISR_key_handle_function+0x94>
	   if(key_bl_en_flag==1){
 80012ae:	7813      	ldrb	r3, [r2, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d038      	beq.n	8001326 <ISR_key_handle_function+0x92>
		   return;
	   }
	   key_bl_count++;
 80012b4:	492d      	ldr	r1, [pc, #180]	; (800136c <ISR_key_handle_function+0xd8>)
 80012b6:	780b      	ldrb	r3, [r1, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	700b      	strb	r3, [r1, #0]
	   if(key_bl_count>(2000/10)){//2S
 80012be:	2bc8      	cmp	r3, #200	; 0xc8
 80012c0:	d904      	bls.n	80012cc <ISR_key_handle_function+0x38>
	   	   uckey_value = KEY_BL_LONG_PRESS;   //BL键 长按
 80012c2:	2304      	movs	r3, #4
 80012c4:	7023      	strb	r3, [r4, #0]
	   	   key_bl_en_flag=1;
 80012c6:	3b03      	subs	r3, #3
 80012c8:	7013      	strb	r3, [r2, #0]
	   	   key_bl_count=0;
 80012ca:	7008      	strb	r0, [r1, #0]
	   }
	   key_bl_count=0;
	   key_bl_en_flag = 0;
   }
   //----------FM键判断----------------
   if(KEY_FM==GPIO_PIN_RESET){
 80012cc:	2102      	movs	r1, #2
 80012ce:	4828      	ldr	r0, [pc, #160]	; (8001370 <ISR_key_handle_function+0xdc>)
 80012d0:	f001 fc52 	bl	8002b78 <HAL_GPIO_ReadPin>
 80012d4:	4a27      	ldr	r2, [pc, #156]	; (8001374 <ISR_key_handle_function+0xe0>)
 80012d6:	2800      	cmp	r0, #0
 80012d8:	d130      	bne.n	800133c <ISR_key_handle_function+0xa8>
	   if(key_fm_en_flag==1){
 80012da:	7813      	ldrb	r3, [r2, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d022      	beq.n	8001326 <ISR_key_handle_function+0x92>
	   		return;
	   }
   	   key_fm_count++;
 80012e0:	4925      	ldr	r1, [pc, #148]	; (8001378 <ISR_key_handle_function+0xe4>)
 80012e2:	780b      	ldrb	r3, [r1, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	700b      	strb	r3, [r1, #0]
   	   if(key_fm_count>(2000/10)){//2S
 80012ea:	2bc8      	cmp	r3, #200	; 0xc8
 80012ec:	d904      	bls.n	80012f8 <ISR_key_handle_function+0x64>
   	   	   uckey_value = KEY_FM_LONG_PRESS;   //BL键 长按
 80012ee:	2302      	movs	r3, #2
 80012f0:	7023      	strb	r3, [r4, #0]
   	   	   key_fm_en_flag=1;
 80012f2:	3b01      	subs	r3, #1
 80012f4:	7013      	strb	r3, [r2, #0]
   	   	   key_fm_count=0;
 80012f6:	7008      	strb	r0, [r1, #0]
   	   }
   	   key_fm_count=0;
   	   key_fm_en_flag = 0;
   }
   //----------主键判断----------------
   if(KEY_MAIN==GPIO_PIN_RESET){
 80012f8:	2090      	movs	r0, #144	; 0x90
 80012fa:	2110      	movs	r1, #16
 80012fc:	05c0      	lsls	r0, r0, #23
 80012fe:	f001 fc3b 	bl	8002b78 <HAL_GPIO_ReadPin>
 8001302:	4a1e      	ldr	r2, [pc, #120]	; (800137c <ISR_key_handle_function+0xe8>)
 8001304:	2800      	cmp	r0, #0
 8001306:	d123      	bne.n	8001350 <ISR_key_handle_function+0xbc>
	   if(key_main_en_flag==1){
 8001308:	7813      	ldrb	r3, [r2, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d00b      	beq.n	8001326 <ISR_key_handle_function+0x92>
	  	  return;
	   }
   	   key_main_count++;
 800130e:	491c      	ldr	r1, [pc, #112]	; (8001380 <ISR_key_handle_function+0xec>)
 8001310:	780b      	ldrb	r3, [r1, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	700b      	strb	r3, [r1, #0]
   	   if(key_main_count>(2000/10)){//2S
 8001318:	2bc8      	cmp	r3, #200	; 0xc8
 800131a:	d904      	bls.n	8001326 <ISR_key_handle_function+0x92>
   	   	   uckey_value = KEY_MAIN_LONG_PRESS;   //主键 长按
 800131c:	2306      	movs	r3, #6
 800131e:	7023      	strb	r3, [r4, #0]
   	   	   key_main_en_flag=1;
 8001320:	3b05      	subs	r3, #5
 8001322:	7013      	strb	r3, [r2, #0]
   	   	   key_main_count=0;
 8001324:	7008      	strb	r0, [r1, #0]
   	   }
   	   key_main_count=0;
   	   key_main_en_flag = 0;
   }

}
 8001326:	bd10      	pop	{r4, pc}
	   if(key_bl_count>(50/10)){
 8001328:	4910      	ldr	r1, [pc, #64]	; (800136c <ISR_key_handle_function+0xd8>)
 800132a:	780b      	ldrb	r3, [r1, #0]
 800132c:	2b05      	cmp	r3, #5
 800132e:	d901      	bls.n	8001334 <ISR_key_handle_function+0xa0>
		   uckey_value = KEY_BL_SHORT_PRESS;  //BL键 短按
 8001330:	2303      	movs	r3, #3
 8001332:	7023      	strb	r3, [r4, #0]
	   key_bl_count=0;
 8001334:	2300      	movs	r3, #0
 8001336:	700b      	strb	r3, [r1, #0]
	   key_bl_en_flag = 0;
 8001338:	7013      	strb	r3, [r2, #0]
 800133a:	e7c7      	b.n	80012cc <ISR_key_handle_function+0x38>
   	   if(key_fm_count>(50/10)){
 800133c:	490e      	ldr	r1, [pc, #56]	; (8001378 <ISR_key_handle_function+0xe4>)
 800133e:	780b      	ldrb	r3, [r1, #0]
 8001340:	2b05      	cmp	r3, #5
 8001342:	d901      	bls.n	8001348 <ISR_key_handle_function+0xb4>
   		   uckey_value = KEY_FM_SHORT_PRESS;  //BL键 短按
 8001344:	2301      	movs	r3, #1
 8001346:	7023      	strb	r3, [r4, #0]
   	   key_fm_count=0;
 8001348:	2300      	movs	r3, #0
 800134a:	700b      	strb	r3, [r1, #0]
   	   key_fm_en_flag = 0;
 800134c:	7013      	strb	r3, [r2, #0]
 800134e:	e7d3      	b.n	80012f8 <ISR_key_handle_function+0x64>
   	   if(key_main_count>(50/10)){
 8001350:	490b      	ldr	r1, [pc, #44]	; (8001380 <ISR_key_handle_function+0xec>)
 8001352:	780b      	ldrb	r3, [r1, #0]
 8001354:	2b05      	cmp	r3, #5
 8001356:	d901      	bls.n	800135c <ISR_key_handle_function+0xc8>
   		   uckey_value = KEY_MAIN_SHORT_PRESS;  //主键 短按
 8001358:	2305      	movs	r3, #5
 800135a:	7023      	strb	r3, [r4, #0]
   	   key_main_count=0;
 800135c:	2300      	movs	r3, #0
 800135e:	700b      	strb	r3, [r1, #0]
   	   key_main_en_flag = 0;
 8001360:	7013      	strb	r3, [r2, #0]
 8001362:	e7e0      	b.n	8001326 <ISR_key_handle_function+0x92>
 8001364:	20000124 	.word	0x20000124
 8001368:	20000114 	.word	0x20000114
 800136c:	20000113 	.word	0x20000113
 8001370:	48001400 	.word	0x48001400
 8001374:	20000116 	.word	0x20000116
 8001378:	20000115 	.word	0x20000115
 800137c:	20000118 	.word	0x20000118
 8001380:	20000117 	.word	0x20000117

08001384 <delay_5us>:
#include "gpio.h"


static void delay_5us(unsigned int nCount)
{
    while (nCount != 0)
 8001384:	2800      	cmp	r0, #0
 8001386:	d100      	bne.n	800138a <delay_5us+0x6>
	 //------------

	 nCount--;
    }
    p_ttt= &uc_fm_channel;
}
 8001388:	4770      	bx	lr
     __ASM("NOP");
 800138a:	46c0      	nop			; (mov r8, r8)
     __ASM("NOP");
 800138c:	46c0      	nop			; (mov r8, r8)
	 __ASM("NOP");
 800138e:	46c0      	nop			; (mov r8, r8)
	 __ASM("NOP");
 8001390:	46c0      	nop			; (mov r8, r8)
	 __ASM("NOP");
 8001392:	46c0      	nop			; (mov r8, r8)
	 __ASM("NOP");
 8001394:	46c0      	nop			; (mov r8, r8)
	 __ASM("NOP");
 8001396:	46c0      	nop			; (mov r8, r8)
	 __ASM("NOP");
 8001398:	46c0      	nop			; (mov r8, r8)
	 __ASM("NOP");
 800139a:	46c0      	nop			; (mov r8, r8)
	 nCount--;
 800139c:	3801      	subs	r0, #1
 800139e:	e7f1      	b.n	8001384 <delay_5us>

080013a0 <I2CDataInOu.part.0>:

//***************************************************************
// I2C Data input/output
// 0-Output, 1-Input
//***************************************************************
static void I2CDataInOu(unsigned char InOu)
 80013a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	  GPIO_InitTypeDef GPIO_InitStruct;
      if(InOu==1){
    	  GPIO_InitStruct.Pin = FM_SDA_Pin;
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	9301      	str	r3, [sp, #4]
          GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
          GPIO_InitStruct.Pull = GPIO_NOPULL;
          HAL_GPIO_Init(FM_SDA_GPIO_Port, &GPIO_InitStruct);
 80013a8:	a901      	add	r1, sp, #4
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <I2CDataInOu.part.0+0x18>)
          GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ac:	9302      	str	r3, [sp, #8]
          GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	9303      	str	r3, [sp, #12]
          HAL_GPIO_Init(FM_SDA_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f001 faca 	bl	8002948 <HAL_GPIO_Init>
    	  GPIO_InitStruct.Pin = FM_SDA_Pin;
    	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
    	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    	  HAL_GPIO_Init(FM_SDA_GPIO_Port, &GPIO_InitStruct);
      }
}
 80013b4:	b007      	add	sp, #28
 80013b6:	bd00      	pop	{pc}
 80013b8:	48000400 	.word	0x48000400

080013bc <IIC_SendByte>:
//***************************************************************
//  Send a byte to the slave 写一个数据没有应答
//  return I2C_ERR OR I2C_CRR//0x8c
//***************************************************************
static unsigned char IIC_SendByte(unsigned char I2cData)
{
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	0005      	movs	r5, r0
 80013c0:	2408      	movs	r4, #8
  unsigned char i;
  unsigned char I2CStatus;

  for(i=0; i<8; i++)
  {
	IIC_SCL_0;
 80013c2:	2640      	movs	r6, #64	; 0x40
 80013c4:	2200      	movs	r2, #0
 80013c6:	0031      	movs	r1, r6
 80013c8:	481c      	ldr	r0, [pc, #112]	; (800143c <IIC_SendByte+0x80>)
 80013ca:	f001 fbe7 	bl	8002b9c <HAL_GPIO_WritePin>
    delay_5us(6);
 80013ce:	2006      	movs	r0, #6
 80013d0:	f7ff ffd8 	bl	8001384 <delay_5us>
    if(I2cData & 0x80) IIC_SDA_1;
 80013d4:	b26b      	sxtb	r3, r5
 80013d6:	2201      	movs	r2, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db00      	blt.n	80013de <IIC_SendByte+0x22>
    else IIC_SDA_0;
 80013dc:	2200      	movs	r2, #0
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	4816      	ldr	r0, [pc, #88]	; (800143c <IIC_SendByte+0x80>)
 80013e2:	f001 fbdb 	bl	8002b9c <HAL_GPIO_WritePin>
 80013e6:	3c01      	subs	r4, #1
    IIC_SCL_1;
 80013e8:	2201      	movs	r2, #1
 80013ea:	0031      	movs	r1, r6
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <IIC_SendByte+0x80>)
 80013ee:	f001 fbd5 	bl	8002b9c <HAL_GPIO_WritePin>
    delay_5us(6);
    I2cData <<= 1;
 80013f2:	006d      	lsls	r5, r5, #1
    delay_5us(6);
 80013f4:	2006      	movs	r0, #6
 80013f6:	b2e4      	uxtb	r4, r4
 80013f8:	f7ff ffc4 	bl	8001384 <delay_5us>
    I2cData <<= 1;
 80013fc:	b2ed      	uxtb	r5, r5
  for(i=0; i<8; i++)
 80013fe:	2c00      	cmp	r4, #0
 8001400:	d1e0      	bne.n	80013c4 <IIC_SendByte+0x8>
  }
  IIC_SCL_0;
 8001402:	0022      	movs	r2, r4
 8001404:	2140      	movs	r1, #64	; 0x40
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <IIC_SendByte+0x80>)
 8001408:	f001 fbc8 	bl	8002b9c <HAL_GPIO_WritePin>
 800140c:	f7ff ffc8 	bl	80013a0 <I2CDataInOu.part.0>
  I2CDataInOu(I2CDataIn);
  IIC_SCL_1;
 8001410:	2201      	movs	r2, #1
 8001412:	2140      	movs	r1, #64	; 0x40
 8001414:	4809      	ldr	r0, [pc, #36]	; (800143c <IIC_SendByte+0x80>)
 8001416:	f001 fbc1 	bl	8002b9c <HAL_GPIO_WritePin>
  delay_5us(3);
 800141a:	2003      	movs	r0, #3
 800141c:	f7ff ffb2 	bl	8001384 <delay_5us>
  if(IIC_SDA_Data== 0) I2CStatus= 1;
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <IIC_SendByte+0x80>)
 8001424:	f001 fba8 	bl	8002b78 <HAL_GPIO_ReadPin>
 8001428:	0005      	movs	r5, r0
  else I2CStatus=0;
  IIC_SCL_0;
 800142a:	0022      	movs	r2, r4
 800142c:	2140      	movs	r1, #64	; 0x40
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <IIC_SendByte+0x80>)
 8001430:	f001 fbb4 	bl	8002b9c <HAL_GPIO_WritePin>
  if(IIC_SDA_Data== 0) I2CStatus= 1;
 8001434:	4268      	negs	r0, r5
 8001436:	4168      	adcs	r0, r5
  return I2CStatus;
 8001438:	b2c0      	uxtb	r0, r0
}
 800143a:	bd70      	pop	{r4, r5, r6, pc}
 800143c:	48000400 	.word	0x48000400

08001440 <I2CDataInOu.constprop.2>:
static void I2CDataInOu(unsigned char InOu)
 8001440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    	  GPIO_InitStruct.Pin = FM_SDA_Pin;
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	9301      	str	r3, [sp, #4]
    	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001446:	3b6f      	subs	r3, #111	; 0x6f
 8001448:	9302      	str	r3, [sp, #8]
    	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
    	  HAL_GPIO_Init(FM_SDA_GPIO_Port, &GPIO_InitStruct);
 800144c:	a901      	add	r1, sp, #4
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <I2CDataInOu.constprop.2+0x1c>)
    	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	9304      	str	r3, [sp, #16]
    	  HAL_GPIO_Init(FM_SDA_GPIO_Port, &GPIO_InitStruct);
 8001452:	f001 fa79 	bl	8002948 <HAL_GPIO_Init>
}
 8001456:	b007      	add	sp, #28
 8001458:	bd00      	pop	{pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	48000400 	.word	0x48000400

08001460 <I2C_Stop>:
{
 8001460:	b510      	push	{r4, lr}
 IIC_SDA_0;
 8001462:	4c0c      	ldr	r4, [pc, #48]	; (8001494 <I2C_Stop+0x34>)
 I2CDataInOu(I2CDataOut);
 8001464:	f7ff ffec 	bl	8001440 <I2CDataInOu.constprop.2>
 IIC_SDA_0;
 8001468:	0020      	movs	r0, r4
 800146a:	2200      	movs	r2, #0
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	f001 fb95 	bl	8002b9c <HAL_GPIO_WritePin>
 IIC_SCL_1;
 8001472:	2201      	movs	r2, #1
 8001474:	2140      	movs	r1, #64	; 0x40
 8001476:	0020      	movs	r0, r4
 8001478:	f001 fb90 	bl	8002b9c <HAL_GPIO_WritePin>
 delay_5us(10);
 800147c:	200a      	movs	r0, #10
 800147e:	f7ff ff81 	bl	8001384 <delay_5us>
 IIC_SDA_1;
 8001482:	2201      	movs	r2, #1
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	0020      	movs	r0, r4
 8001488:	f001 fb88 	bl	8002b9c <HAL_GPIO_WritePin>
 delay_5us(10);
 800148c:	200a      	movs	r0, #10
 800148e:	f7ff ff79 	bl	8001384 <delay_5us>
}
 8001492:	bd10      	pop	{r4, pc}
 8001494:	48000400 	.word	0x48000400

08001498 <I2C_Start>:
{
 8001498:	b510      	push	{r4, lr}
  IIC_SDA_1;
 800149a:	4c0f      	ldr	r4, [pc, #60]	; (80014d8 <I2C_Start+0x40>)
  I2CDataInOu(I2CDataOut);
 800149c:	f7ff ffd0 	bl	8001440 <I2CDataInOu.constprop.2>
  IIC_SDA_1;
 80014a0:	0020      	movs	r0, r4
 80014a2:	2201      	movs	r2, #1
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	f001 fb79 	bl	8002b9c <HAL_GPIO_WritePin>
  IIC_SCL_1;
 80014aa:	2201      	movs	r2, #1
 80014ac:	2140      	movs	r1, #64	; 0x40
 80014ae:	0020      	movs	r0, r4
 80014b0:	f001 fb74 	bl	8002b9c <HAL_GPIO_WritePin>
  delay_5us(10);//4.7us
 80014b4:	200a      	movs	r0, #10
 80014b6:	f7ff ff65 	bl	8001384 <delay_5us>
  IIC_SDA_0;
 80014ba:	2200      	movs	r2, #0
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	0020      	movs	r0, r4
 80014c0:	f001 fb6c 	bl	8002b9c <HAL_GPIO_WritePin>
  delay_5us(10);//4us
 80014c4:	200a      	movs	r0, #10
 80014c6:	f7ff ff5d 	bl	8001384 <delay_5us>
  IIC_SCL_0;
 80014ca:	2200      	movs	r2, #0
 80014cc:	2140      	movs	r1, #64	; 0x40
 80014ce:	0020      	movs	r0, r4
 80014d0:	f001 fb64 	bl	8002b9c <HAL_GPIO_WritePin>
}
 80014d4:	bd10      	pop	{r4, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	48000400 	.word	0x48000400

080014dc <IIC_WriteOneByte>:
}
//在指定地址写入一个数据
//WriteAddr  :写入数据的目的地址
//DataToWrite:要写入的数据
static void IIC_WriteOneByte(uint8_t WriteAddr,uint8_t DataToWrite)
{
 80014dc:	b570      	push	{r4, r5, r6, lr}
 80014de:	0005      	movs	r5, r0
 80014e0:	000c      	movs	r4, r1
    I2C_Start();
 80014e2:	f7ff ffd9 	bl	8001498 <I2C_Start>
    IIC_SendByte(0X58);	         //发送写命令 器件地址
 80014e6:	2058      	movs	r0, #88	; 0x58
 80014e8:	f7ff ff68 	bl	80013bc <IIC_SendByte>
    I2CDataInOu(I2CDataOut);
 80014ec:	f7ff ffa8 	bl	8001440 <I2CDataInOu.constprop.2>
    IIC_SendByte(WriteAddr);     //发送寄存器地址
 80014f0:	0028      	movs	r0, r5
 80014f2:	f7ff ff63 	bl	80013bc <IIC_SendByte>
    I2CDataInOu(I2CDataOut);
 80014f6:	f7ff ffa3 	bl	8001440 <I2CDataInOu.constprop.2>
    IIC_SendByte(DataToWrite);   //发送数据
 80014fa:	0020      	movs	r0, r4
 80014fc:	f7ff ff5e 	bl	80013bc <IIC_SendByte>
    I2C_Stop();                  //产生一个停止条件
 8001500:	f7ff ffae 	bl	8001460 <I2C_Stop>
}
 8001504:	bd70      	pop	{r4, r5, r6, pc}
	...

08001508 <qn8027_init_function>:
 * 输入  ：无
 * 输出  ：无
 * 履历  ：V0.00  2019-4-30
 ********************************************/
void qn8027_init_function(void)
{
 8001508:	b530      	push	{r4, r5, lr}
	  HAL_GPIO_WritePin(FM_SCL_GPIO_Port, FM_SCL_Pin, GPIO_PIN_SET);
 800150a:	4d0d      	ldr	r5, [pc, #52]	; (8001540 <qn8027_init_function+0x38>)
{
 800150c:	b087      	sub	sp, #28
	  HAL_GPIO_WritePin(FM_SCL_GPIO_Port, FM_SCL_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	0028      	movs	r0, r5
 8001512:	2140      	movs	r1, #64	; 0x40
 8001514:	f001 fb42 	bl	8002b9c <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pin = FM_SCL_Pin;
 8001518:	2340      	movs	r3, #64	; 0x40
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2400      	movs	r4, #0
	  GPIO_InitStruct.Pin = FM_SCL_Pin;
 800151c:	9301      	str	r3, [sp, #4]
	  HAL_GPIO_Init(FM_SCL_GPIO_Port, &GPIO_InitStruct);
 800151e:	a901      	add	r1, sp, #4
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001520:	3b2f      	subs	r3, #47	; 0x2f
	  HAL_GPIO_Init(FM_SCL_GPIO_Port, &GPIO_InitStruct);
 8001522:	0028      	movs	r0, r5
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001524:	9302      	str	r3, [sp, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	9404      	str	r4, [sp, #16]
	  HAL_GPIO_Init(FM_SCL_GPIO_Port, &GPIO_InitStruct);
 8001528:	f001 fa0e 	bl	8002948 <HAL_GPIO_Init>
	I2CPort_Init();
	uc_qn8027_init_flag = 0x5A;    //芯片初始化标志
 800152c:	225a      	movs	r2, #90	; 0x5a
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <qn8027_init_function+0x3c>)
 8001530:	701a      	strb	r2, [r3, #0]
	uc_qn8027_init_state = 0xff;   //芯片初始化状态
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <qn8027_init_function+0x40>)
 8001534:	32a5      	adds	r2, #165	; 0xa5
 8001536:	701a      	strb	r2, [r3, #0]
	uc_qn8027_delay_count = 0;
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <qn8027_init_function+0x44>)
 800153a:	701c      	strb	r4, [r3, #0]
}
 800153c:	b007      	add	sp, #28
 800153e:	bd30      	pop	{r4, r5, pc}
 8001540:	48000400 	.word	0x48000400
 8001544:	2000011b 	.word	0x2000011b
 8001548:	2000011c 	.word	0x2000011c
 800154c:	2000011a 	.word	0x2000011a

08001550 <qn8027_fm_channel_set_function>:
 * 输出  ：  无
 * 履历  ：  V0.00  2019-5-1
 ********************************************/
void qn8027_fm_channel_set_function(void)
{
	if((uc_fm_channel>=76)&&(uc_fm_channel<=108)){
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <qn8027_fm_channel_set_function+0x1c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3b4c      	subs	r3, #76	; 0x4c
 8001556:	b2da      	uxtb	r2, r3
 8001558:	2a20      	cmp	r2, #32
 800155a:	d806      	bhi.n	800156a <qn8027_fm_channel_set_function+0x1a>
	    us_qn8027_channel = (uc_fm_channel-76)*20;
 800155c:	2214      	movs	r2, #20
 800155e:	4353      	muls	r3, r2
 8001560:	4a03      	ldr	r2, [pc, #12]	; (8001570 <qn8027_fm_channel_set_function+0x20>)
 8001562:	8013      	strh	r3, [r2, #0]
	    uc_qn8027_set_channel_flag = 0x5A;
 8001564:	225a      	movs	r2, #90	; 0x5a
 8001566:	4b03      	ldr	r3, [pc, #12]	; (8001574 <qn8027_fm_channel_set_function+0x24>)
 8001568:	701a      	strb	r2, [r3, #0]
	}
}
 800156a:	4770      	bx	lr
 800156c:	20000004 	.word	0x20000004
 8001570:	20000006 	.word	0x20000006
 8001574:	2000011d 	.word	0x2000011d

08001578 <task_qn8027_function>:
 * 输入  ：无
 * 输出  ：无
 * 履历  ：V0.00  2019-4-30
 ********************************************/
void task_qn8027_function(void)
{
 8001578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(em_FM_switch == SWITCH_OPEN){//打开
 800157a:	4b90      	ldr	r3, [pc, #576]	; (80017bc <task_qn8027_function+0x244>)
 800157c:	4c90      	ldr	r4, [pc, #576]	; (80017c0 <task_qn8027_function+0x248>)
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	2a00      	cmp	r2, #0
 8001582:	d000      	beq.n	8001586 <task_qn8027_function+0xe>
 8001584:	e0a4      	b.n	80016d0 <task_qn8027_function+0x158>
		FM_POWER_ON;
 8001586:	2120      	movs	r1, #32
 8001588:	488e      	ldr	r0, [pc, #568]	; (80017c4 <task_qn8027_function+0x24c>)
 800158a:	f001 fb07 	bl	8002b9c <HAL_GPIO_WritePin>
		if(first_power_on == 0){
 800158e:	7823      	ldrb	r3, [r4, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d103      	bne.n	800159c <task_qn8027_function+0x24>
			first_power_on = 0x5A;
 8001594:	335a      	adds	r3, #90	; 0x5a
 8001596:	7023      	strb	r3, [r4, #0]
			qn8027_init_function();
 8001598:	f7ff ffb6 	bl	8001508 <qn8027_init_function>
   if(uc_qn8027_init_flag != 0x5A){
 800159c:	4e8a      	ldr	r6, [pc, #552]	; (80017c8 <task_qn8027_function+0x250>)
 800159e:	7833      	ldrb	r3, [r6, #0]
 80015a0:	2b5a      	cmp	r3, #90	; 0x5a
 80015a2:	d11a      	bne.n	80015da <task_qn8027_function+0x62>
   if((uc_fm_channel>=76)&&(uc_fm_channel<=108)){
 80015a4:	4b89      	ldr	r3, [pc, #548]	; (80017cc <task_qn8027_function+0x254>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	3b4c      	subs	r3, #76	; 0x4c
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	2a20      	cmp	r2, #32
 80015ae:	d803      	bhi.n	80015b8 <task_qn8027_function+0x40>
	   us_qn8027_channel = (uc_fm_channel-76)*20;
 80015b0:	2214      	movs	r2, #20
 80015b2:	4353      	muls	r3, r2
 80015b4:	4a86      	ldr	r2, [pc, #536]	; (80017d0 <task_qn8027_function+0x258>)
 80015b6:	8013      	strh	r3, [r2, #0]
   if(uc_qn8027_init_state == 0xff){
 80015b8:	4d86      	ldr	r5, [pc, #536]	; (80017d4 <task_qn8027_function+0x25c>)
 80015ba:	782c      	ldrb	r4, [r5, #0]
 80015bc:	2cff      	cmp	r4, #255	; 0xff
 80015be:	d000      	beq.n	80015c2 <task_qn8027_function+0x4a>
 80015c0:	e08e      	b.n	80016e0 <task_qn8027_function+0x168>
	   uc_qn8027_delay_count++;
 80015c2:	4a85      	ldr	r2, [pc, #532]	; (80017d8 <task_qn8027_function+0x260>)
 80015c4:	7813      	ldrb	r3, [r2, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	7013      	strb	r3, [r2, #0]
	   if(uc_qn8027_delay_count<=(600/10)){
 80015cc:	2b3c      	cmp	r3, #60	; 0x3c
 80015ce:	d97e      	bls.n	80016ce <task_qn8027_function+0x156>
	   uc_qn8027_init_state = 0;
 80015d0:	2300      	movs	r3, #0
	   uc_qn8027_init_state = 3;
 80015d2:	702b      	strb	r3, [r5, #0]
	if(uc_qn8027_init_flag != 0x5A){
 80015d4:	7833      	ldrb	r3, [r6, #0]
 80015d6:	2b5a      	cmp	r3, #90	; 0x5a
 80015d8:	d079      	beq.n	80016ce <task_qn8027_function+0x156>
		if(uc_qn8027_set_channel_flag == 0x5A){
 80015da:	4b80      	ldr	r3, [pc, #512]	; (80017dc <task_qn8027_function+0x264>)
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	2a5a      	cmp	r2, #90	; 0x5a
 80015e0:	d175      	bne.n	80016ce <task_qn8027_function+0x156>
			uc_qn8027_set_channel_flag = 0;
 80015e2:	2400      	movs	r4, #0
 80015e4:	701c      	strb	r4, [r3, #0]
    I2C_Start();
 80015e6:	f7ff ff57 	bl	8001498 <I2C_Start>
    IIC_SendByte(0X58);	   //发送写命令
 80015ea:	2058      	movs	r0, #88	; 0x58
 80015ec:	f7ff fee6 	bl	80013bc <IIC_SendByte>
	I2CDataInOu(I2CDataOut);
 80015f0:	f7ff ff26 	bl	8001440 <I2CDataInOu.constprop.2>
	IIC_SendByte(ReadAddr);//发送高地址
 80015f4:	0020      	movs	r0, r4
 80015f6:	f7ff fee1 	bl	80013bc <IIC_SendByte>
	I2C_Stop();//产生一个停止条件
 80015fa:	f7ff ff31 	bl	8001460 <I2C_Stop>
	I2C_Start();
 80015fe:	f7ff ff4b 	bl	8001498 <I2C_Start>
	IIC_SendByte(0X59);     //进入接收模式
 8001602:	2059      	movs	r0, #89	; 0x59
 8001604:	f7ff feda 	bl	80013bc <IIC_SendByte>
 8001608:	f7ff feca 	bl	80013a0 <I2CDataInOu.part.0>
   delay_5us(6);
 800160c:	2006      	movs	r0, #6
 800160e:	f7ff feb9 	bl	8001384 <delay_5us>
 8001612:	2508      	movs	r5, #8
     IIC_SCL_0;
 8001614:	2640      	movs	r6, #64	; 0x40
 8001616:	2200      	movs	r2, #0
 8001618:	0031      	movs	r1, r6
 800161a:	486a      	ldr	r0, [pc, #424]	; (80017c4 <task_qn8027_function+0x24c>)
 800161c:	f001 fabe 	bl	8002b9c <HAL_GPIO_WritePin>
     delay_5us(10);
 8001620:	200a      	movs	r0, #10
 8001622:	f7ff feaf 	bl	8001384 <delay_5us>
     IIC_SCL_1;
 8001626:	0031      	movs	r1, r6
 8001628:	2201      	movs	r2, #1
 800162a:	4866      	ldr	r0, [pc, #408]	; (80017c4 <task_qn8027_function+0x24c>)
 800162c:	f001 fab6 	bl	8002b9c <HAL_GPIO_WritePin>
     delay_5us(10);
 8001630:	200a      	movs	r0, #10
 8001632:	f7ff fea7 	bl	8001384 <delay_5us>
     ReadByte <<= 1;
 8001636:	0064      	lsls	r4, r4, #1
     if(IIC_SDA_Data) ReadByte |= 0x01;
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	4862      	ldr	r0, [pc, #392]	; (80017c4 <task_qn8027_function+0x24c>)
     ReadByte <<= 1;
 800163c:	b2e4      	uxtb	r4, r4
     if(IIC_SDA_Data) ReadByte |= 0x01;
 800163e:	f001 fa9b 	bl	8002b78 <HAL_GPIO_ReadPin>
 8001642:	2800      	cmp	r0, #0
 8001644:	d001      	beq.n	800164a <task_qn8027_function+0xd2>
 8001646:	2301      	movs	r3, #1
 8001648:	431c      	orrs	r4, r3
 800164a:	3d01      	subs	r5, #1
     delay_5us(3);
 800164c:	2003      	movs	r0, #3
 800164e:	b2ed      	uxtb	r5, r5
 8001650:	f7ff fe98 	bl	8001384 <delay_5us>
   for(i=0; i<8; i++)
 8001654:	2d00      	cmp	r5, #0
 8001656:	d1de      	bne.n	8001616 <task_qn8027_function+0x9e>
   IIC_SCL_0;
 8001658:	002a      	movs	r2, r5
 800165a:	2140      	movs	r1, #64	; 0x40
 800165c:	4859      	ldr	r0, [pc, #356]	; (80017c4 <task_qn8027_function+0x24c>)
 800165e:	f001 fa9d 	bl	8002b9c <HAL_GPIO_WritePin>
   I2CDataInOu(I2CDataOut);
 8001662:	f7ff feed 	bl	8001440 <I2CDataInOu.constprop.2>
   delay_5us(3);
 8001666:	2003      	movs	r0, #3
 8001668:	f7ff fe8c 	bl	8001384 <delay_5us>
 IIC_SDA_0;
 800166c:	002a      	movs	r2, r5
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	4854      	ldr	r0, [pc, #336]	; (80017c4 <task_qn8027_function+0x24c>)
 8001672:	f001 fa93 	bl	8002b9c <HAL_GPIO_WritePin>
 delay_5us(3);
 8001676:	2003      	movs	r0, #3
 8001678:	f7ff fe84 	bl	8001384 <delay_5us>
 IIC_SCL_1;
 800167c:	2201      	movs	r2, #1
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	4850      	ldr	r0, [pc, #320]	; (80017c4 <task_qn8027_function+0x24c>)
 8001682:	f001 fa8b 	bl	8002b9c <HAL_GPIO_WritePin>
 delay_5us(10);
 8001686:	200a      	movs	r0, #10
 8001688:	f7ff fe7c 	bl	8001384 <delay_5us>
 IIC_SCL_0;
 800168c:	002a      	movs	r2, r5
 800168e:	2140      	movs	r1, #64	; 0x40
 8001690:	484c      	ldr	r0, [pc, #304]	; (80017c4 <task_qn8027_function+0x24c>)
 8001692:	f001 fa83 	bl	8002b9c <HAL_GPIO_WritePin>
			REG_SYSTEM &= 0xDF;
 8001696:	2620      	movs	r6, #32
    I2C_Stop();//产生一个停止条件
 8001698:	f7ff fee2 	bl	8001460 <I2C_Stop>
			IIC_WriteOneByte(0x00, REG_SYSTEM);				//Disable transmission.
 800169c:	0021      	movs	r1, r4
 800169e:	0028      	movs	r0, r5
 80016a0:	43b1      	bics	r1, r6
 80016a2:	f7ff ff1b 	bl	80014dc <IIC_WriteOneByte>
			REG_SYSTEM |= ((us_qn8027_channel>>8)&0x03);
 80016a6:	2323      	movs	r3, #35	; 0x23
 80016a8:	4f49      	ldr	r7, [pc, #292]	; (80017d0 <task_qn8027_function+0x258>)
 80016aa:	439c      	bics	r4, r3
 80016ac:	8839      	ldrh	r1, [r7, #0]
			IIC_WriteOneByte(0x00, REG_SYSTEM);				//Set the highest 2 bits of 10-bit channel index.
 80016ae:	0028      	movs	r0, r5
			REG_SYSTEM |= ((us_qn8027_channel>>8)&0x03);
 80016b0:	0589      	lsls	r1, r1, #22
 80016b2:	0f89      	lsrs	r1, r1, #30
 80016b4:	430c      	orrs	r4, r1
			IIC_WriteOneByte(0x00, REG_SYSTEM);				//Set the highest 2 bits of 10-bit channel index.
 80016b6:	0021      	movs	r1, r4
 80016b8:	f7ff ff10 	bl	80014dc <IIC_WriteOneByte>
			REG_SYSTEM |= 0x20;
 80016bc:	4334      	orrs	r4, r6
			IIC_WriteOneByte(0x01, (us_qn8027_channel&0x00FF));
 80016be:	7839      	ldrb	r1, [r7, #0]
 80016c0:	2001      	movs	r0, #1
 80016c2:	f7ff ff0b 	bl	80014dc <IIC_WriteOneByte>
			IIC_WriteOneByte(0x00, REG_SYSTEM);				//Enable transmission.
 80016c6:	b2e1      	uxtb	r1, r4
 80016c8:	0028      	movs	r0, r5
 80016ca:	f7ff ff07 	bl	80014dc <IIC_WriteOneByte>
	}

	qn8027_ChipInitialization();
	qn8027_set_channel_function();

}
 80016ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    FM_POWER_OFF;
 80016d0:	2201      	movs	r2, #1
 80016d2:	2120      	movs	r1, #32
 80016d4:	483b      	ldr	r0, [pc, #236]	; (80017c4 <task_qn8027_function+0x24c>)
 80016d6:	f001 fa61 	bl	8002b9c <HAL_GPIO_WritePin>
	    first_power_on = 0;  //初次上电标志位
 80016da:	2300      	movs	r3, #0
 80016dc:	7023      	strb	r3, [r4, #0]
 80016de:	e75d      	b.n	800159c <task_qn8027_function+0x24>
   else if(uc_qn8027_init_state == 0){//发送地址0x00 系统参数数据
 80016e0:	2c00      	cmp	r4, #0
 80016e2:	d10c      	bne.n	80016fe <task_qn8027_function+0x186>
	   IIC_WriteOneByte(0x00,((us_qn8027_channel>>8)&0x03)|0x80);
 80016e4:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <task_qn8027_function+0x258>)
 80016e6:	0020      	movs	r0, r4
 80016e8:	8819      	ldrh	r1, [r3, #0]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	0589      	lsls	r1, r1, #22
 80016ee:	0f89      	lsrs	r1, r1, #30
 80016f0:	4319      	orrs	r1, r3
 80016f2:	f7ff fef3 	bl	80014dc <IIC_WriteOneByte>
	   uc_qn8027_delay_count =0;
 80016f6:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <task_qn8027_function+0x260>)
 80016f8:	701c      	strb	r4, [r3, #0]
       uc_qn8027_init_state = 1;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e769      	b.n	80015d2 <task_qn8027_function+0x5a>
   else if(uc_qn8027_init_state == 1){//延时20ms
 80016fe:	2c01      	cmp	r4, #1
 8001700:	d108      	bne.n	8001714 <task_qn8027_function+0x19c>
	   uc_qn8027_delay_count++;
 8001702:	4a35      	ldr	r2, [pc, #212]	; (80017d8 <task_qn8027_function+0x260>)
 8001704:	7813      	ldrb	r3, [r2, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	7013      	strb	r3, [r2, #0]
	   if(uc_qn8027_delay_count<(20/10)){
 800170c:	2b01      	cmp	r3, #1
 800170e:	d9de      	bls.n	80016ce <task_qn8027_function+0x156>
	   uc_qn8027_init_state = 3;
 8001710:	2303      	movs	r3, #3
 8001712:	e75e      	b.n	80015d2 <task_qn8027_function+0x5a>
   else if(uc_qn8027_init_state == 3){//时钟源设置
 8001714:	2c03      	cmp	r4, #3
 8001716:	d11c      	bne.n	8001752 <task_qn8027_function+0x1da>
	   IIC_WriteOneByte(0x03,0x10);//选择晶振体
 8001718:	2110      	movs	r1, #16
 800171a:	0020      	movs	r0, r4
 800171c:	f7ff fede 	bl	80014dc <IIC_WriteOneByte>
	   IIC_WriteOneByte(0x04,0x03);//03
 8001720:	0021      	movs	r1, r4
 8001722:	2004      	movs	r0, #4
 8001724:	f7ff feda 	bl	80014dc <IIC_WriteOneByte>
	   IIC_WriteOneByte(0x00,((us_qn8027_channel>>8)&0x03) | 0x40);
 8001728:	2340      	movs	r3, #64	; 0x40
 800172a:	4f29      	ldr	r7, [pc, #164]	; (80017d0 <task_qn8027_function+0x258>)
 800172c:	2000      	movs	r0, #0
 800172e:	8839      	ldrh	r1, [r7, #0]
 8001730:	0a09      	lsrs	r1, r1, #8
 8001732:	4021      	ands	r1, r4
 8001734:	4319      	orrs	r1, r3
 8001736:	f7ff fed1 	bl	80014dc <IIC_WriteOneByte>
	   IIC_WriteOneByte(0x00,((us_qn8027_channel>>8)&0x03) | 0x00);
 800173a:	8839      	ldrh	r1, [r7, #0]
 800173c:	2000      	movs	r0, #0
 800173e:	0a09      	lsrs	r1, r1, #8
 8001740:	4021      	ands	r1, r4
 8001742:	f7ff fecb 	bl	80014dc <IIC_WriteOneByte>
	   uc_qn8027_init_state = 4;
 8001746:	2304      	movs	r3, #4
	   uc_qn8027_delay_count =0;
 8001748:	2200      	movs	r2, #0
	   uc_qn8027_init_state = 4;
 800174a:	702b      	strb	r3, [r5, #0]
	   uc_qn8027_delay_count =0;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <task_qn8027_function+0x260>)
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	e740      	b.n	80015d4 <task_qn8027_function+0x5c>
   else if(uc_qn8027_init_state == 4){//延时20ms
 8001752:	2c04      	cmp	r4, #4
 8001754:	d108      	bne.n	8001768 <task_qn8027_function+0x1f0>
	   uc_qn8027_delay_count++;
 8001756:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <task_qn8027_function+0x260>)
 8001758:	7813      	ldrb	r3, [r2, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	7013      	strb	r3, [r2, #0]
	   if(uc_qn8027_delay_count<(20/10)){
 8001760:	2b01      	cmp	r3, #1
 8001762:	d9b4      	bls.n	80016ce <task_qn8027_function+0x156>
	   uc_qn8027_init_state = 5;
 8001764:	2305      	movs	r3, #5
 8001766:	e734      	b.n	80015d2 <task_qn8027_function+0x5a>
   else if(uc_qn8027_init_state == 5){
 8001768:	2c05      	cmp	r4, #5
 800176a:	d116      	bne.n	800179a <task_qn8027_function+0x222>
	   IIC_WriteOneByte(0x10,0x4B);  //PA output power target is 0.62*PA_TRGT+71dBu. Valid values are 20-75.
 800176c:	214b      	movs	r1, #75	; 0x4b
 800176e:	2010      	movs	r0, #16
 8001770:	f7ff feb4 	bl	80014dc <IIC_WriteOneByte>
	   IIC_WriteOneByte(0x18,0xE4);  //改善信噪比SNR
 8001774:	21e4      	movs	r1, #228	; 0xe4
 8001776:	2018      	movs	r0, #24
 8001778:	f7ff feb0 	bl	80014dc <IIC_WriteOneByte>
	   IIC_WriteOneByte(0x1B,0xF0);  //Increase maximum RF output power. (This is an undocumented register, and it really works.)
 800177c:	21f0      	movs	r1, #240	; 0xf0
 800177e:	201b      	movs	r0, #27
 8001780:	f7ff feac 	bl	80014dc <IIC_WriteOneByte>
	   IIC_WriteOneByte(0x02,0xB9); //Disable RF PA off function.
 8001784:	21b9      	movs	r1, #185	; 0xb9
 8001786:	2002      	movs	r0, #2
 8001788:	f7ff fea8 	bl	80014dc <IIC_WriteOneByte>
	   IIC_WriteOneByte(0x01,us_qn8027_channel&0xff);//发射频率
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <task_qn8027_function+0x258>)
 800178e:	2001      	movs	r0, #1
 8001790:	7819      	ldrb	r1, [r3, #0]
 8001792:	f7ff fea3 	bl	80014dc <IIC_WriteOneByte>
	   uc_qn8027_init_state = 6;
 8001796:	2306      	movs	r3, #6
 8001798:	e71b      	b.n	80015d2 <task_qn8027_function+0x5a>
   else if(uc_qn8027_init_state == 6){//发射
 800179a:	2c06      	cmp	r4, #6
 800179c:	d000      	beq.n	80017a0 <task_qn8027_function+0x228>
 800179e:	e796      	b.n	80016ce <task_qn8027_function+0x156>
    	IIC_WriteOneByte(0x00,((us_qn8027_channel>>8)&0x03)|0x20);
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <task_qn8027_function+0x258>)
 80017a2:	2000      	movs	r0, #0
 80017a4:	8819      	ldrh	r1, [r3, #0]
 80017a6:	2320      	movs	r3, #32
 80017a8:	0589      	lsls	r1, r1, #22
 80017aa:	0f89      	lsrs	r1, r1, #30
 80017ac:	4319      	orrs	r1, r3
 80017ae:	f7ff fe95 	bl	80014dc <IIC_WriteOneByte>
    	uc_qn8027_init_state = 11;
 80017b2:	230b      	movs	r3, #11
 80017b4:	702b      	strb	r3, [r5, #0]
    	uc_qn8027_init_flag = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	7033      	strb	r3, [r6, #0]
 80017ba:	e70b      	b.n	80015d4 <task_qn8027_function+0x5c>
 80017bc:	20000123 	.word	0x20000123
 80017c0:	20000119 	.word	0x20000119
 80017c4:	48000400 	.word	0x48000400
 80017c8:	2000011b 	.word	0x2000011b
 80017cc:	20000004 	.word	0x20000004
 80017d0:	20000006 	.word	0x20000006
 80017d4:	2000011c 	.word	0x2000011c
 80017d8:	2000011a 	.word	0x2000011a
 80017dc:	2000011d 	.word	0x2000011d

080017e0 <LCD_Writ_Bus>:
      函数说明：LCD串行数据写入函数
      入口数据：dat  要写入的串行数据
      返回值：  无
******************************************************************************/
static void LCD_Writ_Bus(uint8_t dat)
{
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i;
	for(i=0;i<8;i++)
	{
		OLED_SCLK_Clr();
 80017e2:	2690      	movs	r6, #144	; 0x90
{
 80017e4:	0005      	movs	r5, r0
 80017e6:	2408      	movs	r4, #8
		OLED_SCLK_Clr();
 80017e8:	2720      	movs	r7, #32
 80017ea:	05f6      	lsls	r6, r6, #23
 80017ec:	2090      	movs	r0, #144	; 0x90
 80017ee:	2200      	movs	r2, #0
 80017f0:	0039      	movs	r1, r7
 80017f2:	05c0      	lsls	r0, r0, #23
 80017f4:	f001 f9d2 	bl	8002b9c <HAL_GPIO_WritePin>
		if(dat&0x80)
 80017f8:	b26b      	sxtb	r3, r5
		   OLED_SDIN_Set();
 80017fa:	2201      	movs	r2, #1
		if(dat&0x80)
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db00      	blt.n	8001802 <LCD_Writ_Bus+0x22>
		else
		   OLED_SDIN_Clr();
 8001800:	2200      	movs	r2, #0
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	0030      	movs	r0, r6
 8001806:	3c01      	subs	r4, #1
 8001808:	f001 f9c8 	bl	8002b9c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
		dat<<=1;
 800180c:	006d      	lsls	r5, r5, #1
		OLED_SCLK_Set();
 800180e:	2201      	movs	r2, #1
 8001810:	0039      	movs	r1, r7
 8001812:	0030      	movs	r0, r6
 8001814:	b2e4      	uxtb	r4, r4
 8001816:	f001 f9c1 	bl	8002b9c <HAL_GPIO_WritePin>
		dat<<=1;
 800181a:	b2ed      	uxtb	r5, r5
	for(i=0;i<8;i++)
 800181c:	2c00      	cmp	r4, #0
 800181e:	d1e5      	bne.n	80017ec <LCD_Writ_Bus+0xc>
	}
}
 8001820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001822 <LCD_WR_REG>:
      函数说明：LCD写入命令
      入口数据：dat 写入的命令
      返回值：  无
******************************************************************************/
static void LCD_WR_REG(uint8_t dat)
{
 8001822:	b510      	push	{r4, lr}
 8001824:	0004      	movs	r4, r0
	OLED_DC_Clr();//写命令
 8001826:	2090      	movs	r0, #144	; 0x90
 8001828:	2200      	movs	r2, #0
 800182a:	2140      	movs	r1, #64	; 0x40
 800182c:	05c0      	lsls	r0, r0, #23
 800182e:	f001 f9b5 	bl	8002b9c <HAL_GPIO_WritePin>
	LCD_Writ_Bus(dat);
 8001832:	0020      	movs	r0, r4
 8001834:	f7ff ffd4 	bl	80017e0 <LCD_Writ_Bus>
}
 8001838:	bd10      	pop	{r4, pc}

0800183a <LCD_WR_DATA>:
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
static void LCD_WR_DATA(uint16_t dat)
{
 800183a:	b510      	push	{r4, lr}
 800183c:	0004      	movs	r4, r0
	OLED_DC_Set();//写数据
 800183e:	2090      	movs	r0, #144	; 0x90
 8001840:	2201      	movs	r2, #1
 8001842:	2140      	movs	r1, #64	; 0x40
 8001844:	05c0      	lsls	r0, r0, #23
 8001846:	f001 f9a9 	bl	8002b9c <HAL_GPIO_WritePin>
	LCD_Writ_Bus(dat>>8);
 800184a:	0a20      	lsrs	r0, r4, #8
 800184c:	f7ff ffc8 	bl	80017e0 <LCD_Writ_Bus>
	LCD_Writ_Bus(dat);
 8001850:	b2e0      	uxtb	r0, r4
 8001852:	f7ff ffc5 	bl	80017e0 <LCD_Writ_Bus>
}
 8001856:	bd10      	pop	{r4, pc}

08001858 <LCD_Address_Set>:
      入口数据：Xstart,Xend 设置列的起始和结束地址
         Ystart,Yend 设置行的起始和结束地址
      返回值：  无
******************************************************************************/
static void LCD_Address_Set(uint8_t Xstart,uint8_t Ystart,uint8_t Xend,uint8_t Yend)
{
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	0007      	movs	r7, r0
 800185c:	0016      	movs	r6, r2
 800185e:	000d      	movs	r5, r1
	LCD_WR_DATA(Ystart+1);
	LCD_WR_DATA(Yend+1);
	LCD_WR_REG(0x2c);//储存器写

#elif USE_HORIZONTAL==2
	LCD_WR_REG(0x2a);//列地址设置
 8001860:	202a      	movs	r0, #42	; 0x2a
{
 8001862:	001c      	movs	r4, r3
	LCD_WR_REG(0x2a);//列地址设置
 8001864:	f7ff ffdd 	bl	8001822 <LCD_WR_REG>
	LCD_WR_DATA(Xstart+1);
 8001868:	1c78      	adds	r0, r7, #1
 800186a:	f7ff ffe6 	bl	800183a <LCD_WR_DATA>
	LCD_WR_DATA(Xend+1);
 800186e:	1c70      	adds	r0, r6, #1
 8001870:	f7ff ffe3 	bl	800183a <LCD_WR_DATA>
	LCD_WR_REG(0x2b);//行地址设置
 8001874:	202b      	movs	r0, #43	; 0x2b
 8001876:	f7ff ffd4 	bl	8001822 <LCD_WR_REG>
	LCD_WR_DATA(Ystart+26);
 800187a:	0028      	movs	r0, r5
 800187c:	301a      	adds	r0, #26
 800187e:	f7ff ffdc 	bl	800183a <LCD_WR_DATA>
	LCD_WR_DATA(Yend+26);
 8001882:	0020      	movs	r0, r4
 8001884:	301a      	adds	r0, #26
 8001886:	f7ff ffd8 	bl	800183a <LCD_WR_DATA>
	LCD_WR_REG(0x2c);//储存器写
 800188a:	202c      	movs	r0, #44	; 0x2c
 800188c:	f7ff ffc9 	bl	8001822 <LCD_WR_REG>
	LCD_WR_DATA(y1+26);
	LCD_WR_DATA(Yend+26);
	LCD_WR_REG(0x2c);//储存器写

#endif
}
 8001890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001892 <LCD_WR_DATA_FAST>:
{
 8001892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001894:	0005      	movs	r5, r0
	OLED_DC_Set();//写数据
 8001896:	2090      	movs	r0, #144	; 0x90
 8001898:	2201      	movs	r2, #1
 800189a:	2140      	movs	r1, #64	; 0x40
 800189c:	05c0      	lsls	r0, r0, #23
 800189e:	f001 f97d 	bl	8002b9c <HAL_GPIO_WritePin>
	OLED_SDIN_Clr(); //高8位全写0
 80018a2:	2090      	movs	r0, #144	; 0x90
 80018a4:	2200      	movs	r2, #0
 80018a6:	2180      	movs	r1, #128	; 0x80
 80018a8:	05c0      	lsls	r0, r0, #23
		OLED_SCLK_Clr();
 80018aa:	2690      	movs	r6, #144	; 0x90
	OLED_SDIN_Clr(); //高8位全写0
 80018ac:	f001 f976 	bl	8002b9c <HAL_GPIO_WritePin>
 80018b0:	2408      	movs	r4, #8
		OLED_SCLK_Clr();
 80018b2:	2720      	movs	r7, #32
 80018b4:	05f6      	lsls	r6, r6, #23
 80018b6:	2200      	movs	r2, #0
 80018b8:	0039      	movs	r1, r7
 80018ba:	0030      	movs	r0, r6
 80018bc:	3c01      	subs	r4, #1
 80018be:	f001 f96d 	bl	8002b9c <HAL_GPIO_WritePin>
 80018c2:	b2e4      	uxtb	r4, r4
		OLED_SCLK_Set();
 80018c4:	2201      	movs	r2, #1
 80018c6:	0039      	movs	r1, r7
 80018c8:	0030      	movs	r0, r6
 80018ca:	f001 f967 	bl	8002b9c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++){
 80018ce:	2c00      	cmp	r4, #0
 80018d0:	d1f1      	bne.n	80018b6 <LCD_WR_DATA_FAST+0x24>
		OLED_SCLK_Clr();
 80018d2:	2690      	movs	r6, #144	; 0x90
 80018d4:	2720      	movs	r7, #32
 80018d6:	3408      	adds	r4, #8
 80018d8:	05f6      	lsls	r6, r6, #23
 80018da:	2090      	movs	r0, #144	; 0x90
 80018dc:	2200      	movs	r2, #0
 80018de:	0039      	movs	r1, r7
 80018e0:	05c0      	lsls	r0, r0, #23
 80018e2:	f001 f95b 	bl	8002b9c <HAL_GPIO_WritePin>
		if(dat&0x80)
 80018e6:	b26b      	sxtb	r3, r5
			OLED_SDIN_Set();
 80018e8:	2201      	movs	r2, #1
		if(dat&0x80)
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db00      	blt.n	80018f0 <LCD_WR_DATA_FAST+0x5e>
			OLED_SDIN_Clr();
 80018ee:	2200      	movs	r2, #0
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	0030      	movs	r0, r6
 80018f4:	3c01      	subs	r4, #1
 80018f6:	f001 f951 	bl	8002b9c <HAL_GPIO_WritePin>
		dat<<=1;
 80018fa:	006d      	lsls	r5, r5, #1
		OLED_SCLK_Set();
 80018fc:	2201      	movs	r2, #1
 80018fe:	0039      	movs	r1, r7
 8001900:	0030      	movs	r0, r6
 8001902:	b2e4      	uxtb	r4, r4
 8001904:	f001 f94a 	bl	8002b9c <HAL_GPIO_WritePin>
		dat<<=1;
 8001908:	b2ed      	uxtb	r5, r5
	for(i=0;i<8;i++)
 800190a:	2c00      	cmp	r4, #0
 800190c:	d1e5      	bne.n	80018da <LCD_WR_DATA_FAST+0x48>
}
 800190e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001910 <DrawPixel>:

/**********************************************
Lcd打点函数
***********************************************/
static void DrawPixel(uint8_t x, uint8_t y, uint16_t color)
{
 8001910:	b570      	push	{r4, r5, r6, lr}
 8001912:	0006      	movs	r6, r0
 8001914:	000c      	movs	r4, r1
 8001916:	0015      	movs	r5, r2
	//OLED_CS_Clr(); //片选有效
	LCD_WR_REG(0x2a);//列地址设置
	LCD_WR_DATA_FAST(x+1);
 8001918:	3601      	adds	r6, #1
	LCD_WR_REG(0x2a);//列地址设置
 800191a:	202a      	movs	r0, #42	; 0x2a
 800191c:	f7ff ff81 	bl	8001822 <LCD_WR_REG>
	LCD_WR_DATA_FAST(x+1);
 8001920:	b2f0      	uxtb	r0, r6
 8001922:	f7ff ffb6 	bl	8001892 <LCD_WR_DATA_FAST>
	LCD_WR_REG(0x2b);//行地址设置
	LCD_WR_DATA_FAST(y+26);
 8001926:	341a      	adds	r4, #26
	LCD_WR_REG(0x2b);//行地址设置
 8001928:	202b      	movs	r0, #43	; 0x2b
 800192a:	f7ff ff7a 	bl	8001822 <LCD_WR_REG>
	LCD_WR_DATA_FAST(y+26);
 800192e:	b2e0      	uxtb	r0, r4
 8001930:	f7ff ffaf 	bl	8001892 <LCD_WR_DATA_FAST>
	LCD_WR_REG(0x2c);//储存器写
 8001934:	202c      	movs	r0, #44	; 0x2c
 8001936:	f7ff ff74 	bl	8001822 <LCD_WR_REG>
	LCD_WR_DATA(color);
 800193a:	0028      	movs	r0, r5
 800193c:	f7ff ff7d 	bl	800183a <LCD_WR_DATA>
	//OLED_CS_Set();    //片选无效
}
 8001940:	bd70      	pop	{r4, r5, r6, pc}

08001942 <LCD_WR_DATA8>:
{
 8001942:	b510      	push	{r4, lr}
 8001944:	0004      	movs	r4, r0
	OLED_DC_Set();//写数据
 8001946:	2090      	movs	r0, #144	; 0x90
 8001948:	2201      	movs	r2, #1
 800194a:	2140      	movs	r1, #64	; 0x40
 800194c:	05c0      	lsls	r0, r0, #23
 800194e:	f001 f925 	bl	8002b9c <HAL_GPIO_WritePin>
	LCD_Writ_Bus(dat);
 8001952:	0020      	movs	r0, r4
 8001954:	f7ff ff44 	bl	80017e0 <LCD_Writ_Bus>
}
 8001958:	bd10      	pop	{r4, pc}
	...

0800195c <display_gb1212>:
* 输出  ：无
* 说明  : 需要在GB1212.h里加入要显示的字体 或引用外部flash字库
* 履历  ：V0.00   2018-05-27
*********************************************************/
void display_gb1212(uint8_t x0, uint8_t y0,const char *s, uint16_t fColor,uint16_t bColor)
{
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	b08b      	sub	sp, #44	; 0x2c
 8001960:	9306      	str	r3, [sp, #24]
 8001962:	ab10      	add	r3, sp, #64	; 0x40
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	9003      	str	r0, [sp, #12]
 8001968:	9309      	str	r3, [sp, #36]	; 0x24
    unsigned int font_data=0;
    unsigned short Num,h=0,l=0,i=0;
 800196a:	2300      	movs	r3, #0
{
 800196c:	9104      	str	r1, [sp, #16]
 800196e:	9201      	str	r2, [sp, #4]
    unsigned short Num,h=0,l=0,i=0;
 8001970:	9302      	str	r3, [sp, #8]
    while(*s != '\0')//如果字符串未检验完 继续循环
 8001972:	9b01      	ldr	r3, [sp, #4]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <display_gb1212+0x2c>
           }
           l+=7;//转移到下一个显示位置
           s+=1;//转移到下一个字符
        }
    }
    OLED_CS_Set();    //片选无效
 800197a:	2201      	movs	r2, #1
 800197c:	2102      	movs	r1, #2
 800197e:	484a      	ldr	r0, [pc, #296]	; (8001aa8 <display_gb1212+0x14c>)
 8001980:	f001 f90c 	bl	8002b9c <HAL_GPIO_WritePin>
}
 8001984:	b00b      	add	sp, #44	; 0x2c
 8001986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	OLED_CS_Clr(); //片选有效
 8001988:	2102      	movs	r1, #2
 800198a:	2200      	movs	r2, #0
 800198c:	4846      	ldr	r0, [pc, #280]	; (8001aa8 <display_gb1212+0x14c>)
 800198e:	f001 f905 	bl	8002b9c <HAL_GPIO_WritePin>
        if( *s >=0xa1){  //GB2312编码汉字的 显示
 8001992:	9b01      	ldr	r3, [sp, #4]
 8001994:	7819      	ldrb	r1, [r3, #0]
 8001996:	29a0      	cmp	r1, #160	; 0xa0
 8001998:	d83a      	bhi.n	8001a10 <display_gb1212+0xb4>
           for(Num = 0; Num < len_code6x12; Num++)
 800199a:	4b44      	ldr	r3, [pc, #272]	; (8001aac <display_gb1212+0x150>)
             if(GB2312Code6x12[Num].Head[0] == *s){
 800199c:	200d      	movs	r0, #13
           for(Num = 0; Num < len_code6x12; Num++)
 800199e:	881d      	ldrh	r5, [r3, #0]
 80019a0:	2300      	movs	r3, #0
             if(GB2312Code6x12[Num].Head[0] == *s){
 80019a2:	4e43      	ldr	r6, [pc, #268]	; (8001ab0 <display_gb1212+0x154>)
           for(Num = 0; Num < len_code6x12; Num++)
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4295      	cmp	r5, r2
 80019a8:	d92b      	bls.n	8001a02 <display_gb1212+0xa6>
             if(GB2312Code6x12[Num].Head[0] == *s){
 80019aa:	0002      	movs	r2, r0
 80019ac:	1c5c      	adds	r4, r3, #1
 80019ae:	4362      	muls	r2, r4
 80019b0:	3a0d      	subs	r2, #13
 80019b2:	5cb2      	ldrb	r2, [r6, r2]
 80019b4:	428a      	cmp	r2, r1
 80019b6:	d175      	bne.n	8001aa4 <display_gb1212+0x148>
 80019b8:	4358      	muls	r0, r3
 80019ba:	466b      	mov	r3, sp
 80019bc:	2500      	movs	r5, #0
 80019be:	7a1f      	ldrb	r7, [r3, #8]
 80019c0:	9b03      	ldr	r3, [sp, #12]
 80019c2:	9007      	str	r0, [sp, #28]
 80019c4:	3308      	adds	r3, #8
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	9305      	str	r3, [sp, #20]
                     font_data = GB2312Code6x12[Num].Infor[h];
 80019cc:	9b07      	ldr	r3, [sp, #28]
 80019ce:	4a38      	ldr	r2, [pc, #224]	; (8001ab0 <display_gb1212+0x154>)
 80019d0:	18eb      	adds	r3, r5, r3
 80019d2:	189b      	adds	r3, r3, r2
 80019d4:	785e      	ldrb	r6, [r3, #1]
 80019d6:	9b03      	ldr	r3, [sp, #12]
 80019d8:	19dc      	adds	r4, r3, r7
 80019da:	b2e4      	uxtb	r4, r4
                         if(font_data&0x80){
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	421e      	tst	r6, r3
 80019e0:	d006      	beq.n	80019f0 <display_gb1212+0x94>
                             DrawPixel(x0+i+l,y0+h,fColor);
 80019e2:	9b04      	ldr	r3, [sp, #16]
 80019e4:	9a06      	ldr	r2, [sp, #24]
 80019e6:	1959      	adds	r1, r3, r5
 80019e8:	b2c9      	uxtb	r1, r1
 80019ea:	0020      	movs	r0, r4
 80019ec:	f7ff ff90 	bl	8001910 <DrawPixel>
 80019f0:	3401      	adds	r4, #1
                     for(i=0;i<8;i++){
 80019f2:	9b05      	ldr	r3, [sp, #20]
 80019f4:	b2e4      	uxtb	r4, r4
                         font_data<<=1;
 80019f6:	0076      	lsls	r6, r6, #1
                     for(i=0;i<8;i++){
 80019f8:	429c      	cmp	r4, r3
 80019fa:	d1ef      	bne.n	80019dc <display_gb1212+0x80>
 80019fc:	3501      	adds	r5, #1
                 for(h=0;h<12;h++){ //行数
 80019fe:	2d0c      	cmp	r5, #12
 8001a00:	d1e4      	bne.n	80019cc <display_gb1212+0x70>
           l+=7;//转移到下一个显示位置
 8001a02:	9b02      	ldr	r3, [sp, #8]
 8001a04:	3307      	adds	r3, #7
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	9302      	str	r3, [sp, #8]
           s+=1;//转移到下一个字符
 8001a0a:	9b01      	ldr	r3, [sp, #4]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	e045      	b.n	8001a9c <display_gb1212+0x140>
           for(Num = 0; Num < len_code12x12; Num++)
 8001a10:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <display_gb1212+0x158>)
             if((GB2312Code12x12[Num].Head[0] == *s) && (GB2312Code12x12[Num].Head[1] == *(s+1))){
 8001a12:	4d29      	ldr	r5, [pc, #164]	; (8001ab8 <display_gb1212+0x15c>)
           for(Num = 0; Num < len_code12x12; Num++)
 8001a14:	881c      	ldrh	r4, [r3, #0]
 8001a16:	2300      	movs	r3, #0
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4294      	cmp	r4, r2
 8001a1c:	d938      	bls.n	8001a90 <display_gb1212+0x134>
 8001a1e:	221a      	movs	r2, #26
 8001a20:	435a      	muls	r2, r3
             if((GB2312Code12x12[Num].Head[0] == *s) && (GB2312Code12x12[Num].Head[1] == *(s+1))){
 8001a22:	1950      	adds	r0, r2, r5
 8001a24:	7806      	ldrb	r6, [r0, #0]
 8001a26:	428e      	cmp	r6, r1
 8001a28:	d13a      	bne.n	8001aa0 <display_gb1212+0x144>
 8001a2a:	7846      	ldrb	r6, [r0, #1]
 8001a2c:	9801      	ldr	r0, [sp, #4]
 8001a2e:	7840      	ldrb	r0, [r0, #1]
 8001a30:	4286      	cmp	r6, r0
 8001a32:	d135      	bne.n	8001aa0 <display_gb1212+0x144>
 8001a34:	9b04      	ldr	r3, [sp, #16]
 8001a36:	3202      	adds	r2, #2
 8001a38:	330c      	adds	r3, #12
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	9308      	str	r3, [sp, #32]
 8001a3e:	466b      	mov	r3, sp
 8001a40:	7a1b      	ldrb	r3, [r3, #8]
 8001a42:	18ad      	adds	r5, r5, r2
 8001a44:	9305      	str	r3, [sp, #20]
 8001a46:	9b03      	ldr	r3, [sp, #12]
 8001a48:	9a05      	ldr	r2, [sp, #20]
 8001a4a:	330c      	adds	r3, #12
 8001a4c:	18d3      	adds	r3, r2, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	9e04      	ldr	r6, [sp, #16]
 8001a52:	9307      	str	r3, [sp, #28]
                     font_data = (GB2312Code12x12[Num].Infor[2*h]<<8)|(GB2312Code12x12[Num].Infor[2*h+1]);
 8001a54:	782f      	ldrb	r7, [r5, #0]
 8001a56:	786b      	ldrb	r3, [r5, #1]
 8001a58:	023f      	lsls	r7, r7, #8
 8001a5a:	431f      	orrs	r7, r3
 8001a5c:	9a05      	ldr	r2, [sp, #20]
 8001a5e:	9b03      	ldr	r3, [sp, #12]
 8001a60:	189c      	adds	r4, r3, r2
 8001a62:	b2e4      	uxtb	r4, r4
                         if(font_data&0x8000){
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	021b      	lsls	r3, r3, #8
                             DrawPixel(x0+i+l,y0+h,fColor);
 8001a68:	9a06      	ldr	r2, [sp, #24]
                         if(font_data&0x8000){
 8001a6a:	421f      	tst	r7, r3
 8001a6c:	d100      	bne.n	8001a70 <display_gb1212+0x114>
                        	 DrawPixel(x0+i+l,y0+h,bColor);
 8001a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a70:	0020      	movs	r0, r4
 8001a72:	0031      	movs	r1, r6
 8001a74:	f7ff ff4c 	bl	8001910 <DrawPixel>
 8001a78:	3401      	adds	r4, #1
                     for(i=0;i<12;i++){
 8001a7a:	9b07      	ldr	r3, [sp, #28]
 8001a7c:	b2e4      	uxtb	r4, r4
                         font_data<<=1;
 8001a7e:	007f      	lsls	r7, r7, #1
                     for(i=0;i<12;i++){
 8001a80:	42a3      	cmp	r3, r4
 8001a82:	d1ef      	bne.n	8001a64 <display_gb1212+0x108>
 8001a84:	3601      	adds	r6, #1
                 for(h=0;h<12;h++){ //行数
 8001a86:	9b08      	ldr	r3, [sp, #32]
 8001a88:	b2f6      	uxtb	r6, r6
 8001a8a:	3502      	adds	r5, #2
 8001a8c:	429e      	cmp	r6, r3
 8001a8e:	d1e1      	bne.n	8001a54 <display_gb1212+0xf8>
           l+=12;//转移到下一个显示位置
 8001a90:	9b02      	ldr	r3, [sp, #8]
 8001a92:	330c      	adds	r3, #12
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	9302      	str	r3, [sp, #8]
           s+=2;//转移到下一个字符
 8001a98:	9b01      	ldr	r3, [sp, #4]
 8001a9a:	3302      	adds	r3, #2
           s+=1;//转移到下一个字符
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	e768      	b.n	8001972 <display_gb1212+0x16>
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	e7b9      	b.n	8001a18 <display_gb1212+0xbc>
 8001aa4:	0023      	movs	r3, r4
 8001aa6:	e77d      	b.n	80019a4 <display_gb1212+0x48>
 8001aa8:	48000400 	.word	0x48000400
 8001aac:	08004458 	.word	0x08004458
 8001ab0:	080043ba 	.word	0x080043ba
 8001ab4:	08004456 	.word	0x08004456
 8001ab8:	080040c8 	.word	0x080040c8

08001abc <display_gb1616>:
* 输出  ：无
* 说明  : 需要在GB1616.h里加入要显示的字体 或引用外部flash字库
* 履历  ：V0.02   2017-05-24
*********************************************************/
void display_gb1616(uint8_t x0, uint8_t y0,const char *s, uint16_t fColor,uint16_t bColor)
{
 8001abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abe:	b08b      	sub	sp, #44	; 0x2c
 8001ac0:	9306      	str	r3, [sp, #24]
 8001ac2:	ab10      	add	r3, sp, #64	; 0x40
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	9003      	str	r0, [sp, #12]
 8001ac8:	9307      	str	r3, [sp, #28]
    unsigned int font_data=0;
    unsigned short Num,h=0,l=0,i=0;
 8001aca:	2300      	movs	r3, #0
{
 8001acc:	9104      	str	r1, [sp, #16]
 8001ace:	9201      	str	r2, [sp, #4]
    unsigned short Num,h=0,l=0,i=0;
 8001ad0:	9302      	str	r3, [sp, #8]
    while(*s != '\0')//如果字符串未检验完 继续循环
 8001ad2:	9b01      	ldr	r3, [sp, #4]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <display_gb1616+0x2c>
           }
           l+=9;//转移到下一个显示位置
           s+=1;//转移到下一个字符
        }
    }
    OLED_CS_Set();    //片选无效
 8001ada:	2201      	movs	r2, #1
 8001adc:	2102      	movs	r1, #2
 8001ade:	484b      	ldr	r0, [pc, #300]	; (8001c0c <display_gb1616+0x150>)
 8001ae0:	f001 f85c 	bl	8002b9c <HAL_GPIO_WritePin>
}
 8001ae4:	b00b      	add	sp, #44	; 0x2c
 8001ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	OLED_CS_Clr(); //片选有效
 8001ae8:	2102      	movs	r1, #2
 8001aea:	2200      	movs	r2, #0
 8001aec:	4847      	ldr	r0, [pc, #284]	; (8001c0c <display_gb1616+0x150>)
 8001aee:	f001 f855 	bl	8002b9c <HAL_GPIO_WritePin>
        if( *s >=0xa1){  //GB2312编码汉字的 显示
 8001af2:	9b01      	ldr	r3, [sp, #4]
 8001af4:	7819      	ldrb	r1, [r3, #0]
 8001af6:	29a0      	cmp	r1, #160	; 0xa0
 8001af8:	d83b      	bhi.n	8001b72 <display_gb1616+0xb6>
           for(Num = 0; Num < len_code8x16; Num++)
 8001afa:	4b45      	ldr	r3, [pc, #276]	; (8001c10 <display_gb1616+0x154>)
             if(GB2312Code8x16[Num].Head[0] == *s){
 8001afc:	2011      	movs	r0, #17
           for(Num = 0; Num < len_code8x16; Num++)
 8001afe:	881d      	ldrh	r5, [r3, #0]
 8001b00:	2300      	movs	r3, #0
             if(GB2312Code8x16[Num].Head[0] == *s){
 8001b02:	4e44      	ldr	r6, [pc, #272]	; (8001c14 <display_gb1616+0x158>)
           for(Num = 0; Num < len_code8x16; Num++)
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	4295      	cmp	r5, r2
 8001b08:	d92c      	bls.n	8001b64 <display_gb1616+0xa8>
             if(GB2312Code8x16[Num].Head[0] == *s){
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	1c5c      	adds	r4, r3, #1
 8001b0e:	4362      	muls	r2, r4
 8001b10:	3a11      	subs	r2, #17
 8001b12:	5cb2      	ldrb	r2, [r6, r2]
 8001b14:	428a      	cmp	r2, r1
 8001b16:	d176      	bne.n	8001c06 <display_gb1616+0x14a>
 8001b18:	4358      	muls	r0, r3
 8001b1a:	466b      	mov	r3, sp
 8001b1c:	2500      	movs	r5, #0
 8001b1e:	7a1f      	ldrb	r7, [r3, #8]
 8001b20:	9b03      	ldr	r3, [sp, #12]
 8001b22:	9008      	str	r0, [sp, #32]
 8001b24:	3308      	adds	r3, #8
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	9305      	str	r3, [sp, #20]
                     font_data = GB2312Code8x16[Num].Infor[h];
 8001b2c:	9b08      	ldr	r3, [sp, #32]
 8001b2e:	4a39      	ldr	r2, [pc, #228]	; (8001c14 <display_gb1616+0x158>)
 8001b30:	18eb      	adds	r3, r5, r3
 8001b32:	189b      	adds	r3, r3, r2
 8001b34:	785e      	ldrb	r6, [r3, #1]
 8001b36:	9b03      	ldr	r3, [sp, #12]
 8001b38:	19dc      	adds	r4, r3, r7
 8001b3a:	b2e4      	uxtb	r4, r4
 8001b3c:	9b04      	ldr	r3, [sp, #16]
                                 DrawPixel(x0+i+l,y0+h,fColor);
 8001b3e:	9a06      	ldr	r2, [sp, #24]
 8001b40:	1959      	adds	r1, r3, r5
                         if(font_data&0x80){
 8001b42:	2380      	movs	r3, #128	; 0x80
                                 DrawPixel(x0+i+l,y0+h,fColor);
 8001b44:	b2c9      	uxtb	r1, r1
                         if(font_data&0x80){
 8001b46:	421e      	tst	r6, r3
 8001b48:	d100      	bne.n	8001b4c <display_gb1616+0x90>
                                 DrawPixel(x0+i+l,y0+h,bColor);
 8001b4a:	9a07      	ldr	r2, [sp, #28]
 8001b4c:	0020      	movs	r0, r4
 8001b4e:	f7ff fedf 	bl	8001910 <DrawPixel>
 8001b52:	3401      	adds	r4, #1
                     for(i=0;i<8;i++){
 8001b54:	9b05      	ldr	r3, [sp, #20]
 8001b56:	b2e4      	uxtb	r4, r4
                         font_data<<=1;
 8001b58:	0076      	lsls	r6, r6, #1
                     for(i=0;i<8;i++){
 8001b5a:	429c      	cmp	r4, r3
 8001b5c:	d1ee      	bne.n	8001b3c <display_gb1616+0x80>
 8001b5e:	3501      	adds	r5, #1
                 for(h=0;h<16;h++){ //行数
 8001b60:	2d10      	cmp	r5, #16
 8001b62:	d1e3      	bne.n	8001b2c <display_gb1616+0x70>
           l+=9;//转移到下一个显示位置
 8001b64:	9b02      	ldr	r3, [sp, #8]
 8001b66:	3309      	adds	r3, #9
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	9302      	str	r3, [sp, #8]
           s+=1;//转移到下一个字符
 8001b6c:	9b01      	ldr	r3, [sp, #4]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	e045      	b.n	8001bfe <display_gb1616+0x142>
           for(Num = 0; Num < len_code16x16; Num++)
 8001b72:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <display_gb1616+0x15c>)
             if((GB2312Code16x16[Num].Head[0] == *s) && (GB2312Code16x16[Num].Head[1] == *(s+1))){
 8001b74:	4d29      	ldr	r5, [pc, #164]	; (8001c1c <display_gb1616+0x160>)
           for(Num = 0; Num < len_code16x16; Num++)
 8001b76:	881c      	ldrh	r4, [r3, #0]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4294      	cmp	r4, r2
 8001b7e:	d938      	bls.n	8001bf2 <display_gb1616+0x136>
 8001b80:	2222      	movs	r2, #34	; 0x22
 8001b82:	435a      	muls	r2, r3
             if((GB2312Code16x16[Num].Head[0] == *s) && (GB2312Code16x16[Num].Head[1] == *(s+1))){
 8001b84:	1950      	adds	r0, r2, r5
 8001b86:	7806      	ldrb	r6, [r0, #0]
 8001b88:	428e      	cmp	r6, r1
 8001b8a:	d13a      	bne.n	8001c02 <display_gb1616+0x146>
 8001b8c:	7846      	ldrb	r6, [r0, #1]
 8001b8e:	9801      	ldr	r0, [sp, #4]
 8001b90:	7840      	ldrb	r0, [r0, #1]
 8001b92:	4286      	cmp	r6, r0
 8001b94:	d135      	bne.n	8001c02 <display_gb1616+0x146>
 8001b96:	9b04      	ldr	r3, [sp, #16]
 8001b98:	3202      	adds	r2, #2
 8001b9a:	3310      	adds	r3, #16
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8001ba0:	466b      	mov	r3, sp
 8001ba2:	7a1b      	ldrb	r3, [r3, #8]
 8001ba4:	18ad      	adds	r5, r5, r2
 8001ba6:	9305      	str	r3, [sp, #20]
 8001ba8:	9b03      	ldr	r3, [sp, #12]
 8001baa:	9a05      	ldr	r2, [sp, #20]
 8001bac:	3310      	adds	r3, #16
 8001bae:	18d3      	adds	r3, r2, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	9e04      	ldr	r6, [sp, #16]
 8001bb4:	9308      	str	r3, [sp, #32]
                     font_data = (GB2312Code16x16[Num].Infor[2*h]<<8)|(GB2312Code16x16[Num].Infor[2*h+1]);
 8001bb6:	782f      	ldrb	r7, [r5, #0]
 8001bb8:	786b      	ldrb	r3, [r5, #1]
 8001bba:	023f      	lsls	r7, r7, #8
 8001bbc:	431f      	orrs	r7, r3
 8001bbe:	9a05      	ldr	r2, [sp, #20]
 8001bc0:	9b03      	ldr	r3, [sp, #12]
 8001bc2:	189c      	adds	r4, r3, r2
 8001bc4:	b2e4      	uxtb	r4, r4
                         if(font_data&0x8000){
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	021b      	lsls	r3, r3, #8
                                 DrawPixel(x0+i+l,y0+h,fColor);
 8001bca:	9a06      	ldr	r2, [sp, #24]
                         if(font_data&0x8000){
 8001bcc:	421f      	tst	r7, r3
 8001bce:	d100      	bne.n	8001bd2 <display_gb1616+0x116>
                                 DrawPixel(x0+i+l,y0+h,bColor);
 8001bd0:	9a07      	ldr	r2, [sp, #28]
 8001bd2:	0020      	movs	r0, r4
 8001bd4:	0031      	movs	r1, r6
 8001bd6:	f7ff fe9b 	bl	8001910 <DrawPixel>
 8001bda:	3401      	adds	r4, #1
                     for(i=0;i<16;i++){
 8001bdc:	9b08      	ldr	r3, [sp, #32]
 8001bde:	b2e4      	uxtb	r4, r4
                         font_data<<=1;
 8001be0:	007f      	lsls	r7, r7, #1
                     for(i=0;i<16;i++){
 8001be2:	42a3      	cmp	r3, r4
 8001be4:	d1ef      	bne.n	8001bc6 <display_gb1616+0x10a>
 8001be6:	3601      	adds	r6, #1
                 for(h=0;h<16;h++){ //行数
 8001be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bea:	b2f6      	uxtb	r6, r6
 8001bec:	3502      	adds	r5, #2
 8001bee:	429e      	cmp	r6, r3
 8001bf0:	d1e1      	bne.n	8001bb6 <display_gb1616+0xfa>
           l+=17;//转移到下一个显示位置
 8001bf2:	9b02      	ldr	r3, [sp, #8]
 8001bf4:	3311      	adds	r3, #17
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	9302      	str	r3, [sp, #8]
           s+=2;//转移到下一个字符
 8001bfa:	9b01      	ldr	r3, [sp, #4]
 8001bfc:	3302      	adds	r3, #2
           s+=1;//转移到下一个字符
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	e767      	b.n	8001ad2 <display_gb1616+0x16>
 8001c02:	3301      	adds	r3, #1
 8001c04:	e7b9      	b.n	8001b7a <display_gb1616+0xbe>
 8001c06:	0023      	movs	r3, r4
 8001c08:	e77c      	b.n	8001b04 <display_gb1616+0x48>
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	48000400 	.word	0x48000400
 8001c10:	08004826 	.word	0x08004826
 8001c14:	08004702 	.word	0x08004702
 8001c18:	08004824 	.word	0x08004824
 8001c1c:	0800445a 	.word	0x0800445a

08001c20 <disp_clear_screen>:
      函数说明：LCD清屏函数
      入口数据：无
      返回值：  无
******************************************************************************/
void disp_clear_screen(uint16_t color)
{
 8001c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i,j;
	OLED_CS_Clr(); //片选有效
 8001c22:	2200      	movs	r2, #0
{
 8001c24:	0006      	movs	r6, r0
	OLED_CS_Clr(); //片选有效
 8001c26:	2102      	movs	r1, #2
 8001c28:	4812      	ldr	r0, [pc, #72]	; (8001c74 <disp_clear_screen+0x54>)
 8001c2a:	f000 ffb7 	bl	8002b9c <HAL_GPIO_WritePin>
	LCD_Address_Set(0,0,LCD_W-1,LCD_H-1);
 8001c2e:	2100      	movs	r1, #0
 8001c30:	234f      	movs	r3, #79	; 0x4f
 8001c32:	0008      	movs	r0, r1
 8001c34:	229f      	movs	r2, #159	; 0x9f
 8001c36:	f7ff fe0f 	bl	8001858 <LCD_Address_Set>
	OLED_DC_Set(); //写数据
 8001c3a:	2090      	movs	r0, #144	; 0x90
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2140      	movs	r1, #64	; 0x40
 8001c40:	05c0      	lsls	r0, r0, #23
 8001c42:	f000 ffab 	bl	8002b9c <HAL_GPIO_WritePin>
	for(i=0;i<LCD_W;i++){
		for(j=0;j<LCD_H;j++){
			LCD_Writ_Bus(color>>8);
 8001c46:	25a0      	movs	r5, #160	; 0xa0
 8001c48:	0a37      	lsrs	r7, r6, #8
{
 8001c4a:	2450      	movs	r4, #80	; 0x50
			LCD_Writ_Bus(color>>8);
 8001c4c:	0038      	movs	r0, r7
 8001c4e:	3c01      	subs	r4, #1
 8001c50:	f7ff fdc6 	bl	80017e0 <LCD_Writ_Bus>
 8001c54:	b2e4      	uxtb	r4, r4
			LCD_Writ_Bus(color);;
 8001c56:	b2f0      	uxtb	r0, r6
 8001c58:	f7ff fdc2 	bl	80017e0 <LCD_Writ_Bus>
		for(j=0;j<LCD_H;j++){
 8001c5c:	2c00      	cmp	r4, #0
 8001c5e:	d1f5      	bne.n	8001c4c <disp_clear_screen+0x2c>
 8001c60:	3d01      	subs	r5, #1
 8001c62:	b2ed      	uxtb	r5, r5
	for(i=0;i<LCD_W;i++){
 8001c64:	2d00      	cmp	r5, #0
 8001c66:	d1f0      	bne.n	8001c4a <disp_clear_screen+0x2a>
		}
	}
	OLED_CS_Set();    //片选无效
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	4801      	ldr	r0, [pc, #4]	; (8001c74 <disp_clear_screen+0x54>)
 8001c6e:	f000 ff95 	bl	8002b9c <HAL_GPIO_WritePin>
}
 8001c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c74:	48000400 	.word	0x48000400

08001c78 <disp_image_3232>:
      函数说明：显示图标
      入口数据：无
      返回值：  无
******************************************************************************/
void disp_image_3232(uint8_t x,uint8_t y,const uint8_t* buff, uint16_t color,uint16_t Bcolor)
{
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7a:	0005      	movs	r5, r0
 8001c7c:	000e      	movs	r6, r1
 8001c7e:	b087      	sub	sp, #28
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	ab0c      	add	r3, sp, #48	; 0x30
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	0014      	movs	r4, r2
	uint8_t i,j,h;
	uint8_t font_data;
	OLED_CS_Clr(); //片选有效
 8001c88:	2102      	movs	r1, #2
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4821      	ldr	r0, [pc, #132]	; (8001d14 <disp_image_3232+0x9c>)
{
 8001c8e:	9302      	str	r3, [sp, #8]
	OLED_CS_Clr(); //片选有效
 8001c90:	f000 ff84 	bl	8002b9c <HAL_GPIO_WritePin>
	LCD_Address_Set(x,y,x+32-1,y+32-1);
 8001c94:	0033      	movs	r3, r6
 8001c96:	002a      	movs	r2, r5
 8001c98:	331f      	adds	r3, #31
 8001c9a:	321f      	adds	r2, #31
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	0031      	movs	r1, r6
 8001ca2:	0028      	movs	r0, r5
 8001ca4:	f7ff fdd8 	bl	8001858 <LCD_Address_Set>
	OLED_DC_Set(); //写数据
 8001ca8:	2090      	movs	r0, #144	; 0x90
 8001caa:	2201      	movs	r2, #1
 8001cac:	2140      	movs	r1, #64	; 0x40
 8001cae:	05c0      	lsls	r0, r0, #23
 8001cb0:	f000 ff74 	bl	8002b9c <HAL_GPIO_WritePin>
			  for(i=0;i<8;i++){
			    if(font_data&0x80){
			    	LCD_Writ_Bus(color>>8);
			    	LCD_Writ_Bus(color);
			    }else{
			    	LCD_Writ_Bus(Bcolor>>8);
 8001cb4:	9b02      	ldr	r3, [sp, #8]
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	9305      	str	r3, [sp, #20]
			    	LCD_Writ_Bus(color>>8);
 8001cba:	9b01      	ldr	r3, [sp, #4]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	9304      	str	r3, [sp, #16]
 8001cc0:	0023      	movs	r3, r4
 8001cc2:	3380      	adds	r3, #128	; 0x80
 8001cc4:	9303      	str	r3, [sp, #12]
{
 8001cc6:	2700      	movs	r7, #0
			  font_data = buff[h*4+j];
 8001cc8:	2508      	movs	r5, #8
 8001cca:	5de6      	ldrb	r6, [r4, r7]
			    if(font_data&0x80){
 8001ccc:	b273      	sxtb	r3, r6
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da1a      	bge.n	8001d08 <disp_image_3232+0x90>
			    	LCD_Writ_Bus(color>>8);
 8001cd2:	9804      	ldr	r0, [sp, #16]
 8001cd4:	f7ff fd84 	bl	80017e0 <LCD_Writ_Bus>
			    	LCD_Writ_Bus(color);
 8001cd8:	466b      	mov	r3, sp
 8001cda:	7918      	ldrb	r0, [r3, #4]
 8001cdc:	3d01      	subs	r5, #1
			    	LCD_Writ_Bus(Bcolor);
			    }
			    font_data<<=1;
 8001cde:	0076      	lsls	r6, r6, #1
 8001ce0:	b2ed      	uxtb	r5, r5
			    	LCD_Writ_Bus(Bcolor);
 8001ce2:	f7ff fd7d 	bl	80017e0 <LCD_Writ_Bus>
			    font_data<<=1;
 8001ce6:	b2f6      	uxtb	r6, r6
			  for(i=0;i<8;i++){
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	d1ef      	bne.n	8001ccc <disp_image_3232+0x54>
 8001cec:	3701      	adds	r7, #1
		for(j=0;j<4;j++){
 8001cee:	2f04      	cmp	r7, #4
 8001cf0:	d1ea      	bne.n	8001cc8 <disp_image_3232+0x50>
	for(h=0;h<32;h++){ //行数
 8001cf2:	9b03      	ldr	r3, [sp, #12]
 8001cf4:	3404      	adds	r4, #4
 8001cf6:	42a3      	cmp	r3, r4
 8001cf8:	d1e5      	bne.n	8001cc6 <disp_image_3232+0x4e>
			 }
	   }
	}
	OLED_CS_Set();    //片选无效
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2102      	movs	r1, #2
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <disp_image_3232+0x9c>)
 8001d00:	f000 ff4c 	bl	8002b9c <HAL_GPIO_WritePin>
}
 8001d04:	b007      	add	sp, #28
 8001d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
			    	LCD_Writ_Bus(Bcolor>>8);
 8001d08:	9805      	ldr	r0, [sp, #20]
 8001d0a:	f7ff fd69 	bl	80017e0 <LCD_Writ_Bus>
			    	LCD_Writ_Bus(Bcolor);
 8001d0e:	466b      	mov	r3, sp
 8001d10:	7a18      	ldrb	r0, [r3, #8]
 8001d12:	e7e3      	b.n	8001cdc <disp_image_3232+0x64>
 8001d14:	48000400 	.word	0x48000400

08001d18 <disp_image_8040>:
      函数说明：显示图标
      入口数据：无
      返回值：  无
******************************************************************************/
void disp_image_8040(uint8_t x,uint8_t y,const uint8_t* buff, uint16_t color,uint16_t Bcolor)
{
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1a:	0005      	movs	r5, r0
 8001d1c:	000e      	movs	r6, r1
 8001d1e:	b087      	sub	sp, #28
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	ab0c      	add	r3, sp, #48	; 0x30
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	0014      	movs	r4, r2
	uint8_t i,j,h;
	uint8_t font_data;
	OLED_CS_Clr(); //片选有效
 8001d28:	2102      	movs	r1, #2
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4822      	ldr	r0, [pc, #136]	; (8001db8 <disp_image_8040+0xa0>)
{
 8001d2e:	9302      	str	r3, [sp, #8]
	OLED_CS_Clr(); //片选有效
 8001d30:	f000 ff34 	bl	8002b9c <HAL_GPIO_WritePin>
	LCD_Address_Set(x,y,x+80-1,y+40-1);
 8001d34:	0033      	movs	r3, r6
 8001d36:	002a      	movs	r2, r5
 8001d38:	3327      	adds	r3, #39	; 0x27
 8001d3a:	324f      	adds	r2, #79	; 0x4f
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	0031      	movs	r1, r6
 8001d42:	0028      	movs	r0, r5
 8001d44:	f7ff fd88 	bl	8001858 <LCD_Address_Set>
	OLED_DC_Set(); //写数据
 8001d48:	2090      	movs	r0, #144	; 0x90
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2140      	movs	r1, #64	; 0x40
 8001d4e:	05c0      	lsls	r0, r0, #23
 8001d50:	f000 ff24 	bl	8002b9c <HAL_GPIO_WritePin>
			for(i=0;i<8;i++){
			   if(font_data&0x80){
				   LCD_Writ_Bus(color>>8);
				   LCD_Writ_Bus(color);
		       }else{
				   LCD_Writ_Bus(Bcolor>>8);
 8001d54:	9b02      	ldr	r3, [sp, #8]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	9305      	str	r3, [sp, #20]
				   LCD_Writ_Bus(color>>8);
 8001d5a:	9b01      	ldr	r3, [sp, #4]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	9304      	str	r3, [sp, #16]
 8001d60:	0023      	movs	r3, r4
 8001d62:	3391      	adds	r3, #145	; 0x91
 8001d64:	33ff      	adds	r3, #255	; 0xff
 8001d66:	9303      	str	r3, [sp, #12]
{
 8001d68:	2700      	movs	r7, #0
			font_data = buff[h*10+j];
 8001d6a:	2508      	movs	r5, #8
 8001d6c:	5de6      	ldrb	r6, [r4, r7]
			   if(font_data&0x80){
 8001d6e:	b273      	sxtb	r3, r6
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da1a      	bge.n	8001daa <disp_image_8040+0x92>
				   LCD_Writ_Bus(color>>8);
 8001d74:	9804      	ldr	r0, [sp, #16]
 8001d76:	f7ff fd33 	bl	80017e0 <LCD_Writ_Bus>
				   LCD_Writ_Bus(color);
 8001d7a:	466b      	mov	r3, sp
 8001d7c:	7918      	ldrb	r0, [r3, #4]
 8001d7e:	3d01      	subs	r5, #1
				   LCD_Writ_Bus(Bcolor);
			   }
			   font_data<<=1;
 8001d80:	0076      	lsls	r6, r6, #1
 8001d82:	b2ed      	uxtb	r5, r5
				   LCD_Writ_Bus(Bcolor);
 8001d84:	f7ff fd2c 	bl	80017e0 <LCD_Writ_Bus>
			   font_data<<=1;
 8001d88:	b2f6      	uxtb	r6, r6
			for(i=0;i<8;i++){
 8001d8a:	2d00      	cmp	r5, #0
 8001d8c:	d1ef      	bne.n	8001d6e <disp_image_8040+0x56>
 8001d8e:	3701      	adds	r7, #1
		for(j=0;j<10;j++){
 8001d90:	2f0a      	cmp	r7, #10
 8001d92:	d1ea      	bne.n	8001d6a <disp_image_8040+0x52>
	for(h=0;h<40;h++){ //行数
 8001d94:	9b03      	ldr	r3, [sp, #12]
 8001d96:	340a      	adds	r4, #10
 8001d98:	42a3      	cmp	r3, r4
 8001d9a:	d1e5      	bne.n	8001d68 <disp_image_8040+0x50>
	       }
	    }
	}
	OLED_CS_Set();    //片选无效
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2102      	movs	r1, #2
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <disp_image_8040+0xa0>)
 8001da2:	f000 fefb 	bl	8002b9c <HAL_GPIO_WritePin>
}
 8001da6:	b007      	add	sp, #28
 8001da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				   LCD_Writ_Bus(Bcolor>>8);
 8001daa:	9805      	ldr	r0, [sp, #20]
 8001dac:	f7ff fd18 	bl	80017e0 <LCD_Writ_Bus>
				   LCD_Writ_Bus(Bcolor);
 8001db0:	466b      	mov	r3, sp
 8001db2:	7a18      	ldrb	r0, [r3, #8]
 8001db4:	e7e3      	b.n	8001d7e <disp_image_8040+0x66>
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	48000400 	.word	0x48000400

08001dbc <disp_image_10080>:
      函数说明：显示图标
      入口数据：无
      返回值：  无
******************************************************************************/
void disp_image_10080(uint8_t x,uint8_t y,const uint8_t* buff, uint16_t color,uint16_t Bcolor)
{
 8001dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbe:	0005      	movs	r5, r0
 8001dc0:	000e      	movs	r6, r1
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	ab0c      	add	r3, sp, #48	; 0x30
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	0014      	movs	r4, r2
	uint8_t i,j,h;
	uint8_t font_data;
	OLED_CS_Clr(); //片选有效
 8001dcc:	2102      	movs	r1, #2
 8001dce:	2200      	movs	r2, #0
 8001dd0:	4822      	ldr	r0, [pc, #136]	; (8001e5c <disp_image_10080+0xa0>)
{
 8001dd2:	9302      	str	r3, [sp, #8]
	OLED_CS_Clr(); //片选有效
 8001dd4:	f000 fee2 	bl	8002b9c <HAL_GPIO_WritePin>
	LCD_Address_Set(x,y,x+96-1,y+80-1);
 8001dd8:	0033      	movs	r3, r6
 8001dda:	002a      	movs	r2, r5
 8001ddc:	334f      	adds	r3, #79	; 0x4f
 8001dde:	325f      	adds	r2, #95	; 0x5f
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	0031      	movs	r1, r6
 8001de6:	0028      	movs	r0, r5
 8001de8:	f7ff fd36 	bl	8001858 <LCD_Address_Set>
	OLED_DC_Set(); //写数据
 8001dec:	2090      	movs	r0, #144	; 0x90
 8001dee:	2201      	movs	r2, #1
 8001df0:	2140      	movs	r1, #64	; 0x40
 8001df2:	05c0      	lsls	r0, r0, #23
 8001df4:	f000 fed2 	bl	8002b9c <HAL_GPIO_WritePin>
			for(i=0;i<8;i++){
			   if(font_data&0x80){
				   LCD_Writ_Bus(color>>8);
				   LCD_Writ_Bus(color);
		       }else{
				   LCD_Writ_Bus(Bcolor>>8);
 8001df8:	9b02      	ldr	r3, [sp, #8]
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	9305      	str	r3, [sp, #20]
				   LCD_Writ_Bus(color>>8);
 8001dfe:	9b01      	ldr	r3, [sp, #4]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	9304      	str	r3, [sp, #16]
 8001e04:	23f0      	movs	r3, #240	; 0xf0
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	18e3      	adds	r3, r4, r3
 8001e0a:	9303      	str	r3, [sp, #12]
{
 8001e0c:	2700      	movs	r7, #0
			font_data = buff[h*12+j];
 8001e0e:	2508      	movs	r5, #8
 8001e10:	5de6      	ldrb	r6, [r4, r7]
			   if(font_data&0x80){
 8001e12:	b273      	sxtb	r3, r6
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	da1a      	bge.n	8001e4e <disp_image_10080+0x92>
				   LCD_Writ_Bus(color>>8);
 8001e18:	9804      	ldr	r0, [sp, #16]
 8001e1a:	f7ff fce1 	bl	80017e0 <LCD_Writ_Bus>
				   LCD_Writ_Bus(color);
 8001e1e:	466b      	mov	r3, sp
 8001e20:	7918      	ldrb	r0, [r3, #4]
 8001e22:	3d01      	subs	r5, #1
				   LCD_Writ_Bus(Bcolor);
			   }
			   font_data<<=1;
 8001e24:	0076      	lsls	r6, r6, #1
 8001e26:	b2ed      	uxtb	r5, r5
				   LCD_Writ_Bus(Bcolor);
 8001e28:	f7ff fcda 	bl	80017e0 <LCD_Writ_Bus>
			   font_data<<=1;
 8001e2c:	b2f6      	uxtb	r6, r6
			for(i=0;i<8;i++){
 8001e2e:	2d00      	cmp	r5, #0
 8001e30:	d1ef      	bne.n	8001e12 <disp_image_10080+0x56>
 8001e32:	3701      	adds	r7, #1
		for(j=0;j<12;j++){
 8001e34:	2f0c      	cmp	r7, #12
 8001e36:	d1ea      	bne.n	8001e0e <disp_image_10080+0x52>
	for(h=0;h<80;h++){ //行数
 8001e38:	9b03      	ldr	r3, [sp, #12]
 8001e3a:	340c      	adds	r4, #12
 8001e3c:	42a3      	cmp	r3, r4
 8001e3e:	d1e5      	bne.n	8001e0c <disp_image_10080+0x50>
	       }
	    }
	}
	OLED_CS_Set();    //片选无效
 8001e40:	2201      	movs	r2, #1
 8001e42:	2102      	movs	r1, #2
 8001e44:	4805      	ldr	r0, [pc, #20]	; (8001e5c <disp_image_10080+0xa0>)
 8001e46:	f000 fea9 	bl	8002b9c <HAL_GPIO_WritePin>
}
 8001e4a:	b007      	add	sp, #28
 8001e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				   LCD_Writ_Bus(Bcolor>>8);
 8001e4e:	9805      	ldr	r0, [sp, #20]
 8001e50:	f7ff fcc6 	bl	80017e0 <LCD_Writ_Bus>
				   LCD_Writ_Bus(Bcolor);
 8001e54:	466b      	mov	r3, sp
 8001e56:	7a18      	ldrb	r0, [r3, #8]
 8001e58:	e7e3      	b.n	8001e22 <disp_image_10080+0x66>
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	48000400 	.word	0x48000400

08001e60 <disp_rectangle>:
      函数说明：显示矩形
      入口数据：无
      返回值：  无
******************************************************************************/
void disp_rectangle(uint8_t x,uint8_t y,uint8_t x_len,uint8_t y_len, uint16_t color)
{
 8001e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e62:	0017      	movs	r7, r2
 8001e64:	001e      	movs	r6, r3
 8001e66:	000d      	movs	r5, r1
 8001e68:	0004      	movs	r4, r0
 8001e6a:	ab08      	add	r3, sp, #32
 8001e6c:	881b      	ldrh	r3, [r3, #0]
	uint8_t j,h;
	OLED_CS_Clr(); //片选有效
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2102      	movs	r1, #2
 8001e72:	4817      	ldr	r0, [pc, #92]	; (8001ed0 <disp_rectangle+0x70>)
{
 8001e74:	9300      	str	r3, [sp, #0]
	OLED_CS_Clr(); //片选有效
 8001e76:	f000 fe91 	bl	8002b9c <HAL_GPIO_WritePin>
	LCD_Address_Set(x,y,x+x_len-1,y+y_len-1);
 8001e7a:	1e73      	subs	r3, r6, #1
 8001e7c:	1e7a      	subs	r2, r7, #1
 8001e7e:	18eb      	adds	r3, r5, r3
 8001e80:	18a2      	adds	r2, r4, r2
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	0029      	movs	r1, r5
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	0020      	movs	r0, r4
 8001e8a:	f7ff fce5 	bl	8001858 <LCD_Address_Set>
	OLED_DC_Set(); //写数据
 8001e8e:	2090      	movs	r0, #144	; 0x90
	for(h=0;h<y_len;h++){ //行数
 8001e90:	2500      	movs	r5, #0
	OLED_DC_Set(); //写数据
 8001e92:	2201      	movs	r2, #1
 8001e94:	2140      	movs	r1, #64	; 0x40
 8001e96:	05c0      	lsls	r0, r0, #23
 8001e98:	f000 fe80 	bl	8002b9c <HAL_GPIO_WritePin>
		for(j=0;j<x_len;j++){
			LCD_Writ_Bus(color>>8);
 8001e9c:	9b00      	ldr	r3, [sp, #0]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	9301      	str	r3, [sp, #4]
	for(h=0;h<y_len;h++){ //行数
 8001ea2:	42b5      	cmp	r5, r6
 8001ea4:	d00d      	beq.n	8001ec2 <disp_rectangle+0x62>
 8001ea6:	2400      	movs	r4, #0
 8001ea8:	e007      	b.n	8001eba <disp_rectangle+0x5a>
			LCD_Writ_Bus(color>>8);
 8001eaa:	9801      	ldr	r0, [sp, #4]
 8001eac:	f7ff fc98 	bl	80017e0 <LCD_Writ_Bus>
			LCD_Writ_Bus(color);
 8001eb0:	466b      	mov	r3, sp
 8001eb2:	7818      	ldrb	r0, [r3, #0]
 8001eb4:	f7ff fc94 	bl	80017e0 <LCD_Writ_Bus>
 8001eb8:	3401      	adds	r4, #1
		for(j=0;j<x_len;j++){
 8001eba:	42bc      	cmp	r4, r7
 8001ebc:	d1f5      	bne.n	8001eaa <disp_rectangle+0x4a>
 8001ebe:	3501      	adds	r5, #1
 8001ec0:	e7ef      	b.n	8001ea2 <disp_rectangle+0x42>
	    }
	}
	OLED_CS_Set();    //片选无效
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <disp_rectangle+0x70>)
 8001ec8:	f000 fe68 	bl	8002b9c <HAL_GPIO_WritePin>
}
 8001ecc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	48000400 	.word	0x48000400

08001ed4 <lcd_init>:
      函数说明：LCD初始化函数
      入口数据：无
      返回值：  无
******************************************************************************/
void lcd_init(void)
{
 8001ed4:	b510      	push	{r4, lr}
    //************* Start Initial Sequence **********//
	OLED_CS_Clr();
 8001ed6:	4c66      	ldr	r4, [pc, #408]	; (8002070 <lcd_init+0x19c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2102      	movs	r1, #2
 8001edc:	0020      	movs	r0, r4
 8001ede:	f000 fe5d 	bl	8002b9c <HAL_GPIO_WritePin>
    LCD_WR_REG(0x36);
 8001ee2:	2036      	movs	r0, #54	; 0x36
 8001ee4:	f7ff fc9d 	bl	8001822 <LCD_WR_REG>
    LCD_WR_DATA8(HORIZONTAL_DATA);
 8001ee8:	2078      	movs	r0, #120	; 0x78
 8001eea:	f7ff fd2a 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_REG(0x3A);
 8001eee:	203a      	movs	r0, #58	; 0x3a
 8001ef0:	f7ff fc97 	bl	8001822 <LCD_WR_REG>
    LCD_WR_DATA8(0x05);
 8001ef4:	2005      	movs	r0, #5
 8001ef6:	f7ff fd24 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_REG(0xB2);
 8001efa:	20b2      	movs	r0, #178	; 0xb2
 8001efc:	f7ff fc91 	bl	8001822 <LCD_WR_REG>
    LCD_WR_DATA8(0x0C);
 8001f00:	200c      	movs	r0, #12
 8001f02:	f7ff fd1e 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x0C);
 8001f06:	200c      	movs	r0, #12
 8001f08:	f7ff fd1b 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x00);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff fd18 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x33);
 8001f12:	2033      	movs	r0, #51	; 0x33
 8001f14:	f7ff fd15 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x33);
 8001f18:	2033      	movs	r0, #51	; 0x33
 8001f1a:	f7ff fd12 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_REG(0xB7);
 8001f1e:	20b7      	movs	r0, #183	; 0xb7
 8001f20:	f7ff fc7f 	bl	8001822 <LCD_WR_REG>
    LCD_WR_DATA8(0x35);
 8001f24:	2035      	movs	r0, #53	; 0x35
 8001f26:	f7ff fd0c 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_REG(0xBB);
 8001f2a:	20bb      	movs	r0, #187	; 0xbb
 8001f2c:	f7ff fc79 	bl	8001822 <LCD_WR_REG>
    LCD_WR_DATA8(0x19);
 8001f30:	2019      	movs	r0, #25
 8001f32:	f7ff fd06 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_REG(0xC0);
 8001f36:	20c0      	movs	r0, #192	; 0xc0
 8001f38:	f7ff fc73 	bl	8001822 <LCD_WR_REG>
    LCD_WR_DATA8(0x2C);
 8001f3c:	202c      	movs	r0, #44	; 0x2c
 8001f3e:	f7ff fd00 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_REG(0xC2);
 8001f42:	20c2      	movs	r0, #194	; 0xc2
 8001f44:	f7ff fc6d 	bl	8001822 <LCD_WR_REG>
    LCD_WR_DATA8(0x01);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f7ff fcfa 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_REG(0xC3);
 8001f4e:	20c3      	movs	r0, #195	; 0xc3
 8001f50:	f7ff fc67 	bl	8001822 <LCD_WR_REG>
    LCD_WR_DATA8(0x12);
 8001f54:	2012      	movs	r0, #18
 8001f56:	f7ff fcf4 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_REG(0xC4);
 8001f5a:	20c4      	movs	r0, #196	; 0xc4
 8001f5c:	f7ff fc61 	bl	8001822 <LCD_WR_REG>
    LCD_WR_DATA8(0x20);
 8001f60:	2020      	movs	r0, #32
 8001f62:	f7ff fcee 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_REG(0xC6);
 8001f66:	20c6      	movs	r0, #198	; 0xc6
 8001f68:	f7ff fc5b 	bl	8001822 <LCD_WR_REG>
    LCD_WR_DATA8(0x0F);
 8001f6c:	200f      	movs	r0, #15
 8001f6e:	f7ff fce8 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_REG(0xD0);
 8001f72:	20d0      	movs	r0, #208	; 0xd0
 8001f74:	f7ff fc55 	bl	8001822 <LCD_WR_REG>
    LCD_WR_DATA8(0xA4);
 8001f78:	20a4      	movs	r0, #164	; 0xa4
 8001f7a:	f7ff fce2 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0xA1);
 8001f7e:	20a1      	movs	r0, #161	; 0xa1
 8001f80:	f7ff fcdf 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_REG(0xE0);
 8001f84:	20e0      	movs	r0, #224	; 0xe0
 8001f86:	f7ff fc4c 	bl	8001822 <LCD_WR_REG>
    LCD_WR_DATA8(0xD0);
 8001f8a:	20d0      	movs	r0, #208	; 0xd0
 8001f8c:	f7ff fcd9 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x04);
 8001f90:	2004      	movs	r0, #4
 8001f92:	f7ff fcd6 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x0D);
 8001f96:	200d      	movs	r0, #13
 8001f98:	f7ff fcd3 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x11);
 8001f9c:	2011      	movs	r0, #17
 8001f9e:	f7ff fcd0 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x13);
 8001fa2:	2013      	movs	r0, #19
 8001fa4:	f7ff fccd 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x2B);
 8001fa8:	202b      	movs	r0, #43	; 0x2b
 8001faa:	f7ff fcca 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x3F);
 8001fae:	203f      	movs	r0, #63	; 0x3f
 8001fb0:	f7ff fcc7 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x54);
 8001fb4:	2054      	movs	r0, #84	; 0x54
 8001fb6:	f7ff fcc4 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x4C);
 8001fba:	204c      	movs	r0, #76	; 0x4c
 8001fbc:	f7ff fcc1 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x18);
 8001fc0:	2018      	movs	r0, #24
 8001fc2:	f7ff fcbe 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x0D);
 8001fc6:	200d      	movs	r0, #13
 8001fc8:	f7ff fcbb 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x0B);
 8001fcc:	200b      	movs	r0, #11
 8001fce:	f7ff fcb8 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x1F);
 8001fd2:	201f      	movs	r0, #31
 8001fd4:	f7ff fcb5 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x23);
 8001fd8:	2023      	movs	r0, #35	; 0x23
 8001fda:	f7ff fcb2 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_REG(0xE1);
 8001fde:	20e1      	movs	r0, #225	; 0xe1
 8001fe0:	f7ff fc1f 	bl	8001822 <LCD_WR_REG>
    LCD_WR_DATA8(0xD0);
 8001fe4:	20d0      	movs	r0, #208	; 0xd0
 8001fe6:	f7ff fcac 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x04);
 8001fea:	2004      	movs	r0, #4
 8001fec:	f7ff fca9 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x0C);
 8001ff0:	200c      	movs	r0, #12
 8001ff2:	f7ff fca6 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x11);
 8001ff6:	2011      	movs	r0, #17
 8001ff8:	f7ff fca3 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x13);
 8001ffc:	2013      	movs	r0, #19
 8001ffe:	f7ff fca0 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x2C);
 8002002:	202c      	movs	r0, #44	; 0x2c
 8002004:	f7ff fc9d 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x3F);
 8002008:	203f      	movs	r0, #63	; 0x3f
 800200a:	f7ff fc9a 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x44);
 800200e:	2044      	movs	r0, #68	; 0x44
 8002010:	f7ff fc97 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x51);
 8002014:	2051      	movs	r0, #81	; 0x51
 8002016:	f7ff fc94 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x2F);
 800201a:	202f      	movs	r0, #47	; 0x2f
 800201c:	f7ff fc91 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x1F);
 8002020:	201f      	movs	r0, #31
 8002022:	f7ff fc8e 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x1F);
 8002026:	201f      	movs	r0, #31
 8002028:	f7ff fc8b 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x20);
 800202c:	2020      	movs	r0, #32
 800202e:	f7ff fc88 	bl	8001942 <LCD_WR_DATA8>
    LCD_WR_DATA8(0x23);
 8002032:	2023      	movs	r0, #35	; 0x23
 8002034:	f7ff fc85 	bl	8001942 <LCD_WR_DATA8>
    OLED_CS_Set();
 8002038:	2201      	movs	r2, #1
 800203a:	2102      	movs	r1, #2
 800203c:	0020      	movs	r0, r4
 800203e:	f000 fdad 	bl	8002b9c <HAL_GPIO_WritePin>
    disp_clear_screen(BLACK);
 8002042:	2000      	movs	r0, #0
 8002044:	f7ff fdec 	bl	8001c20 <disp_clear_screen>
    OLED_CS_Clr();
 8002048:	2200      	movs	r2, #0
 800204a:	2102      	movs	r1, #2
 800204c:	0020      	movs	r0, r4
 800204e:	f000 fda5 	bl	8002b9c <HAL_GPIO_WritePin>
    LCD_WR_REG(0x21);
 8002052:	2021      	movs	r0, #33	; 0x21
 8002054:	f7ff fbe5 	bl	8001822 <LCD_WR_REG>
    LCD_WR_REG(0x11);
 8002058:	2011      	movs	r0, #17
 800205a:	f7ff fbe2 	bl	8001822 <LCD_WR_REG>
    LCD_WR_REG(0x29);
 800205e:	2029      	movs	r0, #41	; 0x29
 8002060:	f7ff fbdf 	bl	8001822 <LCD_WR_REG>
    OLED_CS_Set();
 8002064:	2201      	movs	r2, #1
 8002066:	2102      	movs	r1, #2
 8002068:	0020      	movs	r0, r4
 800206a:	f000 fd97 	bl	8002b9c <HAL_GPIO_WritePin>
}
 800206e:	bd10      	pop	{r4, pc}
 8002070:	48000400 	.word	0x48000400

08002074 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002076:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	2214      	movs	r2, #20
 800207a:	2100      	movs	r1, #0
 800207c:	a803      	add	r0, sp, #12
 800207e:	f001 ffe6 	bl	800404e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002082:	2080      	movs	r0, #128	; 0x80
 8002084:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <MX_GPIO_Init+0x130>)
 8002086:	03c0      	lsls	r0, r0, #15
 8002088:	6959      	ldr	r1, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_POWER_GPIO_Port, BL_POWER_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC_POWER_Pin|LCD_POWER_Pin, GPIO_PIN_SET);
 800208a:	2790      	movs	r7, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800208c:	4301      	orrs	r1, r0
 800208e:	6159      	str	r1, [r3, #20]
 8002090:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, DAC_POWER_Pin|LCD_POWER_Pin, GPIO_PIN_SET);
 8002092:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002094:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002098:	9200      	str	r2, [sp, #0]
 800209a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	6959      	ldr	r1, [r3, #20]
 800209e:	0280      	lsls	r0, r0, #10
 80020a0:	4301      	orrs	r1, r0
 80020a2:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a8:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	4002      	ands	r2, r0
 80020ac:	9201      	str	r2, [sp, #4]
 80020ae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b0:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(BL_POWER_GPIO_Port, BL_POWER_Pin, GPIO_PIN_SET);
 80020b2:	483d      	ldr	r0, [pc, #244]	; (80021a8 <MX_GPIO_Init+0x134>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b4:	430a      	orrs	r2, r1
 80020b6:	615a      	str	r2, [r3, #20]
  HAL_GPIO_WritePin(BL_POWER_GPIO_Port, BL_POWER_Pin, GPIO_PIN_SET);
 80020b8:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	695b      	ldr	r3, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_SCL_Pin|LCD_RS_Pin|LCD_SDA_Pin|DAC_MUTE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80020bc:	4d3b      	ldr	r5, [pc, #236]	; (80021ac <MX_GPIO_Init+0x138>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	400b      	ands	r3, r1
 80020c0:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BL_POWER_GPIO_Port, BL_POWER_Pin, GPIO_PIN_SET);
 80020c2:	0011      	movs	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BL_POWER_GPIO_Port, BL_POWER_Pin, GPIO_PIN_SET);
 80020c6:	f000 fd69 	bl	8002b9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DAC_POWER_Pin|LCD_POWER_Pin, GPIO_PIN_SET);
 80020ca:	2102      	movs	r1, #2
 80020cc:	0038      	movs	r0, r7
 80020ce:	2201      	movs	r2, #1
 80020d0:	31ff      	adds	r1, #255	; 0xff
 80020d2:	f000 fd63 	bl	8002b9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_SCL_Pin|LCD_RS_Pin|LCD_SDA_Pin|DAC_MUTE_Pin, GPIO_PIN_RESET);
 80020d6:	2187      	movs	r1, #135	; 0x87
 80020d8:	0038      	movs	r0, r7
 80020da:	2200      	movs	r2, #0
 80020dc:	0149      	lsls	r1, r1, #5
 80020de:	f000 fd5d 	bl	8002b9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80020e2:	0028      	movs	r0, r5
 80020e4:	2200      	movs	r2, #0
 80020e6:	2103      	movs	r1, #3
 80020e8:	f000 fd58 	bl	8002b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FM_POWER_Pin|FM_SCL_Pin|FM_SDA_Pin, GPIO_PIN_SET);
 80020ec:	2201      	movs	r2, #1
 80020ee:	0028      	movs	r0, r5
 80020f0:	21e0      	movs	r1, #224	; 0xe0
 80020f2:	f000 fd53 	bl	8002b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BL_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = BL_POWER_Pin;
 80020f8:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80020fa:	2311      	movs	r3, #17
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BL_POWER_GPIO_Port, &GPIO_InitStruct);
 80020fc:	a903      	add	r1, sp, #12
 80020fe:	482a      	ldr	r0, [pc, #168]	; (80021a8 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002100:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = BL_POWER_Pin;
 8002102:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BL_POWER_GPIO_Port, &GPIO_InitStruct);
 8002108:	f000 fc1e 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_IN3_Pin;
 800210c:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(KEY_IN3_GPIO_Port, &GPIO_InitStruct);
 800210e:	a903      	add	r1, sp, #12
 8002110:	4825      	ldr	r0, [pc, #148]	; (80021a8 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pin = KEY_IN3_Pin;
 8002112:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002114:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002116:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(KEY_IN3_GPIO_Port, &GPIO_InitStruct);
 8002118:	f000 fc16 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = DAC_POWER_Pin|LCD_SCL_Pin|LCD_RS_Pin|LCD_SDA_Pin 
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <MX_GPIO_Init+0x13c>)
                          |LCD_POWER_Pin|DAC_MUTE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	a903      	add	r1, sp, #12
 8002120:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = DAC_POWER_Pin|LCD_SCL_Pin|LCD_RS_Pin|LCD_SDA_Pin 
 8002122:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002124:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212a:	f000 fc0d 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_IN1_Pin|KEY_IN2_Pin;
 800212e:	2312      	movs	r3, #18
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	a903      	add	r1, sp, #12
 8002132:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = KEY_IN1_Pin|KEY_IN2_Pin;
 8002134:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002136:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002138:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	f000 fc05 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|FM_POWER_Pin;
 800213e:	2323      	movs	r3, #35	; 0x23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	a903      	add	r1, sp, #12
 8002142:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|FM_POWER_Pin;
 8002144:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214c:	f000 fbfc 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15;
 8002150:	238e      	movs	r3, #142	; 0x8e
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002156:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	a903      	add	r1, sp, #12
 800215a:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800215c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	f000 fbf2 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002164:	2318      	movs	r3, #24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002168:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216a:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216c:	3b15      	subs	r3, #21
 800216e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002172:	f000 fbe9 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FM_SCL_Pin;
 8002176:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FM_SCL_GPIO_Port, &GPIO_InitStruct);
 8002178:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = FM_SCL_Pin;
 800217a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(FM_SCL_GPIO_Port, &GPIO_InitStruct);
 800217c:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800217e:	3b2f      	subs	r3, #47	; 0x2f
 8002180:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(FM_SCL_GPIO_Port, &GPIO_InitStruct);
 8002186:	f000 fbdf 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FM_SDA_Pin;
 800218a:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(FM_SDA_GPIO_Port, &GPIO_InitStruct);
 800218c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = FM_SDA_Pin;
 800218e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(FM_SDA_GPIO_Port, &GPIO_InitStruct);
 8002190:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002192:	3b6f      	subs	r3, #111	; 0x6f
 8002194:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002198:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(FM_SDA_GPIO_Port, &GPIO_InitStruct);
 800219a:	f000 fbd5 	bl	8002948 <HAL_GPIO_Init>

}
 800219e:	b009      	add	sp, #36	; 0x24
 80021a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	40021000 	.word	0x40021000
 80021a8:	48001400 	.word	0x48001400
 80021ac:	48000400 	.word	0x48000400
 80021b0:	000011e1 	.word	0x000011e1

080021b4 <MX_IWDG_Init>:

/* IWDG init function */
void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
 80021b4:	4807      	ldr	r0, [pc, #28]	; (80021d4 <MX_IWDG_Init+0x20>)
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <MX_IWDG_Init+0x24>)
{
 80021b8:	b510      	push	{r4, lr}
  hiwdg.Instance = IWDG;
 80021ba:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80021bc:	2302      	movs	r3, #2
 80021be:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <MX_IWDG_Init+0x28>)
 80021c2:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 80021c4:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80021c6:	f000 fd03 	bl	8002bd0 <HAL_IWDG_Init>
 80021ca:	2800      	cmp	r0, #0
 80021cc:	d001      	beq.n	80021d2 <MX_IWDG_Init+0x1e>
  {
    Error_Handler();
 80021ce:	f000 f88b 	bl	80022e8 <Error_Handler>
  }

}
 80021d2:	bd10      	pop	{r4, pc}
 80021d4:	20000128 	.word	0x20000128
 80021d8:	40003000 	.word	0x40003000
 80021dc:	00000fff 	.word	0x00000fff

080021e0 <MX_IWDG_Refresh>:

/* USER CODE BEGIN 1 */
void MX_IWDG_Refresh(void)
{
 80021e0:	b510      	push	{r4, lr}
   if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 80021e2:	4804      	ldr	r0, [pc, #16]	; (80021f4 <MX_IWDG_Refresh+0x14>)
 80021e4:	f000 fd44 	bl	8002c70 <HAL_IWDG_Refresh>
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d001      	beq.n	80021f0 <MX_IWDG_Refresh+0x10>
   {
     Error_Handler();
 80021ec:	f000 f87c 	bl	80022e8 <Error_Handler>
   }
}
 80021f0:	bd10      	pop	{r4, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	20000128 	.word	0x20000128

080021f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021fa:	2510      	movs	r5, #16
{
 80021fc:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fe:	2230      	movs	r2, #48	; 0x30
 8002200:	2100      	movs	r1, #0
 8002202:	a808      	add	r0, sp, #32
 8002204:	f001 ff23 	bl	800404e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002208:	002a      	movs	r2, r5
 800220a:	2100      	movs	r1, #0
 800220c:	4668      	mov	r0, sp
 800220e:	f001 ff1e 	bl	800404e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002212:	002a      	movs	r2, r5
 8002214:	2100      	movs	r1, #0
 8002216:	a804      	add	r0, sp, #16
 8002218:	f001 ff19 	bl	800404e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800221c:	230a      	movs	r3, #10
 800221e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002220:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002222:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002224:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002226:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002228:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800222a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800222c:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800222e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002230:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002232:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002234:	f000 fd24 	bl	8002c80 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002238:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223a:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800223c:	2500      	movs	r5, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800223e:	0021      	movs	r1, r4
 8002240:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002242:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002244:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002246:	9503      	str	r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002248:	f000 ffc4 	bl	80031d4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800224c:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800224e:	9404      	str	r4, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002250:	9506      	str	r5, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002252:	f001 f8c7 	bl	80033e4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002256:	b015      	add	sp, #84	; 0x54
 8002258:	bd30      	pop	{r4, r5, pc}
	...

0800225c <main>:
{
 800225c:	b510      	push	{r4, lr}
  HAL_Init();
 800225e:	f000 f97d 	bl	800255c <HAL_Init>
  SystemClock_Config();
 8002262:	f7ff ffc9 	bl	80021f8 <SystemClock_Config>
  MX_GPIO_Init();
 8002266:	f7ff ff05 	bl	8002074 <MX_GPIO_Init>
  MX_TIM14_Init();
 800226a:	f000 f8a7 	bl	80023bc <MX_TIM14_Init>
  MX_TIM16_Init();
 800226e:	f000 f8bf 	bl	80023f0 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8002272:	f000 f90b 	bl	800248c <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8002276:	f7ff ff9d 	bl	80021b4 <MX_IWDG_Init>
   if(HAL_TIM_Base_Start_IT(&htim14) != HAL_OK){
 800227a:	480c      	ldr	r0, [pc, #48]	; (80022ac <main+0x50>)
 800227c:	f001 f95c 	bl	8003538 <HAL_TIM_Base_Start_IT>
 8002280:	2800      	cmp	r0, #0
 8002282:	d000      	beq.n	8002286 <main+0x2a>
 8002284:	e7fe      	b.n	8002284 <main+0x28>
   if(HAL_TIM_Base_Start_IT(&htim16) != HAL_OK){
 8002286:	480a      	ldr	r0, [pc, #40]	; (80022b0 <main+0x54>)
 8002288:	f001 f956 	bl	8003538 <HAL_TIM_Base_Start_IT>
 800228c:	2800      	cmp	r0, #0
 800228e:	d000      	beq.n	8002292 <main+0x36>
 8002290:	e7fe      	b.n	8002290 <main+0x34>
   task_control_power_on_function();
 8002292:	f7fe f8f9 	bl	8000488 <task_control_power_on_function>
	  task_control_main_function();
 8002296:	f7fe f94d 	bl	8000534 <task_control_main_function>
	  MX_IWDG_Refresh();
 800229a:	f7ff ffa1 	bl	80021e0 <MX_IWDG_Refresh>
	  while(ucTimestamp_ms<10);
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <main+0x58>)
 80022a0:	781a      	ldrb	r2, [r3, #0]
 80022a2:	2a09      	cmp	r2, #9
 80022a4:	d9fc      	bls.n	80022a0 <main+0x44>
	  ucTimestamp_ms=0;
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
	  task_control_main_function();
 80022aa:	e7f4      	b.n	8002296 <main+0x3a>
 80022ac:	20000138 	.word	0x20000138
 80022b0:	20000178 	.word	0x20000178
 80022b4:	2000011e 	.word	0x2000011e

080022b8 <HAL_TIM_PeriodElapsedCallback>:
 * 函数名：HAL_TIM_PeriodElapsedCallback
 * 说明:  定时器中断回调函数
 ********************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim == &htim14){//1ms
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x24>)
{
 80022ba:	b510      	push	{r4, lr}
	if(htim == &htim14){//1ms
 80022bc:	4298      	cmp	r0, r3
 80022be:	d107      	bne.n	80022d0 <HAL_TIM_PeriodElapsedCallback+0x18>
		ucTimestamp_ms++;
 80022c0:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80022c2:	7813      	ldrb	r3, [r2, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	7013      	strb	r3, [r2, #0]
		UART_RxTime();
 80022ca:	f7fe f893 	bl	80003f4 <UART_RxTime>
	}else if(htim == &htim16){//10ms
		ISR_key_handle_function();
	}
}
 80022ce:	bd10      	pop	{r4, pc}
	}else if(htim == &htim16){//10ms
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80022d2:	4298      	cmp	r0, r3
 80022d4:	d1fb      	bne.n	80022ce <HAL_TIM_PeriodElapsedCallback+0x16>
		ISR_key_handle_function();
 80022d6:	f7fe ffdd 	bl	8001294 <ISR_key_handle_function>
}
 80022da:	e7f8      	b.n	80022ce <HAL_TIM_PeriodElapsedCallback+0x16>
 80022dc:	20000138 	.word	0x20000138
 80022e0:	2000011e 	.word	0x2000011e
 80022e4:	20000178 	.word	0x20000178

080022e8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022e8:	4770      	bx	lr

080022ea <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80022ea:	4770      	bx	lr

080022ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ec:	2001      	movs	r0, #1
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_MspInit+0x2c>)
{
 80022f0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	6999      	ldr	r1, [r3, #24]
 80022f4:	4301      	orrs	r1, r0
 80022f6:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fa:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	4002      	ands	r2, r0
 8002300:	9200      	str	r2, [sp, #0]
 8002302:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002304:	69da      	ldr	r2, [r3, #28]
 8002306:	430a      	orrs	r2, r1
 8002308:	61da      	str	r2, [r3, #28]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	400b      	ands	r3, r1
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002312:	b002      	add	sp, #8
 8002314:	4770      	bx	lr
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	40021000 	.word	0x40021000

0800231c <NMI_Handler>:
 800231c:	4770      	bx	lr

0800231e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231e:	e7fe      	b.n	800231e <HardFault_Handler>

08002320 <SVC_Handler>:
 8002320:	4770      	bx	lr

08002322 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002322:	4770      	bx	lr

08002324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002324:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002326:	f000 f929 	bl	800257c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800232a:	bd10      	pop	{r4, pc}

0800232c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800232c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800232e:	4802      	ldr	r0, [pc, #8]	; (8002338 <TIM14_IRQHandler+0xc>)
 8002330:	f001 f934 	bl	800359c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002334:	bd10      	pop	{r4, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	20000138 	.word	0x20000138

0800233c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800233c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800233e:	4802      	ldr	r0, [pc, #8]	; (8002348 <TIM16_IRQHandler+0xc>)
 8002340:	f001 f92c 	bl	800359c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002344:	bd10      	pop	{r4, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	20000178 	.word	0x20000178

0800234c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800234c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800234e:	4802      	ldr	r0, [pc, #8]	; (8002358 <USART1_IRQHandler+0xc>)
 8002350:	f001 fd9a 	bl	8003e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002354:	bd10      	pop	{r4, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	200001b8 	.word	0x200001b8

0800235c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800235c:	2101      	movs	r1, #1
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002360:	4811      	ldr	r0, [pc, #68]	; (80023a8 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	4002      	ands	r2, r0
 800236c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	480e      	ldr	r0, [pc, #56]	; (80023ac <SystemInit+0x50>)
 8002372:	4002      	ands	r2, r0
 8002374:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	480d      	ldr	r0, [pc, #52]	; (80023b0 <SystemInit+0x54>)
 800237a:	4002      	ands	r2, r0
 800237c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	480c      	ldr	r0, [pc, #48]	; (80023b4 <SystemInit+0x58>)
 8002382:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002384:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002386:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800238a:	4382      	bics	r2, r0
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800238e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002390:	4809      	ldr	r0, [pc, #36]	; (80023b8 <SystemInit+0x5c>)
 8002392:	4002      	ands	r2, r0
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002398:	438a      	bics	r2, r1
 800239a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]

}
 80023a0:	4770      	bx	lr
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	40021000 	.word	0x40021000
 80023a8:	08ffb80c 	.word	0x08ffb80c
 80023ac:	fef6ffff 	.word	0xfef6ffff
 80023b0:	fffbffff 	.word	0xfffbffff
 80023b4:	ffc0ffff 	.word	0xffc0ffff
 80023b8:	fffffeec 	.word	0xfffffeec

080023bc <MX_TIM14_Init>:

/* TIM14 init function */
void MX_TIM14_Init(void)
{

  htim14.Instance = TIM14;
 80023bc:	4809      	ldr	r0, [pc, #36]	; (80023e4 <MX_TIM14_Init+0x28>)
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <MX_TIM14_Init+0x2c>)
{
 80023c0:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 80023c2:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 960-1;
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <MX_TIM14_Init+0x30>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 50-1;
 80023c6:	2231      	movs	r2, #49	; 0x31
  htim14.Init.Prescaler = 960-1;
 80023c8:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ca:	2300      	movs	r3, #0
  htim14.Init.Period = 50-1;
 80023cc:	60c2      	str	r2, [r0, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ce:	6083      	str	r3, [r0, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d0:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80023d4:	f001 f9c6 	bl	8003764 <HAL_TIM_Base_Init>
 80023d8:	2800      	cmp	r0, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM14_Init+0x24>
  {
    Error_Handler();
 80023dc:	f7ff ff84 	bl	80022e8 <Error_Handler>
  }

}
 80023e0:	bd10      	pop	{r4, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	20000138 	.word	0x20000138
 80023e8:	40002000 	.word	0x40002000
 80023ec:	000003bf 	.word	0x000003bf

080023f0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{

  htim16.Instance = TIM16;
 80023f0:	480a      	ldr	r0, [pc, #40]	; (800241c <MX_TIM16_Init+0x2c>)
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <MX_TIM16_Init+0x30>)
{
 80023f4:	b510      	push	{r4, lr}
  htim16.Instance = TIM16;
 80023f6:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 960-1;
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <MX_TIM16_Init+0x34>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 500-1;
 80023fa:	22f4      	movs	r2, #244	; 0xf4
  htim16.Init.Prescaler = 960-1;
 80023fc:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fe:	2300      	movs	r3, #0
  htim16.Init.Period = 500-1;
 8002400:	32ff      	adds	r2, #255	; 0xff
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002402:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 500-1;
 8002404:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002406:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8002408:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800240a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800240c:	f001 f9aa 	bl	8003764 <HAL_TIM_Base_Init>
 8002410:	2800      	cmp	r0, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM16_Init+0x28>
  {
    Error_Handler();
 8002414:	f7ff ff68 	bl	80022e8 <Error_Handler>
  }

}
 8002418:	bd10      	pop	{r4, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	20000178 	.word	0x20000178
 8002420:	40014400 	.word	0x40014400
 8002424:	000003bf 	.word	0x000003bf

08002428 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002428:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM14)
 800242a:	6803      	ldr	r3, [r0, #0]
 800242c:	4a14      	ldr	r2, [pc, #80]	; (8002480 <HAL_TIM_Base_MspInit+0x58>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d112      	bne.n	8002458 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002432:	2080      	movs	r0, #128	; 0x80
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <HAL_TIM_Base_MspInit+0x5c>)
 8002436:	0040      	lsls	r0, r0, #1
 8002438:	69d1      	ldr	r1, [r2, #28]
 800243a:	4301      	orrs	r1, r0
 800243c:	61d1      	str	r1, [r2, #28]
 800243e:	69d3      	ldr	r3, [r2, #28]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8002440:	2102      	movs	r1, #2
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002442:	4003      	ands	r3, r0
 8002444:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8002446:	38ed      	subs	r0, #237	; 0xed
 8002448:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 800244a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 800244c:	f000 f8a4 	bl	8002598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002450:	2013      	movs	r0, #19
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002452:	f000 f8db 	bl	800260c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002456:	bd07      	pop	{r0, r1, r2, pc}
  else if(tim_baseHandle->Instance==TIM16)
 8002458:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <HAL_TIM_Base_MspInit+0x60>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d1fb      	bne.n	8002456 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800245e:	2080      	movs	r0, #128	; 0x80
 8002460:	4a08      	ldr	r2, [pc, #32]	; (8002484 <HAL_TIM_Base_MspInit+0x5c>)
 8002462:	0280      	lsls	r0, r0, #10
 8002464:	6991      	ldr	r1, [r2, #24]
 8002466:	4301      	orrs	r1, r0
 8002468:	6191      	str	r1, [r2, #24]
 800246a:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 800246c:	2103      	movs	r1, #3
    __HAL_RCC_TIM16_CLK_ENABLE();
 800246e:	4003      	ands	r3, r0
 8002470:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 8002472:	2015      	movs	r0, #21
 8002474:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002476:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 8002478:	f000 f88e 	bl	8002598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800247c:	2015      	movs	r0, #21
 800247e:	e7e8      	b.n	8002452 <HAL_TIM_Base_MspInit+0x2a>
 8002480:	40002000 	.word	0x40002000
 8002484:	40021000 	.word	0x40021000
 8002488:	40014400 	.word	0x40014400

0800248c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 800248c:	480b      	ldr	r0, [pc, #44]	; (80024bc <MX_USART1_UART_Init+0x30>)
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <MX_USART1_UART_Init+0x34>)
{
 8002490:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8002492:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8002494:	2396      	movs	r3, #150	; 0x96
 8002496:	019b      	lsls	r3, r3, #6
 8002498:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800249a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800249c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800249e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024a0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024a2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024a4:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024aa:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ac:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ae:	f001 fc1b 	bl	8003ce8 <HAL_UART_Init>
 80024b2:	2800      	cmp	r0, #0
 80024b4:	d001      	beq.n	80024ba <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 80024b6:	f7ff ff17 	bl	80022e8 <Error_Handler>
  }

}
 80024ba:	bd10      	pop	{r4, pc}
 80024bc:	200001b8 	.word	0x200001b8
 80024c0:	40013800 	.word	0x40013800

080024c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024c4:	b510      	push	{r4, lr}
 80024c6:	0004      	movs	r4, r0
 80024c8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ca:	2214      	movs	r2, #20
 80024cc:	2100      	movs	r1, #0
 80024ce:	a803      	add	r0, sp, #12
 80024d0:	f001 fdbd 	bl	800404e <memset>
  if(uartHandle->Instance==USART1)
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_UART_MspInit+0x6c>)
 80024d6:	6822      	ldr	r2, [r4, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d127      	bne.n	800252c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024dc:	2080      	movs	r0, #128	; 0x80
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_UART_MspInit+0x70>)
 80024e0:	01c0      	lsls	r0, r0, #7
 80024e2:	6999      	ldr	r1, [r3, #24]
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80024e4:	2401      	movs	r4, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 80024e6:	4301      	orrs	r1, r0
 80024e8:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ec:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f0:	4002      	ands	r2, r0
 80024f2:	9201      	str	r2, [sp, #4]
 80024f4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	430a      	orrs	r2, r1
 80024fc:	615a      	str	r2, [r3, #20]
 80024fe:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002500:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002502:	400b      	ands	r3, r1
 8002504:	9302      	str	r3, [sp, #8]
 8002506:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002508:	230c      	movs	r3, #12
 800250a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	3b0a      	subs	r3, #10
 800250e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002512:	3301      	adds	r3, #1
 8002514:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002516:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	f000 fa16 	bl	8002948 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800251c:	201b      	movs	r0, #27
 800251e:	2200      	movs	r2, #0
 8002520:	0021      	movs	r1, r4
 8002522:	f000 f839 	bl	8002598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002526:	201b      	movs	r0, #27
 8002528:	f000 f870 	bl	800260c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800252c:	b008      	add	sp, #32
 800252e:	bd10      	pop	{r4, pc}
 8002530:	40013800 	.word	0x40013800
 8002534:	40021000 	.word	0x40021000

08002538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002538:	b510      	push	{r4, lr}
 800253a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800253c:	f000 ff3c 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8002540:	21fa      	movs	r1, #250	; 0xfa
 8002542:	0089      	lsls	r1, r1, #2
 8002544:	f7fd fdfc 	bl	8000140 <__udivsi3>
 8002548:	f000 f872 	bl	8002630 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800254c:	2001      	movs	r0, #1
 800254e:	2200      	movs	r2, #0
 8002550:	0021      	movs	r1, r4
 8002552:	4240      	negs	r0, r0
 8002554:	f000 f820 	bl	8002598 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8002558:	2000      	movs	r0, #0
 800255a:	bd10      	pop	{r4, pc}

0800255c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800255c:	2310      	movs	r3, #16
 800255e:	4a06      	ldr	r2, [pc, #24]	; (8002578 <HAL_Init+0x1c>)
{
 8002560:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002562:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002564:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002566:	430b      	orrs	r3, r1
 8002568:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800256a:	f7ff ffe5 	bl	8002538 <HAL_InitTick>
  HAL_MspInit();
 800256e:	f7ff febd 	bl	80022ec <HAL_MspInit>
}
 8002572:	2000      	movs	r0, #0
 8002574:	bd10      	pop	{r4, pc}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	40022000 	.word	0x40022000

0800257c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800257c:	4a02      	ldr	r2, [pc, #8]	; (8002588 <HAL_IncTick+0xc>)
 800257e:	6813      	ldr	r3, [r2, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	6013      	str	r3, [r2, #0]
}
 8002584:	4770      	bx	lr
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	20000228 	.word	0x20000228

0800258c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800258c:	4b01      	ldr	r3, [pc, #4]	; (8002594 <HAL_GetTick+0x8>)
 800258e:	6818      	ldr	r0, [r3, #0]
}
 8002590:	4770      	bx	lr
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	20000228 	.word	0x20000228

08002598 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	0004      	movs	r4, r0
 800259c:	000d      	movs	r5, r1
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800259e:	2903      	cmp	r1, #3
 80025a0:	d903      	bls.n	80025aa <HAL_NVIC_SetPriority+0x12>
 80025a2:	219b      	movs	r1, #155	; 0x9b
 80025a4:	4816      	ldr	r0, [pc, #88]	; (8002600 <HAL_NVIC_SetPriority+0x68>)
 80025a6:	f7ff fea0 	bl	80022ea <assert_failed>
 80025aa:	01a9      	lsls	r1, r5, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80025ac:	2c00      	cmp	r4, #0
 80025ae:	da14      	bge.n	80025da <HAL_NVIC_SetPriority+0x42>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b0:	230f      	movs	r3, #15
 80025b2:	b2e4      	uxtb	r4, r4
 80025b4:	4023      	ands	r3, r4
 80025b6:	3b08      	subs	r3, #8
 80025b8:	4a12      	ldr	r2, [pc, #72]	; (8002604 <HAL_NVIC_SetPriority+0x6c>)
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	189b      	adds	r3, r3, r2
 80025c0:	2203      	movs	r2, #3
 80025c2:	4014      	ands	r4, r2
 80025c4:	4094      	lsls	r4, r2
 80025c6:	32fc      	adds	r2, #252	; 0xfc
 80025c8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025ca:	400a      	ands	r2, r1
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025cc:	40a5      	lsls	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025ce:	40a2      	lsls	r2, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025d0:	69d8      	ldr	r0, [r3, #28]
 80025d2:	43a8      	bics	r0, r5
 80025d4:	4302      	orrs	r2, r0
 80025d6:	61da      	str	r2, [r3, #28]
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025da:	2503      	movs	r5, #3
 80025dc:	08a3      	lsrs	r3, r4, #2
 80025de:	402c      	ands	r4, r5
 80025e0:	40ac      	lsls	r4, r5
 80025e2:	35fc      	adds	r5, #252	; 0xfc
 80025e4:	002e      	movs	r6, r5
 80025e6:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_NVIC_SetPriority+0x70>)
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	189b      	adds	r3, r3, r2
 80025ec:	22c0      	movs	r2, #192	; 0xc0
 80025ee:	40a6      	lsls	r6, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025f0:	4029      	ands	r1, r5
 80025f2:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025f4:	0092      	lsls	r2, r2, #2
 80025f6:	5898      	ldr	r0, [r3, r2]
 80025f8:	43b0      	bics	r0, r6
 80025fa:	4301      	orrs	r1, r0
 80025fc:	5099      	str	r1, [r3, r2]
 80025fe:	e7eb      	b.n	80025d8 <HAL_NVIC_SetPriority+0x40>
 8002600:	0800524f 	.word	0x0800524f
 8002604:	e000ed00 	.word	0xe000ed00
 8002608:	e000e100 	.word	0xe000e100

0800260c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260c:	b510      	push	{r4, lr}
 800260e:	1e04      	subs	r4, r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002610:	da03      	bge.n	800261a <HAL_NVIC_EnableIRQ+0xe>
 8002612:	21ab      	movs	r1, #171	; 0xab
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <HAL_NVIC_EnableIRQ+0x1c>)
 8002616:	f7ff fe68 	bl	80022ea <assert_failed>
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800261a:	231f      	movs	r3, #31
 800261c:	401c      	ands	r4, r3
 800261e:	3b1e      	subs	r3, #30
 8002620:	40a3      	lsls	r3, r4
 8002622:	4a02      	ldr	r2, [pc, #8]	; (800262c <HAL_NVIC_EnableIRQ+0x20>)
 8002624:	6013      	str	r3, [r2, #0]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002626:	bd10      	pop	{r4, pc}
 8002628:	0800524f 	.word	0x0800524f
 800262c:	e000e100 	.word	0xe000e100

08002630 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002630:	4a09      	ldr	r2, [pc, #36]	; (8002658 <HAL_SYSTICK_Config+0x28>)
 8002632:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002634:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002636:	4293      	cmp	r3, r2
 8002638:	d80d      	bhi.n	8002656 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800263a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263c:	4a07      	ldr	r2, [pc, #28]	; (800265c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800263e:	4808      	ldr	r0, [pc, #32]	; (8002660 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002640:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002642:	6a03      	ldr	r3, [r0, #32]
 8002644:	0609      	lsls	r1, r1, #24
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	430b      	orrs	r3, r1
 800264c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800264e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002650:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002652:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002654:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002656:	4770      	bx	lr
 8002658:	00ffffff 	.word	0x00ffffff
 800265c:	e000e010 	.word	0xe000e010
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002664:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002666:	1c84      	adds	r4, r0, #2
 8002668:	7fe3      	ldrb	r3, [r4, #31]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d004      	beq.n	8002678 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800266e:	2304      	movs	r3, #4
 8002670:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002672:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002674:	0018      	movs	r0, r3
 8002676:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002678:	210e      	movs	r1, #14
 800267a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800267c:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	438a      	bics	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002684:	2201      	movs	r2, #1
 8002686:	6819      	ldr	r1, [r3, #0]
 8002688:	4391      	bics	r1, r2
 800268a:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800268c:	0011      	movs	r1, r2
 800268e:	40a9      	lsls	r1, r5
 8002690:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002692:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002694:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002696:	2400      	movs	r4, #0
 8002698:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 800269a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800269c:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 800269e:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80026a0:	42a2      	cmp	r2, r4
 80026a2:	d0e7      	beq.n	8002674 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80026a4:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80026a6:	0023      	movs	r3, r4
 80026a8:	e7e4      	b.n	8002674 <HAL_DMA_Abort_IT+0x10>
	...

080026ac <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80026ac:	2110      	movs	r1, #16
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <FLASH_SetErrorCode+0x34>)
{
 80026b0:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80026b2:	68d8      	ldr	r0, [r3, #12]
  uint32_t flags = 0U;
 80026b4:	2200      	movs	r2, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80026b6:	4208      	tst	r0, r1
 80026b8:	d005      	beq.n	80026c6 <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80026ba:	480a      	ldr	r0, [pc, #40]	; (80026e4 <FLASH_SetErrorCode+0x38>)
 80026bc:	3202      	adds	r2, #2
 80026be:	69c4      	ldr	r4, [r0, #28]
 80026c0:	4322      	orrs	r2, r4
 80026c2:	61c2      	str	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 80026c4:	000a      	movs	r2, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80026c6:	2004      	movs	r0, #4
 80026c8:	68d9      	ldr	r1, [r3, #12]
 80026ca:	4201      	tst	r1, r0
 80026cc:	d005      	beq.n	80026da <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80026ce:	2101      	movs	r1, #1
 80026d0:	4c04      	ldr	r4, [pc, #16]	; (80026e4 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 80026d2:	4302      	orrs	r2, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80026d4:	69e5      	ldr	r5, [r4, #28]
 80026d6:	4329      	orrs	r1, r5
 80026d8:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80026da:	60da      	str	r2, [r3, #12]
}  
 80026dc:	bd30      	pop	{r4, r5, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	40022000 	.word	0x40022000
 80026e4:	20000230 	.word	0x20000230

080026e8 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_FLASH_Unlock+0x18>)
    return HAL_ERROR;
 80026ea:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	0612      	lsls	r2, r2, #24
 80026f0:	d504      	bpl.n	80026fc <HAL_FLASH_Unlock+0x14>
  return HAL_OK; 
 80026f2:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80026f4:	4a03      	ldr	r2, [pc, #12]	; (8002704 <HAL_FLASH_Unlock+0x1c>)
 80026f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80026f8:	4a03      	ldr	r2, [pc, #12]	; (8002708 <HAL_FLASH_Unlock+0x20>)
 80026fa:	605a      	str	r2, [r3, #4]
}
 80026fc:	4770      	bx	lr
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	40022000 	.word	0x40022000
 8002704:	45670123 	.word	0x45670123
 8002708:	cdef89ab 	.word	0xcdef89ab

0800270c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	4a03      	ldr	r2, [pc, #12]	; (800271c <HAL_FLASH_Lock+0x10>)
}
 8002710:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002712:	6911      	ldr	r1, [r2, #16]
 8002714:	430b      	orrs	r3, r1
 8002716:	6113      	str	r3, [r2, #16]
}
 8002718:	4770      	bx	lr
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	40022000 	.word	0x40022000

08002720 <FLASH_WaitForLastOperation>:
{
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002724:	f7ff ff32 	bl	800258c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002728:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 800272a:	0006      	movs	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <FLASH_WaitForLastOperation+0x50>)
 800272e:	001a      	movs	r2, r3
 8002730:	68d9      	ldr	r1, [r3, #12]
 8002732:	4229      	tst	r1, r5
 8002734:	d10f      	bne.n	8002756 <FLASH_WaitForLastOperation+0x36>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002736:	2120      	movs	r1, #32
 8002738:	68d8      	ldr	r0, [r3, #12]
 800273a:	4208      	tst	r0, r1
 800273c:	d000      	beq.n	8002740 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800273e:	60d9      	str	r1, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002740:	2310      	movs	r3, #16
 8002742:	68d0      	ldr	r0, [r2, #12]
 8002744:	4018      	ands	r0, r3
 8002746:	d102      	bne.n	800274e <FLASH_WaitForLastOperation+0x2e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002748:	68d3      	ldr	r3, [r2, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800274a:	075b      	lsls	r3, r3, #29
 800274c:	d508      	bpl.n	8002760 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 800274e:	f7ff ffad 	bl	80026ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002752:	2001      	movs	r0, #1
 8002754:	e004      	b.n	8002760 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8002756:	1c61      	adds	r1, r4, #1
 8002758:	d0ea      	beq.n	8002730 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800275a:	2c00      	cmp	r4, #0
 800275c:	d101      	bne.n	8002762 <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 800275e:	2003      	movs	r0, #3
}
 8002760:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002762:	f7ff ff13 	bl	800258c <HAL_GetTick>
 8002766:	1b80      	subs	r0, r0, r6
 8002768:	4284      	cmp	r4, r0
 800276a:	d2df      	bcs.n	800272c <FLASH_WaitForLastOperation+0xc>
 800276c:	e7f7      	b.n	800275e <FLASH_WaitForLastOperation+0x3e>
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	40022000 	.word	0x40022000

08002774 <HAL_FLASH_Program>:
{
 8002774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002776:	b085      	sub	sp, #20
 8002778:	9202      	str	r2, [sp, #8]
 800277a:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_FLASH_Program+0x9c>)
{
 800277e:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(&pFlash);
 8002780:	7e1a      	ldrb	r2, [r3, #24]
{
 8002782:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8002784:	2002      	movs	r0, #2
 8002786:	2a01      	cmp	r2, #1
 8002788:	d040      	beq.n	800280c <HAL_FLASH_Program+0x98>
 800278a:	2201      	movs	r2, #1
 800278c:	761a      	strb	r2, [r3, #24]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800278e:	1e63      	subs	r3, r4, #1
 8002790:	4283      	cmp	r3, r0
 8002792:	d903      	bls.n	800279c <HAL_FLASH_Program+0x28>
 8002794:	21c1      	movs	r1, #193	; 0xc1
 8002796:	481f      	ldr	r0, [pc, #124]	; (8002814 <HAL_FLASH_Program+0xa0>)
 8002798:	f7ff fda7 	bl	80022ea <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800279c:	21f8      	movs	r1, #248	; 0xf8
 800279e:	9b01      	ldr	r3, [sp, #4]
 80027a0:	0609      	lsls	r1, r1, #24
 80027a2:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_FLASH_Program+0xa4>)
 80027a4:	185b      	adds	r3, r3, r1
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d903      	bls.n	80027b2 <HAL_FLASH_Program+0x3e>
 80027aa:	21c2      	movs	r1, #194	; 0xc2
 80027ac:	4819      	ldr	r0, [pc, #100]	; (8002814 <HAL_FLASH_Program+0xa0>)
 80027ae:	f7ff fd9c 	bl	80022ea <assert_failed>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027b2:	481a      	ldr	r0, [pc, #104]	; (800281c <HAL_FLASH_Program+0xa8>)
 80027b4:	f7ff ffb4 	bl	8002720 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d124      	bne.n	8002806 <HAL_FLASH_Program+0x92>
      nbiterations = 1U;
 80027bc:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80027be:	2c01      	cmp	r4, #1
 80027c0:	d002      	beq.n	80027c8 <HAL_FLASH_Program+0x54>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80027c2:	2c02      	cmp	r4, #2
 80027c4:	d000      	beq.n	80027c8 <HAL_FLASH_Program+0x54>
      nbiterations = 4U;
 80027c6:	2604      	movs	r6, #4
 80027c8:	2400      	movs	r4, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80027ca:	9802      	ldr	r0, [sp, #8]
 80027cc:	9903      	ldr	r1, [sp, #12]
 80027ce:	0122      	lsls	r2, r4, #4
 80027d0:	f7fd fd42 	bl	8000258 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027d4:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80027d6:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_FLASH_Program+0x9c>)
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80027da:	4d11      	ldr	r5, [pc, #68]	; (8002820 <HAL_FLASH_Program+0xac>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027dc:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80027de:	692b      	ldr	r3, [r5, #16]
 80027e0:	9a01      	ldr	r2, [sp, #4]
 80027e2:	433b      	orrs	r3, r7
 80027e4:	612b      	str	r3, [r5, #16]
 80027e6:	0063      	lsls	r3, r4, #1
 80027e8:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80027ea:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 80027ec:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027ee:	480b      	ldr	r0, [pc, #44]	; (800281c <HAL_FLASH_Program+0xa8>)
 80027f0:	f7ff ff96 	bl	8002720 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80027f4:	692b      	ldr	r3, [r5, #16]
 80027f6:	43bb      	bics	r3, r7
 80027f8:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 80027fa:	2800      	cmp	r0, #0
 80027fc:	d103      	bne.n	8002806 <HAL_FLASH_Program+0x92>
 80027fe:	19e4      	adds	r4, r4, r7
    for (index = 0U; index < nbiterations; index++)
 8002800:	b2e3      	uxtb	r3, r4
 8002802:	429e      	cmp	r6, r3
 8002804:	d8e1      	bhi.n	80027ca <HAL_FLASH_Program+0x56>
  __HAL_UNLOCK(&pFlash);
 8002806:	2200      	movs	r2, #0
 8002808:	4b01      	ldr	r3, [pc, #4]	; (8002810 <HAL_FLASH_Program+0x9c>)
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	b005      	add	sp, #20
 800280e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002810:	20000230 	.word	0x20000230
 8002814:	080052ca 	.word	0x080052ca
 8002818:	00007fff 	.word	0x00007fff
 800281c:	0000c350 	.word	0x0000c350
 8002820:	40022000 	.word	0x40022000

08002824 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002824:	2200      	movs	r2, #0
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <FLASH_MassErase+0x1c>)
 8002828:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <FLASH_MassErase+0x20>)
 800282c:	3204      	adds	r2, #4
 800282e:	6919      	ldr	r1, [r3, #16]
 8002830:	430a      	orrs	r2, r1
 8002832:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002834:	2240      	movs	r2, #64	; 0x40
 8002836:	6919      	ldr	r1, [r3, #16]
 8002838:	430a      	orrs	r2, r1
 800283a:	611a      	str	r2, [r3, #16]
}
 800283c:	4770      	bx	lr
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	20000230 	.word	0x20000230
 8002844:	40022000 	.word	0x40022000

08002848 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002848:	2200      	movs	r2, #0
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <FLASH_PageErase+0x1c>)
 800284c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <FLASH_PageErase+0x20>)
 8002850:	3202      	adds	r2, #2
 8002852:	6919      	ldr	r1, [r3, #16]
 8002854:	430a      	orrs	r2, r1
 8002856:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002858:	2240      	movs	r2, #64	; 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 800285a:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800285c:	6919      	ldr	r1, [r3, #16]
 800285e:	430a      	orrs	r2, r1
 8002860:	611a      	str	r2, [r3, #16]
}
 8002862:	4770      	bx	lr
 8002864:	20000230 	.word	0x20000230
 8002868:	40022000 	.word	0x40022000

0800286c <HAL_FLASHEx_Erase>:
{
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800286e:	4e30      	ldr	r6, [pc, #192]	; (8002930 <HAL_FLASHEx_Erase+0xc4>)
{
 8002870:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8002872:	7e33      	ldrb	r3, [r6, #24]
{
 8002874:	000f      	movs	r7, r1
  __HAL_LOCK(&pFlash);
 8002876:	2002      	movs	r0, #2
 8002878:	2b01      	cmp	r3, #1
 800287a:	d013      	beq.n	80028a4 <HAL_FLASHEx_Erase+0x38>
 800287c:	2301      	movs	r3, #1
 800287e:	7633      	strb	r3, [r6, #24]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8002880:	6823      	ldr	r3, [r4, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d903      	bls.n	800288e <HAL_FLASHEx_Erase+0x22>
 8002886:	21b8      	movs	r1, #184	; 0xb8
 8002888:	482a      	ldr	r0, [pc, #168]	; (8002934 <HAL_FLASHEx_Erase+0xc8>)
 800288a:	f7ff fd2e 	bl	80022ea <assert_failed>
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d113      	bne.n	80028bc <HAL_FLASHEx_Erase+0x50>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002894:	4828      	ldr	r0, [pc, #160]	; (8002938 <HAL_FLASHEx_Erase+0xcc>)
 8002896:	f7ff ff43 	bl	8002720 <FLASH_WaitForLastOperation>
 800289a:	2800      	cmp	r0, #0
 800289c:	d003      	beq.n	80028a6 <HAL_FLASHEx_Erase+0x3a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800289e:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80028a0:	2300      	movs	r3, #0
 80028a2:	7633      	strb	r3, [r6, #24]
}
 80028a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 80028a6:	f7ff ffbd 	bl	8002824 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028aa:	4823      	ldr	r0, [pc, #140]	; (8002938 <HAL_FLASHEx_Erase+0xcc>)
 80028ac:	f7ff ff38 	bl	8002720 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80028b0:	2104      	movs	r1, #4
 80028b2:	4a22      	ldr	r2, [pc, #136]	; (800293c <HAL_FLASHEx_Erase+0xd0>)
 80028b4:	6913      	ldr	r3, [r2, #16]
 80028b6:	438b      	bics	r3, r1
 80028b8:	6113      	str	r3, [r2, #16]
 80028ba:	e7f1      	b.n	80028a0 <HAL_FLASHEx_Erase+0x34>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 80028bc:	22f8      	movs	r2, #248	; 0xf8
 80028be:	6863      	ldr	r3, [r4, #4]
 80028c0:	0612      	lsls	r2, r2, #24
 80028c2:	189b      	adds	r3, r3, r2
 80028c4:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <HAL_FLASHEx_Erase+0xd4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d903      	bls.n	80028d2 <HAL_FLASHEx_Erase+0x66>
 80028ca:	21ce      	movs	r1, #206	; 0xce
 80028cc:	4819      	ldr	r0, [pc, #100]	; (8002934 <HAL_FLASHEx_Erase+0xc8>)
 80028ce:	f7ff fd0c 	bl	80022ea <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 80028d2:	68a3      	ldr	r3, [r4, #8]
 80028d4:	6862      	ldr	r2, [r4, #4]
 80028d6:	029b      	lsls	r3, r3, #10
 80028d8:	3a01      	subs	r2, #1
 80028da:	189b      	adds	r3, r3, r2
 80028dc:	4a19      	ldr	r2, [pc, #100]	; (8002944 <HAL_FLASHEx_Erase+0xd8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d903      	bls.n	80028ea <HAL_FLASHEx_Erase+0x7e>
 80028e2:	21cf      	movs	r1, #207	; 0xcf
 80028e4:	4813      	ldr	r0, [pc, #76]	; (8002934 <HAL_FLASHEx_Erase+0xc8>)
 80028e6:	f7ff fd00 	bl	80022ea <assert_failed>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80028ea:	4813      	ldr	r0, [pc, #76]	; (8002938 <HAL_FLASHEx_Erase+0xcc>)
 80028ec:	f7ff ff18 	bl	8002720 <FLASH_WaitForLastOperation>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d1d4      	bne.n	800289e <HAL_FLASHEx_Erase+0x32>
        *PageError = 0xFFFFFFFFU;
 80028f4:	2301      	movs	r3, #1
 80028f6:	425b      	negs	r3, r3
 80028f8:	603b      	str	r3, [r7, #0]
        for(address = pEraseInit->PageAddress;
 80028fa:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028fc:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80028fe:	68a3      	ldr	r3, [r4, #8]
 8002900:	6862      	ldr	r2, [r4, #4]
 8002902:	029b      	lsls	r3, r3, #10
 8002904:	189b      	adds	r3, r3, r2
        for(address = pEraseInit->PageAddress;
 8002906:	429d      	cmp	r5, r3
 8002908:	d2ca      	bcs.n	80028a0 <HAL_FLASHEx_Erase+0x34>
          FLASH_PageErase(address);
 800290a:	0028      	movs	r0, r5
 800290c:	f7ff ff9c 	bl	8002848 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002910:	4809      	ldr	r0, [pc, #36]	; (8002938 <HAL_FLASHEx_Erase+0xcc>)
 8002912:	f7ff ff05 	bl	8002720 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002916:	2102      	movs	r1, #2
 8002918:	4a08      	ldr	r2, [pc, #32]	; (800293c <HAL_FLASHEx_Erase+0xd0>)
 800291a:	6913      	ldr	r3, [r2, #16]
 800291c:	438b      	bics	r3, r1
 800291e:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8002920:	2800      	cmp	r0, #0
 8002922:	d001      	beq.n	8002928 <HAL_FLASHEx_Erase+0xbc>
            *PageError = address;
 8002924:	603d      	str	r5, [r7, #0]
            break;
 8002926:	e7bb      	b.n	80028a0 <HAL_FLASHEx_Erase+0x34>
            address += FLASH_PAGE_SIZE)
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	18ed      	adds	r5, r5, r3
 800292e:	e7e6      	b.n	80028fe <HAL_FLASHEx_Erase+0x92>
 8002930:	20000230 	.word	0x20000230
 8002934:	08005344 	.word	0x08005344
 8002938:	0000c350 	.word	0x0000c350
 800293c:	40022000 	.word	0x40022000
 8002940:	00007fff 	.word	0x00007fff
 8002944:	08007fff 	.word	0x08007fff

08002948 <HAL_GPIO_Init>:
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002948:	2390      	movs	r3, #144	; 0x90
{ 
 800294a:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800294c:	05db      	lsls	r3, r3, #23
{ 
 800294e:	b087      	sub	sp, #28
 8002950:	0004      	movs	r4, r0
 8002952:	000d      	movs	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002954:	4298      	cmp	r0, r3
 8002956:	d00f      	beq.n	8002978 <HAL_GPIO_Init+0x30>
 8002958:	4b7b      	ldr	r3, [pc, #492]	; (8002b48 <HAL_GPIO_Init+0x200>)
 800295a:	4298      	cmp	r0, r3
 800295c:	d00c      	beq.n	8002978 <HAL_GPIO_Init+0x30>
 800295e:	4b7b      	ldr	r3, [pc, #492]	; (8002b4c <HAL_GPIO_Init+0x204>)
 8002960:	4298      	cmp	r0, r3
 8002962:	d009      	beq.n	8002978 <HAL_GPIO_Init+0x30>
 8002964:	4b7a      	ldr	r3, [pc, #488]	; (8002b50 <HAL_GPIO_Init+0x208>)
 8002966:	4298      	cmp	r0, r3
 8002968:	d006      	beq.n	8002978 <HAL_GPIO_Init+0x30>
 800296a:	4b7a      	ldr	r3, [pc, #488]	; (8002b54 <HAL_GPIO_Init+0x20c>)
 800296c:	4298      	cmp	r0, r3
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x30>
 8002970:	21c1      	movs	r1, #193	; 0xc1
 8002972:	4879      	ldr	r0, [pc, #484]	; (8002b58 <HAL_GPIO_Init+0x210>)
 8002974:	f7ff fcb9 	bl	80022ea <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002978:	682b      	ldr	r3, [r5, #0]
 800297a:	b29a      	uxth	r2, r3
 800297c:	2a00      	cmp	r2, #0
 800297e:	d001      	beq.n	8002984 <HAL_GPIO_Init+0x3c>
 8002980:	0c1b      	lsrs	r3, r3, #16
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x44>
 8002984:	21c2      	movs	r1, #194	; 0xc2
 8002986:	4874      	ldr	r0, [pc, #464]	; (8002b58 <HAL_GPIO_Init+0x210>)
 8002988:	f7ff fcaf 	bl	80022ea <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800298c:	686b      	ldr	r3, [r5, #4]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d912      	bls.n	80029b8 <HAL_GPIO_Init+0x70>
 8002992:	001a      	movs	r2, r3
 8002994:	3a11      	subs	r2, #17
 8002996:	2a01      	cmp	r2, #1
 8002998:	d90e      	bls.n	80029b8 <HAL_GPIO_Init+0x70>
 800299a:	4a70      	ldr	r2, [pc, #448]	; (8002b5c <HAL_GPIO_Init+0x214>)
 800299c:	4970      	ldr	r1, [pc, #448]	; (8002b60 <HAL_GPIO_Init+0x218>)
 800299e:	401a      	ands	r2, r3
 80029a0:	1852      	adds	r2, r2, r1
 80029a2:	4970      	ldr	r1, [pc, #448]	; (8002b64 <HAL_GPIO_Init+0x21c>)
 80029a4:	420a      	tst	r2, r1
 80029a6:	d007      	beq.n	80029b8 <HAL_GPIO_Init+0x70>
 80029a8:	4a6f      	ldr	r2, [pc, #444]	; (8002b68 <HAL_GPIO_Init+0x220>)
 80029aa:	189b      	adds	r3, r3, r2
 80029ac:	420b      	tst	r3, r1
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_Init+0x70>
 80029b0:	21c3      	movs	r1, #195	; 0xc3
 80029b2:	4869      	ldr	r0, [pc, #420]	; (8002b58 <HAL_GPIO_Init+0x210>)
 80029b4:	f7ff fc99 	bl	80022ea <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 80029b8:	68ab      	ldr	r3, [r5, #8]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d903      	bls.n	80029c6 <HAL_GPIO_Init+0x7e>
 80029be:	21c4      	movs	r1, #196	; 0xc4
 80029c0:	4865      	ldr	r0, [pc, #404]	; (8002b58 <HAL_GPIO_Init+0x210>)
 80029c2:	f7ff fc92 	bl	80022ea <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029c6:	2300      	movs	r3, #0
        }
        EXTI->FTSR = temp;
      }
    }
    
    position++;
 80029c8:	9301      	str	r3, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80029ca:	682b      	ldr	r3, [r5, #0]
 80029cc:	9901      	ldr	r1, [sp, #4]
 80029ce:	001a      	movs	r2, r3
 80029d0:	40ca      	lsrs	r2, r1
 80029d2:	d101      	bne.n	80029d8 <HAL_GPIO_Init+0x90>
  } 
}
 80029d4:	b007      	add	sp, #28
 80029d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80029d8:	2201      	movs	r2, #1
 80029da:	9901      	ldr	r1, [sp, #4]
 80029dc:	408a      	lsls	r2, r1
 80029de:	9203      	str	r2, [sp, #12]
 80029e0:	401a      	ands	r2, r3
 80029e2:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 80029e4:	d100      	bne.n	80029e8 <HAL_GPIO_Init+0xa0>
 80029e6:	e0ab      	b.n	8002b40 <HAL_GPIO_Init+0x1f8>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80029e8:	2210      	movs	r2, #16
 80029ea:	686b      	ldr	r3, [r5, #4]
 80029ec:	4393      	bics	r3, r2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d122      	bne.n	8002a38 <HAL_GPIO_Init+0xf0>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80029f2:	2390      	movs	r3, #144	; 0x90
 80029f4:	05db      	lsls	r3, r3, #23
 80029f6:	429c      	cmp	r4, r3
 80029f8:	d006      	beq.n	8002a08 <HAL_GPIO_Init+0xc0>
 80029fa:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <HAL_GPIO_Init+0x200>)
 80029fc:	429c      	cmp	r4, r3
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0xc0>
 8002a00:	21d3      	movs	r1, #211	; 0xd3
 8002a02:	4855      	ldr	r0, [pc, #340]	; (8002b58 <HAL_GPIO_Init+0x210>)
 8002a04:	f7ff fc71 	bl	80022ea <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002a08:	692b      	ldr	r3, [r5, #16]
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d903      	bls.n	8002a16 <HAL_GPIO_Init+0xce>
 8002a0e:	21d4      	movs	r1, #212	; 0xd4
 8002a10:	4851      	ldr	r0, [pc, #324]	; (8002b58 <HAL_GPIO_Init+0x210>)
 8002a12:	f7ff fc6a 	bl	80022ea <assert_failed>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002a16:	2207      	movs	r2, #7
 8002a18:	9801      	ldr	r0, [sp, #4]
        temp = GPIOx->AFR[position >> 3];
 8002a1a:	9b01      	ldr	r3, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002a1c:	4002      	ands	r2, r0
 8002a1e:	200f      	movs	r0, #15
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	4090      	lsls	r0, r2
        temp = GPIOx->AFR[position >> 3];
 8002a24:	08db      	lsrs	r3, r3, #3
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	18e3      	adds	r3, r4, r3
 8002a2a:	6a19      	ldr	r1, [r3, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002a2c:	4381      	bics	r1, r0
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002a2e:	6928      	ldr	r0, [r5, #16]
 8002a30:	4090      	lsls	r0, r2
 8002a32:	0002      	movs	r2, r0
 8002a34:	430a      	orrs	r2, r1
        GPIOx->AFR[position >> 3U] = temp;
 8002a36:	621a      	str	r2, [r3, #32]
 8002a38:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a3a:	686a      	ldr	r2, [r5, #4]
 8002a3c:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002a3e:	2303      	movs	r3, #3
 8002a40:	001e      	movs	r6, r3
 8002a42:	40be      	lsls	r6, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a44:	4013      	ands	r3, r2
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002a46:	43f6      	mvns	r6, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a48:	40bb      	lsls	r3, r7
      temp = GPIOx->MODER;
 8002a4a:	6821      	ldr	r1, [r4, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002a4c:	4031      	ands	r1, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a4e:	430b      	orrs	r3, r1
      GPIOx->MODER = temp;
 8002a50:	6023      	str	r3, [r4, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a52:	2310      	movs	r3, #16
 8002a54:	439a      	bics	r2, r3
 8002a56:	3a01      	subs	r2, #1
 8002a58:	2a01      	cmp	r2, #1
 8002a5a:	d819      	bhi.n	8002a90 <HAL_GPIO_Init+0x148>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002a5c:	68eb      	ldr	r3, [r5, #12]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d905      	bls.n	8002a6e <HAL_GPIO_Init+0x126>
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x126>
 8002a66:	21e8      	movs	r1, #232	; 0xe8
 8002a68:	483b      	ldr	r0, [pc, #236]	; (8002b58 <HAL_GPIO_Init+0x210>)
 8002a6a:	f7ff fc3e 	bl	80022ea <assert_failed>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002a6e:	68eb      	ldr	r3, [r5, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a70:	2101      	movs	r1, #1
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002a72:	40bb      	lsls	r3, r7
        temp = GPIOx->OSPEEDR; 
 8002a74:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a76:	4032      	ands	r2, r6
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002a78:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8002a7a:	60a3      	str	r3, [r4, #8]
        temp = GPIOx->OTYPER;
 8002a7c:	6862      	ldr	r2, [r4, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002a7e:	9b03      	ldr	r3, [sp, #12]
 8002a80:	439a      	bics	r2, r3
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a82:	686b      	ldr	r3, [r5, #4]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	400b      	ands	r3, r1
 8002a88:	9901      	ldr	r1, [sp, #4]
 8002a8a:	408b      	lsls	r3, r1
 8002a8c:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8002a8e:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 8002a90:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002a92:	6869      	ldr	r1, [r5, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a94:	4033      	ands	r3, r6
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002a96:	68ae      	ldr	r6, [r5, #8]
 8002a98:	40be      	lsls	r6, r7
 8002a9a:	431e      	orrs	r6, r3
      GPIOx->PUPDR = temp;
 8002a9c:	60e6      	str	r6, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002a9e:	00cb      	lsls	r3, r1, #3
 8002aa0:	d54e      	bpl.n	8002b40 <HAL_GPIO_Init+0x1f8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa2:	2001      	movs	r0, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002aa4:	2603      	movs	r6, #3
 8002aa6:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa8:	4b30      	ldr	r3, [pc, #192]	; (8002b6c <HAL_GPIO_Init+0x224>)
 8002aaa:	699a      	ldr	r2, [r3, #24]
 8002aac:	4302      	orrs	r2, r0
 8002aae:	619a      	str	r2, [r3, #24]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	4003      	ands	r3, r0
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002ab4:	9801      	ldr	r0, [sp, #4]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	9305      	str	r3, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002ab8:	4030      	ands	r0, r6
 8002aba:	0080      	lsls	r0, r0, #2
 8002abc:	4087      	lsls	r7, r0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	9b05      	ldr	r3, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2];
 8002ac0:	9b01      	ldr	r3, [sp, #4]
 8002ac2:	089a      	lsrs	r2, r3, #2
 8002ac4:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <HAL_GPIO_Init+0x228>)
 8002ac6:	0092      	lsls	r2, r2, #2
 8002ac8:	18d2      	adds	r2, r2, r3
 8002aca:	6893      	ldr	r3, [r2, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002acc:	43bb      	bics	r3, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ace:	2790      	movs	r7, #144	; 0x90
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002ad0:	469c      	mov	ip, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ad2:	05ff      	lsls	r7, r7, #23
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	42bc      	cmp	r4, r7
 8002ad8:	d00c      	beq.n	8002af4 <HAL_GPIO_Init+0x1ac>
 8002ada:	4f1b      	ldr	r7, [pc, #108]	; (8002b48 <HAL_GPIO_Init+0x200>)
 8002adc:	3301      	adds	r3, #1
 8002ade:	42bc      	cmp	r4, r7
 8002ae0:	d008      	beq.n	8002af4 <HAL_GPIO_Init+0x1ac>
 8002ae2:	4f1a      	ldr	r7, [pc, #104]	; (8002b4c <HAL_GPIO_Init+0x204>)
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	42bc      	cmp	r4, r7
 8002ae8:	d004      	beq.n	8002af4 <HAL_GPIO_Init+0x1ac>
 8002aea:	4f19      	ldr	r7, [pc, #100]	; (8002b50 <HAL_GPIO_Init+0x208>)
 8002aec:	199b      	adds	r3, r3, r6
 8002aee:	42bc      	cmp	r4, r7
 8002af0:	d100      	bne.n	8002af4 <HAL_GPIO_Init+0x1ac>
 8002af2:	0033      	movs	r3, r6
 8002af4:	4083      	lsls	r3, r0
 8002af6:	4660      	mov	r0, ip
 8002af8:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2] = temp;
 8002afa:	6093      	str	r3, [r2, #8]
        temp = EXTI->IMR;
 8002afc:	4a1d      	ldr	r2, [pc, #116]	; (8002b74 <HAL_GPIO_Init+0x22c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002afe:	9b02      	ldr	r3, [sp, #8]
        temp = EXTI->IMR;
 8002b00:	6816      	ldr	r6, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b02:	43d8      	mvns	r0, r3
          SET_BIT(temp, iocurrent); 
 8002b04:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b06:	03cf      	lsls	r7, r1, #15
 8002b08:	d401      	bmi.n	8002b0e <HAL_GPIO_Init+0x1c6>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b0a:	0033      	movs	r3, r6
 8002b0c:	4003      	ands	r3, r0
        EXTI->IMR = temp;
 8002b0e:	6013      	str	r3, [r2, #0]
        temp = EXTI->EMR;
 8002b10:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8002b12:	9b02      	ldr	r3, [sp, #8]
 8002b14:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b16:	038f      	lsls	r7, r1, #14
 8002b18:	d401      	bmi.n	8002b1e <HAL_GPIO_Init+0x1d6>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002b1a:	0033      	movs	r3, r6
 8002b1c:	4003      	ands	r3, r0
        EXTI->EMR = temp;
 8002b1e:	6053      	str	r3, [r2, #4]
        temp = EXTI->RTSR;
 8002b20:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 8002b22:	9b02      	ldr	r3, [sp, #8]
 8002b24:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b26:	02cf      	lsls	r7, r1, #11
 8002b28:	d401      	bmi.n	8002b2e <HAL_GPIO_Init+0x1e6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002b2a:	0033      	movs	r3, r6
 8002b2c:	4003      	ands	r3, r0
        EXTI->RTSR = temp;
 8002b2e:	6093      	str	r3, [r2, #8]
        temp = EXTI->FTSR;
 8002b30:	68d6      	ldr	r6, [r2, #12]
          SET_BIT(temp, iocurrent); 
 8002b32:	9b02      	ldr	r3, [sp, #8]
 8002b34:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b36:	0289      	lsls	r1, r1, #10
 8002b38:	d401      	bmi.n	8002b3e <HAL_GPIO_Init+0x1f6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002b3a:	0033      	movs	r3, r6
 8002b3c:	4003      	ands	r3, r0
        EXTI->FTSR = temp;
 8002b3e:	60d3      	str	r3, [r2, #12]
    position++;
 8002b40:	9b01      	ldr	r3, [sp, #4]
 8002b42:	3301      	adds	r3, #1
 8002b44:	e740      	b.n	80029c8 <HAL_GPIO_Init+0x80>
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	48000400 	.word	0x48000400
 8002b4c:	48000800 	.word	0x48000800
 8002b50:	48000c00 	.word	0x48000c00
 8002b54:	48001400 	.word	0x48001400
 8002b58:	080053c1 	.word	0x080053c1
 8002b5c:	ffdfffff 	.word	0xffdfffff
 8002b60:	efef0000 	.word	0xefef0000
 8002b64:	fffeffff 	.word	0xfffeffff
 8002b68:	efdf0000 	.word	0xefdf0000
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40010000 	.word	0x40010000
 8002b74:	40010400 	.word	0x40010400

08002b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	0005      	movs	r5, r0
 8002b7c:	1e0c      	subs	r4, r1, #0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b7e:	d104      	bne.n	8002b8a <HAL_GPIO_ReadPin+0x12>
 8002b80:	218e      	movs	r1, #142	; 0x8e
 8002b82:	4805      	ldr	r0, [pc, #20]	; (8002b98 <HAL_GPIO_ReadPin+0x20>)
 8002b84:	31ff      	adds	r1, #255	; 0xff
 8002b86:	f7ff fbb0 	bl	80022ea <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b8a:	6928      	ldr	r0, [r5, #16]
 8002b8c:	4020      	ands	r0, r4
 8002b8e:	1e43      	subs	r3, r0, #1
 8002b90:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002b92:	b2c0      	uxtb	r0, r0
  }
 8002b94:	bd70      	pop	{r4, r5, r6, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	080053c1 	.word	0x080053c1

08002b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b9c:	b570      	push	{r4, r5, r6, lr}
 8002b9e:	0005      	movs	r5, r0
 8002ba0:	000c      	movs	r4, r1
 8002ba2:	0016      	movs	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002ba4:	2900      	cmp	r1, #0
 8002ba6:	d104      	bne.n	8002bb2 <HAL_GPIO_WritePin+0x16>
 8002ba8:	21d6      	movs	r1, #214	; 0xd6
 8002baa:	4808      	ldr	r0, [pc, #32]	; (8002bcc <HAL_GPIO_WritePin+0x30>)
 8002bac:	0049      	lsls	r1, r1, #1
 8002bae:	f7ff fb9c 	bl	80022ea <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002bb2:	2e01      	cmp	r6, #1
 8002bb4:	d906      	bls.n	8002bc4 <HAL_GPIO_WritePin+0x28>
 8002bb6:	21ae      	movs	r1, #174	; 0xae
 8002bb8:	4804      	ldr	r0, [pc, #16]	; (8002bcc <HAL_GPIO_WritePin+0x30>)
 8002bba:	31ff      	adds	r1, #255	; 0xff
 8002bbc:	f7ff fb95 	bl	80022ea <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bc0:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bc2:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 8002bc4:	2e00      	cmp	r6, #0
 8002bc6:	d1fb      	bne.n	8002bc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bc8:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8002bca:	e7fa      	b.n	8002bc2 <HAL_GPIO_WritePin+0x26>
 8002bcc:	080053c1 	.word	0x080053c1

08002bd0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
  {
    return HAL_ERROR;
 8002bd4:	2001      	movs	r0, #1
  if(hiwdg == NULL)
 8002bd6:	2c00      	cmp	r4, #0
 8002bd8:	d032      	beq.n	8002c40 <HAL_IWDG_Init+0x70>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <HAL_IWDG_Init+0x88>)
 8002bdc:	6822      	ldr	r2, [r4, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d003      	beq.n	8002bea <HAL_IWDG_Init+0x1a>
 8002be2:	21b5      	movs	r1, #181	; 0xb5
 8002be4:	481d      	ldr	r0, [pc, #116]	; (8002c5c <HAL_IWDG_Init+0x8c>)
 8002be6:	f7ff fb80 	bl	80022ea <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 8002bea:	6863      	ldr	r3, [r4, #4]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d903      	bls.n	8002bf8 <HAL_IWDG_Init+0x28>
 8002bf0:	21b6      	movs	r1, #182	; 0xb6
 8002bf2:	481a      	ldr	r0, [pc, #104]	; (8002c5c <HAL_IWDG_Init+0x8c>)
 8002bf4:	f7ff fb79 	bl	80022ea <assert_failed>
 8002bf8:	4d19      	ldr	r5, [pc, #100]	; (8002c60 <HAL_IWDG_Init+0x90>)
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8002bfa:	68a3      	ldr	r3, [r4, #8]
 8002bfc:	42ab      	cmp	r3, r5
 8002bfe:	d903      	bls.n	8002c08 <HAL_IWDG_Init+0x38>
 8002c00:	21b7      	movs	r1, #183	; 0xb7
 8002c02:	4816      	ldr	r0, [pc, #88]	; (8002c5c <HAL_IWDG_Init+0x8c>)
 8002c04:	f7ff fb71 	bl	80022ea <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 8002c08:	68e3      	ldr	r3, [r4, #12]
 8002c0a:	42ab      	cmp	r3, r5
 8002c0c:	d903      	bls.n	8002c16 <HAL_IWDG_Init+0x46>
 8002c0e:	21b8      	movs	r1, #184	; 0xb8
 8002c10:	4812      	ldr	r0, [pc, #72]	; (8002c5c <HAL_IWDG_Init+0x8c>)
 8002c12:	f7ff fb6a 	bl	80022ea <assert_failed>

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <HAL_IWDG_Init+0x94>)
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002c1c:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <HAL_IWDG_Init+0x98>)
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002c20:	6862      	ldr	r2, [r4, #4]
 8002c22:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002c24:	68a2      	ldr	r2, [r4, #8]
 8002c26:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002c28:	f7ff fcb0 	bl	800258c <HAL_GetTick>
 8002c2c:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	68d8      	ldr	r0, [r3, #12]
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d105      	bne.n	8002c42 <HAL_IWDG_Init+0x72>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002c36:	6919      	ldr	r1, [r3, #16]
 8002c38:	68e2      	ldr	r2, [r4, #12]
 8002c3a:	4291      	cmp	r1, r2
 8002c3c:	d008      	beq.n	8002c50 <HAL_IWDG_Init+0x80>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002c3e:	611a      	str	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8002c40:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002c42:	f7ff fca3 	bl	800258c <HAL_GetTick>
 8002c46:	1b40      	subs	r0, r0, r5
 8002c48:	2827      	cmp	r0, #39	; 0x27
 8002c4a:	d9f0      	bls.n	8002c2e <HAL_IWDG_Init+0x5e>
      return HAL_TIMEOUT;
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	e7f7      	b.n	8002c40 <HAL_IWDG_Init+0x70>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002c50:	4a06      	ldr	r2, [pc, #24]	; (8002c6c <HAL_IWDG_Init+0x9c>)
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e7f4      	b.n	8002c40 <HAL_IWDG_Init+0x70>
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	40003000 	.word	0x40003000
 8002c5c:	0800543a 	.word	0x0800543a
 8002c60:	00000fff 	.word	0x00000fff
 8002c64:	0000cccc 	.word	0x0000cccc
 8002c68:	00005555 	.word	0x00005555
 8002c6c:	0000aaaa 	.word	0x0000aaaa

08002c70 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002c70:	6803      	ldr	r3, [r0, #0]
 8002c72:	4a02      	ldr	r2, [pc, #8]	; (8002c7c <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8002c74:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002c76:	601a      	str	r2, [r3, #0]
}
 8002c78:	4770      	bx	lr
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	0000aaaa 	.word	0x0000aaaa

08002c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c82:	0004      	movs	r4, r0
 8002c84:	b085      	sub	sp, #20
   uint32_t tickstart = 0U;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d104      	bne.n	8002c94 <HAL_RCC_OscConfig+0x14>
 8002c8a:	2189      	movs	r1, #137	; 0x89
 8002c8c:	48b8      	ldr	r0, [pc, #736]	; (8002f70 <HAL_RCC_OscConfig+0x2f0>)
 8002c8e:	0049      	lsls	r1, r1, #1
 8002c90:	f7ff fb2b 	bl	80022ea <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x28>
 8002c9a:	06db      	lsls	r3, r3, #27
 8002c9c:	d104      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x28>
 8002c9e:	2114      	movs	r1, #20
 8002ca0:	48b3      	ldr	r0, [pc, #716]	; (8002f70 <HAL_RCC_OscConfig+0x2f0>)
 8002ca2:	31ff      	adds	r1, #255	; 0xff
 8002ca4:	f7ff fb21 	bl	80022ea <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	07db      	lsls	r3, r3, #31
 8002cac:	d448      	bmi.n	8002d40 <HAL_RCC_OscConfig+0xc0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	079b      	lsls	r3, r3, #30
 8002cb2:	d500      	bpl.n	8002cb6 <HAL_RCC_OscConfig+0x36>
 8002cb4:	e0a5      	b.n	8002e02 <HAL_RCC_OscConfig+0x182>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	071b      	lsls	r3, r3, #28
 8002cba:	d500      	bpl.n	8002cbe <HAL_RCC_OscConfig+0x3e>
 8002cbc:	e0f0      	b.n	8002ea0 <HAL_RCC_OscConfig+0x220>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	075b      	lsls	r3, r3, #29
 8002cc2:	d500      	bpl.n	8002cc6 <HAL_RCC_OscConfig+0x46>
 8002cc4:	e11b      	b.n	8002efe <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	06db      	lsls	r3, r3, #27
 8002cca:	d52b      	bpl.n	8002d24 <HAL_RCC_OscConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 8002ccc:	6963      	ldr	r3, [r4, #20]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d906      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x60>
 8002cd2:	3305      	adds	r3, #5
 8002cd4:	d004      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x60>
 8002cd6:	2180      	movs	r1, #128	; 0x80
 8002cd8:	48a5      	ldr	r0, [pc, #660]	; (8002f70 <HAL_RCC_OscConfig+0x2f0>)
 8002cda:	0089      	lsls	r1, r1, #2
 8002cdc:	f7ff fb05 	bl	80022ea <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 8002ce0:	69a3      	ldr	r3, [r4, #24]
 8002ce2:	2b1f      	cmp	r3, #31
 8002ce4:	d903      	bls.n	8002cee <HAL_RCC_OscConfig+0x6e>
 8002ce6:	49a3      	ldr	r1, [pc, #652]	; (8002f74 <HAL_RCC_OscConfig+0x2f4>)
 8002ce8:	48a1      	ldr	r0, [pc, #644]	; (8002f70 <HAL_RCC_OscConfig+0x2f0>)
 8002cea:	f7ff fafe 	bl	80022ea <assert_failed>

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002cee:	6962      	ldr	r2, [r4, #20]
 8002cf0:	4da1      	ldr	r5, [pc, #644]	; (8002f78 <HAL_RCC_OscConfig+0x2f8>)
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	2a01      	cmp	r2, #1
 8002cf6:	d000      	beq.n	8002cfa <HAL_RCC_OscConfig+0x7a>
 8002cf8:	e18d      	b.n	8003016 <HAL_RCC_OscConfig+0x396>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cfa:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cfc:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8002d02:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002d04:	431a      	orrs	r2, r3
 8002d06:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002d08:	f7ff fc40 	bl	800258c <HAL_GetTick>
 8002d0c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d0e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002d10:	4233      	tst	r3, r6
 8002d12:	d100      	bne.n	8002d16 <HAL_RCC_OscConfig+0x96>
 8002d14:	e178      	b.n	8003008 <HAL_RCC_OscConfig+0x388>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d16:	21f8      	movs	r1, #248	; 0xf8
 8002d18:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002d1a:	69a3      	ldr	r3, [r4, #24]
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4313      	orrs	r3, r2
 8002d22:	636b      	str	r3, [r5, #52]	; 0x34
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002d24:	6a23      	ldr	r3, [r4, #32]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d904      	bls.n	8002d34 <HAL_RCC_OscConfig+0xb4>
 8002d2a:	219d      	movs	r1, #157	; 0x9d
 8002d2c:	4890      	ldr	r0, [pc, #576]	; (8002f70 <HAL_RCC_OscConfig+0x2f0>)
 8002d2e:	0089      	lsls	r1, r1, #2
 8002d30:	f7ff fadb 	bl	80022ea <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d34:	6a22      	ldr	r2, [r4, #32]
 8002d36:	2a00      	cmp	r2, #0
 8002d38:	d000      	beq.n	8002d3c <HAL_RCC_OscConfig+0xbc>
 8002d3a:	e187      	b.n	800304c <HAL_RCC_OscConfig+0x3cc>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	e01d      	b.n	8002d7c <HAL_RCC_OscConfig+0xfc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002d40:	6863      	ldr	r3, [r4, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d906      	bls.n	8002d54 <HAL_RCC_OscConfig+0xd4>
 8002d46:	2b05      	cmp	r3, #5
 8002d48:	d004      	beq.n	8002d54 <HAL_RCC_OscConfig+0xd4>
 8002d4a:	211a      	movs	r1, #26
 8002d4c:	4888      	ldr	r0, [pc, #544]	; (8002f70 <HAL_RCC_OscConfig+0x2f0>)
 8002d4e:	31ff      	adds	r1, #255	; 0xff
 8002d50:	f7ff facb 	bl	80022ea <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d54:	210c      	movs	r1, #12
 8002d56:	4d88      	ldr	r5, [pc, #544]	; (8002f78 <HAL_RCC_OscConfig+0x2f8>)
 8002d58:	686a      	ldr	r2, [r5, #4]
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	2a04      	cmp	r2, #4
 8002d5e:	d006      	beq.n	8002d6e <HAL_RCC_OscConfig+0xee>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d60:	686b      	ldr	r3, [r5, #4]
 8002d62:	400b      	ands	r3, r1
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCC_OscConfig+0x100>
 8002d68:	686b      	ldr	r3, [r5, #4]
 8002d6a:	03db      	lsls	r3, r3, #15
 8002d6c:	d508      	bpl.n	8002d80 <HAL_RCC_OscConfig+0x100>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6e:	682b      	ldr	r3, [r5, #0]
 8002d70:	039b      	lsls	r3, r3, #14
 8002d72:	d59c      	bpl.n	8002cae <HAL_RCC_OscConfig+0x2e>
 8002d74:	6863      	ldr	r3, [r4, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d199      	bne.n	8002cae <HAL_RCC_OscConfig+0x2e>
        return HAL_ERROR;
 8002d7a:	2001      	movs	r0, #1
}
 8002d7c:	b005      	add	sp, #20
 8002d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d80:	6863      	ldr	r3, [r4, #4]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d114      	bne.n	8002db0 <HAL_RCC_OscConfig+0x130>
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	682a      	ldr	r2, [r5, #0]
 8002d8a:	025b      	lsls	r3, r3, #9
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d90:	f7ff fbfc 	bl	800258c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d94:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002d96:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d98:	02b6      	lsls	r6, r6, #10
 8002d9a:	682b      	ldr	r3, [r5, #0]
 8002d9c:	4233      	tst	r3, r6
 8002d9e:	d000      	beq.n	8002da2 <HAL_RCC_OscConfig+0x122>
 8002da0:	e785      	b.n	8002cae <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da2:	f7ff fbf3 	bl	800258c <HAL_GetTick>
 8002da6:	1bc0      	subs	r0, r0, r7
 8002da8:	2864      	cmp	r0, #100	; 0x64
 8002daa:	d9f6      	bls.n	8002d9a <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 8002dac:	2003      	movs	r0, #3
 8002dae:	e7e5      	b.n	8002d7c <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d116      	bne.n	8002de2 <HAL_RCC_OscConfig+0x162>
 8002db4:	682b      	ldr	r3, [r5, #0]
 8002db6:	4a71      	ldr	r2, [pc, #452]	; (8002f7c <HAL_RCC_OscConfig+0x2fc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db8:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dba:	4013      	ands	r3, r2
 8002dbc:	602b      	str	r3, [r5, #0]
 8002dbe:	682b      	ldr	r3, [r5, #0]
 8002dc0:	4a6f      	ldr	r2, [pc, #444]	; (8002f80 <HAL_RCC_OscConfig+0x300>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc2:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002dc8:	f7ff fbe0 	bl	800258c <HAL_GetTick>
 8002dcc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	682b      	ldr	r3, [r5, #0]
 8002dd0:	4233      	tst	r3, r6
 8002dd2:	d100      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x156>
 8002dd4:	e76b      	b.n	8002cae <HAL_RCC_OscConfig+0x2e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd6:	f7ff fbd9 	bl	800258c <HAL_GetTick>
 8002dda:	1bc0      	subs	r0, r0, r7
 8002ddc:	2864      	cmp	r0, #100	; 0x64
 8002dde:	d9f6      	bls.n	8002dce <HAL_RCC_OscConfig+0x14e>
 8002de0:	e7e4      	b.n	8002dac <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d105      	bne.n	8002df2 <HAL_RCC_OscConfig+0x172>
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	682a      	ldr	r2, [r5, #0]
 8002dea:	02db      	lsls	r3, r3, #11
 8002dec:	4313      	orrs	r3, r2
 8002dee:	602b      	str	r3, [r5, #0]
 8002df0:	e7c9      	b.n	8002d86 <HAL_RCC_OscConfig+0x106>
 8002df2:	682b      	ldr	r3, [r5, #0]
 8002df4:	4a61      	ldr	r2, [pc, #388]	; (8002f7c <HAL_RCC_OscConfig+0x2fc>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	602b      	str	r3, [r5, #0]
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	4a60      	ldr	r2, [pc, #384]	; (8002f80 <HAL_RCC_OscConfig+0x300>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	e7c5      	b.n	8002d8e <HAL_RCC_OscConfig+0x10e>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002e02:	68e3      	ldr	r3, [r4, #12]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d904      	bls.n	8002e12 <HAL_RCC_OscConfig+0x192>
 8002e08:	214e      	movs	r1, #78	; 0x4e
 8002e0a:	4859      	ldr	r0, [pc, #356]	; (8002f70 <HAL_RCC_OscConfig+0x2f0>)
 8002e0c:	31ff      	adds	r1, #255	; 0xff
 8002e0e:	f7ff fa6c 	bl	80022ea <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002e12:	6923      	ldr	r3, [r4, #16]
 8002e14:	2b1f      	cmp	r3, #31
 8002e16:	d904      	bls.n	8002e22 <HAL_RCC_OscConfig+0x1a2>
 8002e18:	21a7      	movs	r1, #167	; 0xa7
 8002e1a:	4855      	ldr	r0, [pc, #340]	; (8002f70 <HAL_RCC_OscConfig+0x2f0>)
 8002e1c:	0049      	lsls	r1, r1, #1
 8002e1e:	f7ff fa64 	bl	80022ea <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e22:	220c      	movs	r2, #12
 8002e24:	4d54      	ldr	r5, [pc, #336]	; (8002f78 <HAL_RCC_OscConfig+0x2f8>)
 8002e26:	686b      	ldr	r3, [r5, #4]
 8002e28:	4213      	tst	r3, r2
 8002e2a:	d006      	beq.n	8002e3a <HAL_RCC_OscConfig+0x1ba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e2c:	686b      	ldr	r3, [r5, #4]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d110      	bne.n	8002e56 <HAL_RCC_OscConfig+0x1d6>
 8002e34:	686b      	ldr	r3, [r5, #4]
 8002e36:	03db      	lsls	r3, r3, #15
 8002e38:	d40d      	bmi.n	8002e56 <HAL_RCC_OscConfig+0x1d6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	682b      	ldr	r3, [r5, #0]
 8002e3c:	079b      	lsls	r3, r3, #30
 8002e3e:	d502      	bpl.n	8002e46 <HAL_RCC_OscConfig+0x1c6>
 8002e40:	68e3      	ldr	r3, [r4, #12]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d199      	bne.n	8002d7a <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e46:	21f8      	movs	r1, #248	; 0xf8
 8002e48:	682a      	ldr	r2, [r5, #0]
 8002e4a:	6923      	ldr	r3, [r4, #16]
 8002e4c:	438a      	bics	r2, r1
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4313      	orrs	r3, r2
 8002e52:	602b      	str	r3, [r5, #0]
 8002e54:	e72f      	b.n	8002cb6 <HAL_RCC_OscConfig+0x36>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e56:	68e2      	ldr	r2, [r4, #12]
 8002e58:	2301      	movs	r3, #1
 8002e5a:	2a00      	cmp	r2, #0
 8002e5c:	d00f      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_ENABLE();
 8002e5e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e60:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8002e62:	4313      	orrs	r3, r2
 8002e64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e66:	f7ff fb91 	bl	800258c <HAL_GetTick>
 8002e6a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	682b      	ldr	r3, [r5, #0]
 8002e6e:	4233      	tst	r3, r6
 8002e70:	d1e9      	bne.n	8002e46 <HAL_RCC_OscConfig+0x1c6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e72:	f7ff fb8b 	bl	800258c <HAL_GetTick>
 8002e76:	1bc0      	subs	r0, r0, r7
 8002e78:	2802      	cmp	r0, #2
 8002e7a:	d9f7      	bls.n	8002e6c <HAL_RCC_OscConfig+0x1ec>
 8002e7c:	e796      	b.n	8002dac <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8002e7e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e80:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8002e82:	439a      	bics	r2, r3
 8002e84:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8002e86:	f7ff fb81 	bl	800258c <HAL_GetTick>
 8002e8a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8c:	682b      	ldr	r3, [r5, #0]
 8002e8e:	4233      	tst	r3, r6
 8002e90:	d100      	bne.n	8002e94 <HAL_RCC_OscConfig+0x214>
 8002e92:	e710      	b.n	8002cb6 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e94:	f7ff fb7a 	bl	800258c <HAL_GetTick>
 8002e98:	1bc0      	subs	r0, r0, r7
 8002e9a:	2802      	cmp	r0, #2
 8002e9c:	d9f6      	bls.n	8002e8c <HAL_RCC_OscConfig+0x20c>
 8002e9e:	e785      	b.n	8002dac <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002ea0:	69e3      	ldr	r3, [r4, #28]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d904      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x230>
 8002ea6:	21c7      	movs	r1, #199	; 0xc7
 8002ea8:	4831      	ldr	r0, [pc, #196]	; (8002f70 <HAL_RCC_OscConfig+0x2f0>)
 8002eaa:	0049      	lsls	r1, r1, #1
 8002eac:	f7ff fa1d 	bl	80022ea <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eb0:	69e2      	ldr	r2, [r4, #28]
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	4d30      	ldr	r5, [pc, #192]	; (8002f78 <HAL_RCC_OscConfig+0x2f8>)
 8002eb6:	2a00      	cmp	r2, #0
 8002eb8:	d010      	beq.n	8002edc <HAL_RCC_OscConfig+0x25c>
      __HAL_RCC_LSI_ENABLE();
 8002eba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebc:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002ec2:	f7ff fb63 	bl	800258c <HAL_GetTick>
 8002ec6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002eca:	4233      	tst	r3, r6
 8002ecc:	d000      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x250>
 8002ece:	e6f6      	b.n	8002cbe <HAL_RCC_OscConfig+0x3e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7ff fb5c 	bl	800258c <HAL_GetTick>
 8002ed4:	1bc0      	subs	r0, r0, r7
 8002ed6:	2802      	cmp	r0, #2
 8002ed8:	d9f6      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x248>
 8002eda:	e767      	b.n	8002dac <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_LSI_DISABLE();
 8002edc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ede:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8002ee0:	439a      	bics	r2, r3
 8002ee2:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002ee4:	f7ff fb52 	bl	800258c <HAL_GetTick>
 8002ee8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002eec:	4233      	tst	r3, r6
 8002eee:	d100      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x272>
 8002ef0:	e6e5      	b.n	8002cbe <HAL_RCC_OscConfig+0x3e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef2:	f7ff fb4b 	bl	800258c <HAL_GetTick>
 8002ef6:	1bc0      	subs	r0, r0, r7
 8002ef8:	2802      	cmp	r0, #2
 8002efa:	d9f6      	bls.n	8002eea <HAL_RCC_OscConfig+0x26a>
 8002efc:	e756      	b.n	8002dac <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002efe:	68a3      	ldr	r3, [r4, #8]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d906      	bls.n	8002f12 <HAL_RCC_OscConfig+0x292>
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	d004      	beq.n	8002f12 <HAL_RCC_OscConfig+0x292>
 8002f08:	21dd      	movs	r1, #221	; 0xdd
 8002f0a:	4819      	ldr	r0, [pc, #100]	; (8002f70 <HAL_RCC_OscConfig+0x2f0>)
 8002f0c:	0049      	lsls	r1, r1, #1
 8002f0e:	f7ff f9ec 	bl	80022ea <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f12:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002f14:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f16:	4d18      	ldr	r5, [pc, #96]	; (8002f78 <HAL_RCC_OscConfig+0x2f8>)
 8002f18:	0552      	lsls	r2, r2, #21
 8002f1a:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002f1c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1e:	4213      	tst	r3, r2
 8002f20:	d108      	bne.n	8002f34 <HAL_RCC_OscConfig+0x2b4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	69eb      	ldr	r3, [r5, #28]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61eb      	str	r3, [r5, #28]
 8002f28:	69eb      	ldr	r3, [r5, #28]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	9303      	str	r3, [sp, #12]
 8002f2e:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002f30:	2301      	movs	r3, #1
 8002f32:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	2780      	movs	r7, #128	; 0x80
 8002f36:	4e13      	ldr	r6, [pc, #76]	; (8002f84 <HAL_RCC_OscConfig+0x304>)
 8002f38:	007f      	lsls	r7, r7, #1
 8002f3a:	6833      	ldr	r3, [r6, #0]
 8002f3c:	423b      	tst	r3, r7
 8002f3e:	d006      	beq.n	8002f4e <HAL_RCC_OscConfig+0x2ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f40:	68a3      	ldr	r3, [r4, #8]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d120      	bne.n	8002f88 <HAL_RCC_OscConfig+0x308>
 8002f46:	6a2a      	ldr	r2, [r5, #32]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	622b      	str	r3, [r5, #32]
 8002f4c:	e03d      	b.n	8002fca <HAL_RCC_OscConfig+0x34a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4e:	6833      	ldr	r3, [r6, #0]
 8002f50:	433b      	orrs	r3, r7
 8002f52:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002f54:	f7ff fb1a 	bl	800258c <HAL_GetTick>
 8002f58:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5a:	6833      	ldr	r3, [r6, #0]
 8002f5c:	423b      	tst	r3, r7
 8002f5e:	d1ef      	bne.n	8002f40 <HAL_RCC_OscConfig+0x2c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f60:	f7ff fb14 	bl	800258c <HAL_GetTick>
 8002f64:	9b01      	ldr	r3, [sp, #4]
 8002f66:	1ac0      	subs	r0, r0, r3
 8002f68:	2864      	cmp	r0, #100	; 0x64
 8002f6a:	d9f6      	bls.n	8002f5a <HAL_RCC_OscConfig+0x2da>
 8002f6c:	e71e      	b.n	8002dac <HAL_RCC_OscConfig+0x12c>
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	080054b3 	.word	0x080054b3
 8002f74:	00000201 	.word	0x00000201
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	fffeffff 	.word	0xfffeffff
 8002f80:	fffbffff 	.word	0xfffbffff
 8002f84:	40007000 	.word	0x40007000
 8002f88:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d114      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x338>
 8002f8e:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f90:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f92:	4393      	bics	r3, r2
 8002f94:	622b      	str	r3, [r5, #32]
 8002f96:	6a2b      	ldr	r3, [r5, #32]
 8002f98:	3203      	adds	r2, #3
 8002f9a:	4393      	bics	r3, r2
 8002f9c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002f9e:	f7ff faf5 	bl	800258c <HAL_GetTick>
 8002fa2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa4:	6a2b      	ldr	r3, [r5, #32]
 8002fa6:	423b      	tst	r3, r7
 8002fa8:	d025      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x376>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7ff faef 	bl	800258c <HAL_GetTick>
 8002fae:	4b64      	ldr	r3, [pc, #400]	; (8003140 <HAL_RCC_OscConfig+0x4c0>)
 8002fb0:	1b80      	subs	r0, r0, r6
 8002fb2:	4298      	cmp	r0, r3
 8002fb4:	d9f6      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x324>
 8002fb6:	e6f9      	b.n	8002dac <HAL_RCC_OscConfig+0x12c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d10b      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x354>
 8002fbc:	6a29      	ldr	r1, [r5, #32]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	622b      	str	r3, [r5, #32]
 8002fc4:	6a2b      	ldr	r3, [r5, #32]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8002fca:	f7ff fadf 	bl	800258c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8002fd0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	e00d      	b.n	8002ff0 <HAL_RCC_OscConfig+0x370>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd4:	6a2b      	ldr	r3, [r5, #32]
 8002fd6:	4393      	bics	r3, r2
 8002fd8:	2204      	movs	r2, #4
 8002fda:	622b      	str	r3, [r5, #32]
 8002fdc:	6a2b      	ldr	r3, [r5, #32]
 8002fde:	4393      	bics	r3, r2
 8002fe0:	e7b3      	b.n	8002f4a <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe2:	f7ff fad3 	bl	800258c <HAL_GetTick>
 8002fe6:	4b56      	ldr	r3, [pc, #344]	; (8003140 <HAL_RCC_OscConfig+0x4c0>)
 8002fe8:	1b80      	subs	r0, r0, r6
 8002fea:	4298      	cmp	r0, r3
 8002fec:	d900      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x370>
 8002fee:	e6dd      	b.n	8002dac <HAL_RCC_OscConfig+0x12c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff0:	6a2b      	ldr	r3, [r5, #32]
 8002ff2:	423b      	tst	r3, r7
 8002ff4:	d0f5      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x362>
    if(pwrclkchanged == SET)
 8002ff6:	9b00      	ldr	r3, [sp, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d000      	beq.n	8002ffe <HAL_RCC_OscConfig+0x37e>
 8002ffc:	e663      	b.n	8002cc6 <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffe:	69eb      	ldr	r3, [r5, #28]
 8003000:	4a50      	ldr	r2, [pc, #320]	; (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	4013      	ands	r3, r2
 8003004:	61eb      	str	r3, [r5, #28]
 8003006:	e65e      	b.n	8002cc6 <HAL_RCC_OscConfig+0x46>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003008:	f7ff fac0 	bl	800258c <HAL_GetTick>
 800300c:	1bc0      	subs	r0, r0, r7
 800300e:	2802      	cmp	r0, #2
 8003010:	d800      	bhi.n	8003014 <HAL_RCC_OscConfig+0x394>
 8003012:	e67c      	b.n	8002d0e <HAL_RCC_OscConfig+0x8e>
 8003014:	e6ca      	b.n	8002dac <HAL_RCC_OscConfig+0x12c>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003016:	3205      	adds	r2, #5
 8003018:	d103      	bne.n	8003022 <HAL_RCC_OscConfig+0x3a2>
      __HAL_RCC_HSI14ADC_ENABLE();
 800301a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800301c:	439a      	bics	r2, r3
 800301e:	636a      	str	r2, [r5, #52]	; 0x34
 8003020:	e679      	b.n	8002d16 <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003022:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003024:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003026:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8003028:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800302a:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800302c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800302e:	4393      	bics	r3, r2
 8003030:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003032:	f7ff faab 	bl	800258c <HAL_GetTick>
 8003036:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003038:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800303a:	4233      	tst	r3, r6
 800303c:	d100      	bne.n	8003040 <HAL_RCC_OscConfig+0x3c0>
 800303e:	e671      	b.n	8002d24 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003040:	f7ff faa4 	bl	800258c <HAL_GetTick>
 8003044:	1bc0      	subs	r0, r0, r7
 8003046:	2802      	cmp	r0, #2
 8003048:	d9f6      	bls.n	8003038 <HAL_RCC_OscConfig+0x3b8>
 800304a:	e6af      	b.n	8002dac <HAL_RCC_OscConfig+0x12c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800304c:	210c      	movs	r1, #12
 800304e:	4d3e      	ldr	r5, [pc, #248]	; (8003148 <HAL_RCC_OscConfig+0x4c8>)
      return HAL_ERROR;
 8003050:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003052:	686b      	ldr	r3, [r5, #4]
 8003054:	400b      	ands	r3, r1
 8003056:	2b08      	cmp	r3, #8
 8003058:	d100      	bne.n	800305c <HAL_RCC_OscConfig+0x3dc>
 800305a:	e68f      	b.n	8002d7c <HAL_RCC_OscConfig+0xfc>
 800305c:	4e3b      	ldr	r6, [pc, #236]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800305e:	2a02      	cmp	r2, #2
 8003060:	d15b      	bne.n	800311a <HAL_RCC_OscConfig+0x49a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003062:	4b3b      	ldr	r3, [pc, #236]	; (8003150 <HAL_RCC_OscConfig+0x4d0>)
 8003064:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003066:	421a      	tst	r2, r3
 8003068:	d003      	beq.n	8003072 <HAL_RCC_OscConfig+0x3f2>
 800306a:	493a      	ldr	r1, [pc, #232]	; (8003154 <HAL_RCC_OscConfig+0x4d4>)
 800306c:	483a      	ldr	r0, [pc, #232]	; (8003158 <HAL_RCC_OscConfig+0x4d8>)
 800306e:	f7ff f93c 	bl	80022ea <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003072:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003074:	4939      	ldr	r1, [pc, #228]	; (800315c <HAL_RCC_OscConfig+0x4dc>)
 8003076:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <HAL_RCC_OscConfig+0x4e0>)
 8003078:	4011      	ands	r1, r2
 800307a:	4013      	ands	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_RCC_OscConfig+0x426>
 800307e:	2080      	movs	r0, #128	; 0x80
 8003080:	0340      	lsls	r0, r0, #13
 8003082:	4283      	cmp	r3, r0
 8003084:	d00f      	beq.n	80030a6 <HAL_RCC_OscConfig+0x426>
 8003086:	2080      	movs	r0, #128	; 0x80
 8003088:	0380      	lsls	r0, r0, #14
 800308a:	4283      	cmp	r3, r0
 800308c:	d00b      	beq.n	80030a6 <HAL_RCC_OscConfig+0x426>
 800308e:	23c0      	movs	r3, #192	; 0xc0
 8003090:	039b      	lsls	r3, r3, #14
 8003092:	4299      	cmp	r1, r3
 8003094:	d007      	beq.n	80030a6 <HAL_RCC_OscConfig+0x426>
 8003096:	23e0      	movs	r3, #224	; 0xe0
 8003098:	039b      	lsls	r3, r3, #14
 800309a:	429a      	cmp	r2, r3
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_OscConfig+0x426>
 800309e:	4931      	ldr	r1, [pc, #196]	; (8003164 <HAL_RCC_OscConfig+0x4e4>)
 80030a0:	482d      	ldr	r0, [pc, #180]	; (8003158 <HAL_RCC_OscConfig+0x4d8>)
 80030a2:	f7ff f922 	bl	80022ea <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 80030a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030a8:	2b0f      	cmp	r3, #15
 80030aa:	d903      	bls.n	80030b4 <HAL_RCC_OscConfig+0x434>
 80030ac:	492e      	ldr	r1, [pc, #184]	; (8003168 <HAL_RCC_OscConfig+0x4e8>)
 80030ae:	482a      	ldr	r0, [pc, #168]	; (8003158 <HAL_RCC_OscConfig+0x4d8>)
 80030b0:	f7ff f91b 	bl	80022ea <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 80030b4:	682b      	ldr	r3, [r5, #0]
 80030b6:	401e      	ands	r6, r3
 80030b8:	602e      	str	r6, [r5, #0]
        tickstart = HAL_GetTick();
 80030ba:	f7ff fa67 	bl	800258c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030be:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80030c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c2:	04b6      	lsls	r6, r6, #18
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	4233      	tst	r3, r6
 80030c8:	d121      	bne.n	800310e <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ca:	220f      	movs	r2, #15
 80030cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030ce:	4393      	bics	r3, r2
 80030d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030d2:	4313      	orrs	r3, r2
 80030d4:	62eb      	str	r3, [r5, #44]	; 0x2c
 80030d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80030d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030da:	686a      	ldr	r2, [r5, #4]
 80030dc:	430b      	orrs	r3, r1
 80030de:	4923      	ldr	r1, [pc, #140]	; (800316c <HAL_RCC_OscConfig+0x4ec>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e0:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e2:	400a      	ands	r2, r1
 80030e4:	4313      	orrs	r3, r2
 80030e6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	682a      	ldr	r2, [r5, #0]
 80030ec:	045b      	lsls	r3, r3, #17
 80030ee:	4313      	orrs	r3, r2
 80030f0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80030f2:	f7ff fa4b 	bl	800258c <HAL_GetTick>
 80030f6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f8:	04a4      	lsls	r4, r4, #18
 80030fa:	682b      	ldr	r3, [r5, #0]
 80030fc:	4223      	tst	r3, r4
 80030fe:	d000      	beq.n	8003102 <HAL_RCC_OscConfig+0x482>
 8003100:	e61c      	b.n	8002d3c <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003102:	f7ff fa43 	bl	800258c <HAL_GetTick>
 8003106:	1b80      	subs	r0, r0, r6
 8003108:	2802      	cmp	r0, #2
 800310a:	d9f6      	bls.n	80030fa <HAL_RCC_OscConfig+0x47a>
 800310c:	e64e      	b.n	8002dac <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800310e:	f7ff fa3d 	bl	800258c <HAL_GetTick>
 8003112:	1bc0      	subs	r0, r0, r7
 8003114:	2802      	cmp	r0, #2
 8003116:	d9d5      	bls.n	80030c4 <HAL_RCC_OscConfig+0x444>
 8003118:	e648      	b.n	8002dac <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_PLL_DISABLE();
 800311a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311c:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800311e:	401e      	ands	r6, r3
 8003120:	602e      	str	r6, [r5, #0]
        tickstart = HAL_GetTick();
 8003122:	f7ff fa33 	bl	800258c <HAL_GetTick>
 8003126:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003128:	04a4      	lsls	r4, r4, #18
 800312a:	682b      	ldr	r3, [r5, #0]
 800312c:	4223      	tst	r3, r4
 800312e:	d100      	bne.n	8003132 <HAL_RCC_OscConfig+0x4b2>
 8003130:	e604      	b.n	8002d3c <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003132:	f7ff fa2b 	bl	800258c <HAL_GetTick>
 8003136:	1b80      	subs	r0, r0, r6
 8003138:	2802      	cmp	r0, #2
 800313a:	d9f6      	bls.n	800312a <HAL_RCC_OscConfig+0x4aa>
 800313c:	e636      	b.n	8002dac <HAL_RCC_OscConfig+0x12c>
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	00001388 	.word	0x00001388
 8003144:	efffffff 	.word	0xefffffff
 8003148:	40021000 	.word	0x40021000
 800314c:	feffffff 	.word	0xfeffffff
 8003150:	fffeffff 	.word	0xfffeffff
 8003154:	0000027d 	.word	0x0000027d
 8003158:	080054b3 	.word	0x080054b3
 800315c:	fffbffff 	.word	0xfffbffff
 8003160:	fff3ffff 	.word	0xfff3ffff
 8003164:	0000027e 	.word	0x0000027e
 8003168:	0000027f 	.word	0x0000027f
 800316c:	ffc2ffff 	.word	0xffc2ffff

08003170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003170:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003172:	4c14      	ldr	r4, [pc, #80]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8003174:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003176:	2210      	movs	r2, #16
 8003178:	0021      	movs	r1, r4
 800317a:	4668      	mov	r0, sp
 800317c:	f000 ff5e 	bl	800403c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003180:	0021      	movs	r1, r4
 8003182:	ad04      	add	r5, sp, #16
 8003184:	2210      	movs	r2, #16
 8003186:	3110      	adds	r1, #16
 8003188:	0028      	movs	r0, r5
 800318a:	f000 ff57 	bl	800403c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800318e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003190:	4e0d      	ldr	r6, [pc, #52]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x58>)
 8003192:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003194:	401a      	ands	r2, r3
 8003196:	2a08      	cmp	r2, #8
 8003198:	d111      	bne.n	80031be <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800319a:	200f      	movs	r0, #15
 800319c:	466a      	mov	r2, sp
 800319e:	0c99      	lsrs	r1, r3, #18
 80031a0:	4001      	ands	r1, r0
 80031a2:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80031a4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80031a6:	4002      	ands	r2, r0
 80031a8:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80031aa:	03db      	lsls	r3, r3, #15
 80031ac:	d505      	bpl.n	80031ba <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80031ae:	4807      	ldr	r0, [pc, #28]	; (80031cc <HAL_RCC_GetSysClockFreq+0x5c>)
 80031b0:	f7fc ffc6 	bl	8000140 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80031b4:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80031b6:	b008      	add	sp, #32
 80031b8:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80031ba:	4805      	ldr	r0, [pc, #20]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x60>)
 80031bc:	e7fa      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 80031be:	4803      	ldr	r0, [pc, #12]	; (80031cc <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80031c0:	e7f9      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x46>
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	080040a8 	.word	0x080040a8
 80031c8:	40021000 	.word	0x40021000
 80031cc:	007a1200 	.word	0x007a1200
 80031d0:	003d0900 	.word	0x003d0900

080031d4 <HAL_RCC_ClockConfig>:
{
 80031d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031d6:	0004      	movs	r4, r0
 80031d8:	000f      	movs	r7, r1
  assert_param(RCC_ClkInitStruct != NULL);
 80031da:	2800      	cmp	r0, #0
 80031dc:	d103      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x12>
 80031de:	4968      	ldr	r1, [pc, #416]	; (8003380 <HAL_RCC_ClockConfig+0x1ac>)
 80031e0:	4868      	ldr	r0, [pc, #416]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 80031e2:	f7ff f882 	bl	80022ea <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	075b      	lsls	r3, r3, #29
 80031ea:	d103      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x20>
 80031ec:	4966      	ldr	r1, [pc, #408]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 80031ee:	4865      	ldr	r0, [pc, #404]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 80031f0:	f7ff f87b 	bl	80022ea <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80031f4:	2f01      	cmp	r7, #1
 80031f6:	d904      	bls.n	8003202 <HAL_RCC_ClockConfig+0x2e>
 80031f8:	21b7      	movs	r1, #183	; 0xb7
 80031fa:	4862      	ldr	r0, [pc, #392]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 80031fc:	0089      	lsls	r1, r1, #2
 80031fe:	f7ff f874 	bl	80022ea <assert_failed>
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003202:	2201      	movs	r2, #1
 8003204:	4d61      	ldr	r5, [pc, #388]	; (800338c <HAL_RCC_ClockConfig+0x1b8>)
 8003206:	682b      	ldr	r3, [r5, #0]
 8003208:	4013      	ands	r3, r2
 800320a:	429f      	cmp	r7, r3
 800320c:	d81f      	bhi.n	800324e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	079b      	lsls	r3, r3, #30
 8003212:	d426      	bmi.n	8003262 <HAL_RCC_ClockConfig+0x8e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	07db      	lsls	r3, r3, #31
 8003218:	d445      	bmi.n	80032a6 <HAL_RCC_ClockConfig+0xd2>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800321a:	2301      	movs	r3, #1
 800321c:	682a      	ldr	r2, [r5, #0]
 800321e:	401a      	ands	r2, r3
 8003220:	4297      	cmp	r7, r2
 8003222:	d200      	bcs.n	8003226 <HAL_RCC_ClockConfig+0x52>
 8003224:	e08a      	b.n	800333c <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	4d59      	ldr	r5, [pc, #356]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	075b      	lsls	r3, r3, #29
 800322c:	d500      	bpl.n	8003230 <HAL_RCC_ClockConfig+0x5c>
 800322e:	e08d      	b.n	800334c <HAL_RCC_ClockConfig+0x178>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003230:	f7ff ff9e 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8003234:	686b      	ldr	r3, [r5, #4]
 8003236:	4a57      	ldr	r2, [pc, #348]	; (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	061b      	lsls	r3, r3, #24
 800323a:	0f1b      	lsrs	r3, r3, #28
 800323c:	5cd3      	ldrb	r3, [r2, r3]
 800323e:	40d8      	lsrs	r0, r3
 8003240:	4b55      	ldr	r3, [pc, #340]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003244:	2000      	movs	r0, #0
 8003246:	f7ff f977 	bl	8002538 <HAL_InitTick>
  return HAL_OK;
 800324a:	2000      	movs	r0, #0
 800324c:	e008      	b.n	8003260 <HAL_RCC_ClockConfig+0x8c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	682b      	ldr	r3, [r5, #0]
 8003250:	4393      	bics	r3, r2
 8003252:	433b      	orrs	r3, r7
 8003254:	602b      	str	r3, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003256:	682b      	ldr	r3, [r5, #0]
 8003258:	4013      	ands	r3, r2
 800325a:	429f      	cmp	r7, r3
 800325c:	d0d7      	beq.n	800320e <HAL_RCC_ClockConfig+0x3a>
      return HAL_ERROR;
 800325e:	2001      	movs	r0, #1
}
 8003260:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003262:	68a3      	ldr	r3, [r4, #8]
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	0019      	movs	r1, r3
 8003268:	4391      	bics	r1, r2
 800326a:	d014      	beq.n	8003296 <HAL_RCC_ClockConfig+0xc2>
 800326c:	2220      	movs	r2, #32
 800326e:	0019      	movs	r1, r3
 8003270:	4391      	bics	r1, r2
 8003272:	2990      	cmp	r1, #144	; 0x90
 8003274:	d00f      	beq.n	8003296 <HAL_RCC_ClockConfig+0xc2>
 8003276:	2240      	movs	r2, #64	; 0x40
 8003278:	0019      	movs	r1, r3
 800327a:	4391      	bics	r1, r2
 800327c:	29a0      	cmp	r1, #160	; 0xa0
 800327e:	d00a      	beq.n	8003296 <HAL_RCC_ClockConfig+0xc2>
 8003280:	2210      	movs	r2, #16
 8003282:	0019      	movs	r1, r3
 8003284:	4391      	bics	r1, r2
 8003286:	29c0      	cmp	r1, #192	; 0xc0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_ClockConfig+0xc2>
 800328a:	2bf0      	cmp	r3, #240	; 0xf0
 800328c:	d003      	beq.n	8003296 <HAL_RCC_ClockConfig+0xc2>
 800328e:	4943      	ldr	r1, [pc, #268]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003290:	483c      	ldr	r0, [pc, #240]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 8003292:	f7ff f82a 	bl	80022ea <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003296:	21f0      	movs	r1, #240	; 0xf0
 8003298:	4a3d      	ldr	r2, [pc, #244]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	6853      	ldr	r3, [r2, #4]
 800329c:	438b      	bics	r3, r1
 800329e:	68a1      	ldr	r1, [r4, #8]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6053      	str	r3, [r2, #4]
 80032a4:	e7b6      	b.n	8003214 <HAL_RCC_ClockConfig+0x40>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80032a6:	6863      	ldr	r3, [r4, #4]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d903      	bls.n	80032b4 <HAL_RCC_ClockConfig+0xe0>
 80032ac:	493c      	ldr	r1, [pc, #240]	; (80033a0 <HAL_RCC_ClockConfig+0x1cc>)
 80032ae:	4835      	ldr	r0, [pc, #212]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 80032b0:	f7ff f81b 	bl	80022ea <assert_failed>
 80032b4:	4e36      	ldr	r6, [pc, #216]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b6:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b8:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ba:	2a01      	cmp	r2, #1
 80032bc:	d11a      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	039b      	lsls	r3, r3, #14
 80032c0:	d5cd      	bpl.n	800325e <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032c2:	2103      	movs	r1, #3
 80032c4:	6873      	ldr	r3, [r6, #4]
 80032c6:	438b      	bics	r3, r1
 80032c8:	4313      	orrs	r3, r2
 80032ca:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80032cc:	f7ff f95e 	bl	800258c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d0:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80032d2:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d115      	bne.n	8003304 <HAL_RCC_ClockConfig+0x130>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d8:	220c      	movs	r2, #12
 80032da:	6873      	ldr	r3, [r6, #4]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d09b      	beq.n	800321a <HAL_RCC_ClockConfig+0x46>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e2:	f7ff f953 	bl	800258c <HAL_GetTick>
 80032e6:	9b01      	ldr	r3, [sp, #4]
 80032e8:	1ac0      	subs	r0, r0, r3
 80032ea:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <HAL_RCC_ClockConfig+0x1d0>)
 80032ec:	4298      	cmp	r0, r3
 80032ee:	d9f3      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 80032f0:	2003      	movs	r0, #3
 80032f2:	e7b5      	b.n	8003260 <HAL_RCC_ClockConfig+0x8c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f4:	2a02      	cmp	r2, #2
 80032f6:	d102      	bne.n	80032fe <HAL_RCC_ClockConfig+0x12a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f8:	019b      	lsls	r3, r3, #6
 80032fa:	d4e2      	bmi.n	80032c2 <HAL_RCC_ClockConfig+0xee>
 80032fc:	e7af      	b.n	800325e <HAL_RCC_ClockConfig+0x8a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fe:	079b      	lsls	r3, r3, #30
 8003300:	d4df      	bmi.n	80032c2 <HAL_RCC_ClockConfig+0xee>
 8003302:	e7ac      	b.n	800325e <HAL_RCC_ClockConfig+0x8a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003304:	2b02      	cmp	r3, #2
 8003306:	d013      	beq.n	8003330 <HAL_RCC_ClockConfig+0x15c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003308:	220c      	movs	r2, #12
 800330a:	6873      	ldr	r3, [r6, #4]
 800330c:	4213      	tst	r3, r2
 800330e:	d100      	bne.n	8003312 <HAL_RCC_ClockConfig+0x13e>
 8003310:	e783      	b.n	800321a <HAL_RCC_ClockConfig+0x46>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003312:	f7ff f93b 	bl	800258c <HAL_GetTick>
 8003316:	9b01      	ldr	r3, [sp, #4]
 8003318:	1ac0      	subs	r0, r0, r3
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_RCC_ClockConfig+0x1d0>)
 800331c:	4298      	cmp	r0, r3
 800331e:	d9f3      	bls.n	8003308 <HAL_RCC_ClockConfig+0x134>
 8003320:	e7e6      	b.n	80032f0 <HAL_RCC_ClockConfig+0x11c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003322:	f7ff f933 	bl	800258c <HAL_GetTick>
 8003326:	9b01      	ldr	r3, [sp, #4]
 8003328:	1ac0      	subs	r0, r0, r3
 800332a:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <HAL_RCC_ClockConfig+0x1d0>)
 800332c:	4298      	cmp	r0, r3
 800332e:	d8df      	bhi.n	80032f0 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003330:	220c      	movs	r2, #12
 8003332:	6873      	ldr	r3, [r6, #4]
 8003334:	4013      	ands	r3, r2
 8003336:	2b08      	cmp	r3, #8
 8003338:	d1f3      	bne.n	8003322 <HAL_RCC_ClockConfig+0x14e>
 800333a:	e76e      	b.n	800321a <HAL_RCC_ClockConfig+0x46>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333c:	682a      	ldr	r2, [r5, #0]
 800333e:	439a      	bics	r2, r3
 8003340:	602a      	str	r2, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003342:	682a      	ldr	r2, [r5, #0]
 8003344:	421a      	tst	r2, r3
 8003346:	d000      	beq.n	800334a <HAL_RCC_ClockConfig+0x176>
 8003348:	e789      	b.n	800325e <HAL_RCC_ClockConfig+0x8a>
 800334a:	e76c      	b.n	8003226 <HAL_RCC_ClockConfig+0x52>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800334c:	68e3      	ldr	r3, [r4, #12]
 800334e:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <HAL_RCC_ClockConfig+0x1d4>)
 8003350:	4213      	tst	r3, r2
 8003352:	d00d      	beq.n	8003370 <HAL_RCC_ClockConfig+0x19c>
 8003354:	21a0      	movs	r1, #160	; 0xa0
 8003356:	4a15      	ldr	r2, [pc, #84]	; (80033ac <HAL_RCC_ClockConfig+0x1d8>)
 8003358:	00c9      	lsls	r1, r1, #3
 800335a:	401a      	ands	r2, r3
 800335c:	428a      	cmp	r2, r1
 800335e:	d007      	beq.n	8003370 <HAL_RCC_ClockConfig+0x19c>
 8003360:	22c0      	movs	r2, #192	; 0xc0
 8003362:	00d2      	lsls	r2, r2, #3
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <HAL_RCC_ClockConfig+0x19c>
 8003368:	4911      	ldr	r1, [pc, #68]	; (80033b0 <HAL_RCC_ClockConfig+0x1dc>)
 800336a:	4806      	ldr	r0, [pc, #24]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 800336c:	f7fe ffbd 	bl	80022ea <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	686b      	ldr	r3, [r5, #4]
 8003372:	4a10      	ldr	r2, [pc, #64]	; (80033b4 <HAL_RCC_ClockConfig+0x1e0>)
 8003374:	4013      	ands	r3, r2
 8003376:	68e2      	ldr	r2, [r4, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	606b      	str	r3, [r5, #4]
 800337c:	e758      	b.n	8003230 <HAL_RCC_ClockConfig+0x5c>
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	000002da 	.word	0x000002da
 8003384:	080054b3 	.word	0x080054b3
 8003388:	000002db 	.word	0x000002db
 800338c:	40022000 	.word	0x40022000
 8003390:	40021000 	.word	0x40021000
 8003394:	08005237 	.word	0x08005237
 8003398:	20000008 	.word	0x20000008
 800339c:	000002f3 	.word	0x000002f3
 80033a0:	000002fa 	.word	0x000002fa
 80033a4:	00001388 	.word	0x00001388
 80033a8:	fffffbff 	.word	0xfffffbff
 80033ac:	fffffdff 	.word	0xfffffdff
 80033b0:	00000363 	.word	0x00000363
 80033b4:	fffff8ff 	.word	0xfffff8ff

080033b8 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80033b8:	4b01      	ldr	r3, [pc, #4]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80033ba:	6818      	ldr	r0, [r3, #0]
}
 80033bc:	4770      	bx	lr
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	20000008 	.word	0x20000008

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80033c6:	4a05      	ldr	r2, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	055b      	lsls	r3, r3, #21
 80033cc:	0f5b      	lsrs	r3, r3, #29
 80033ce:	5cd3      	ldrb	r3, [r2, r3]
 80033d0:	4a03      	ldr	r2, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80033d2:	6810      	ldr	r0, [r2, #0]
 80033d4:	40d8      	lsrs	r0, r3
}    
 80033d6:	4770      	bx	lr
 80033d8:	40021000 	.word	0x40021000
 80033dc:	08005247 	.word	0x08005247
 80033e0:	20000008 	.word	0x20000008

080033e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  uint32_t temp_reg = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80033e6:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033e8:	6802      	ldr	r2, [r0, #0]
{
 80033ea:	b085      	sub	sp, #20
 80033ec:	0005      	movs	r5, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d903      	bls.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x16>
 80033f2:	217e      	movs	r1, #126	; 0x7e
 80033f4:	4849      	ldr	r0, [pc, #292]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80033f6:	f7fe ff78 	bl	80022ea <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033fa:	682b      	ldr	r3, [r5, #0]
 80033fc:	03db      	lsls	r3, r3, #15
 80033fe:	d530      	bpl.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003400:	686b      	ldr	r3, [r5, #4]
 8003402:	4a47      	ldr	r2, [pc, #284]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003404:	4213      	tst	r3, r2
 8003406:	d003      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8003408:	2184      	movs	r1, #132	; 0x84
 800340a:	4844      	ldr	r0, [pc, #272]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800340c:	f7fe ff6d 	bl	80022ea <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003410:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003412:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003414:	4c43      	ldr	r4, [pc, #268]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003416:	0552      	lsls	r2, r2, #21
 8003418:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800341a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341c:	4213      	tst	r3, r2
 800341e:	d108      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003420:	69e3      	ldr	r3, [r4, #28]
 8003422:	4313      	orrs	r3, r2
 8003424:	61e3      	str	r3, [r4, #28]
 8003426:	69e3      	ldr	r3, [r4, #28]
 8003428:	4013      	ands	r3, r2
 800342a:	9303      	str	r3, [sp, #12]
 800342c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800342e:	2301      	movs	r3, #1
 8003430:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003432:	2780      	movs	r7, #128	; 0x80
 8003434:	4e3c      	ldr	r6, [pc, #240]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8003436:	007f      	lsls	r7, r7, #1
 8003438:	6833      	ldr	r3, [r6, #0]
 800343a:	423b      	tst	r3, r7
 800343c:	d038      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800343e:	22c0      	movs	r2, #192	; 0xc0
 8003440:	6a23      	ldr	r3, [r4, #32]
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003446:	d145      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003448:	6a23      	ldr	r3, [r4, #32]
 800344a:	4a35      	ldr	r2, [pc, #212]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800344c:	4013      	ands	r3, r2
 800344e:	686a      	ldr	r2, [r5, #4]
 8003450:	4313      	orrs	r3, r2
 8003452:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003454:	9b00      	ldr	r3, [sp, #0]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d103      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345a:	69e3      	ldr	r3, [r4, #28]
 800345c:	4a33      	ldr	r2, [pc, #204]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800345e:	4013      	ands	r3, r2
 8003460:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003462:	682b      	ldr	r3, [r5, #0]
 8003464:	07db      	lsls	r3, r3, #31
 8003466:	d50d      	bpl.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003468:	68ab      	ldr	r3, [r5, #8]
 800346a:	2b03      	cmp	r3, #3
 800346c:	d903      	bls.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x92>
 800346e:	21cb      	movs	r1, #203	; 0xcb
 8003470:	482a      	ldr	r0, [pc, #168]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003472:	f7fe ff3a 	bl	80022ea <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003476:	2103      	movs	r1, #3
 8003478:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800347a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800347c:	438b      	bics	r3, r1
 800347e:	68a9      	ldr	r1, [r5, #8]
 8003480:	430b      	orrs	r3, r1
 8003482:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003484:	682b      	ldr	r3, [r5, #0]
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003486:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003488:	069b      	lsls	r3, r3, #26
 800348a:	d521      	bpl.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800348c:	2310      	movs	r3, #16
 800348e:	68ea      	ldr	r2, [r5, #12]
 8003490:	439a      	bics	r2, r3
 8003492:	4282      	cmp	r2, r0
 8003494:	d003      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xba>
 8003496:	21ef      	movs	r1, #239	; 0xef
 8003498:	4820      	ldr	r0, [pc, #128]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800349a:	f7fe ff26 	bl	80022ea <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349e:	2110      	movs	r1, #16
 80034a0:	4a20      	ldr	r2, [pc, #128]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x140>)
  return HAL_OK;
 80034a2:	2000      	movs	r0, #0
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80034a6:	438b      	bics	r3, r1
 80034a8:	68e9      	ldr	r1, [r5, #12]
 80034aa:	430b      	orrs	r3, r1
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	e00f      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b0:	6833      	ldr	r3, [r6, #0]
 80034b2:	433b      	orrs	r3, r7
 80034b4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80034b6:	f7ff f869 	bl	800258c <HAL_GetTick>
 80034ba:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	6833      	ldr	r3, [r6, #0]
 80034be:	423b      	tst	r3, r7
 80034c0:	d1bd      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x5a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c2:	f7ff f863 	bl	800258c <HAL_GetTick>
 80034c6:	9b01      	ldr	r3, [sp, #4]
 80034c8:	1ac0      	subs	r0, r0, r3
 80034ca:	2864      	cmp	r0, #100	; 0x64
 80034cc:	d9f6      	bls.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
          return HAL_TIMEOUT;
 80034ce:	2003      	movs	r0, #3
}
 80034d0:	b005      	add	sp, #20
 80034d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034d4:	6869      	ldr	r1, [r5, #4]
 80034d6:	400a      	ands	r2, r1
 80034d8:	4293      	cmp	r3, r2
 80034da:	d0b5      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x64>
      __HAL_RCC_BACKUPRESET_FORCE();
 80034dc:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034de:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80034e0:	6a20      	ldr	r0, [r4, #32]
 80034e2:	025b      	lsls	r3, r3, #9
 80034e4:	4303      	orrs	r3, r0
 80034e6:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034e8:	6a23      	ldr	r3, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034ea:	490d      	ldr	r1, [pc, #52]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034ec:	4810      	ldr	r0, [pc, #64]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034ee:	4011      	ands	r1, r2
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034f0:	4003      	ands	r3, r0
 80034f2:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80034f4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034f6:	07d3      	lsls	r3, r2, #31
 80034f8:	d5a6      	bpl.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x64>
        tickstart = HAL_GetTick();
 80034fa:	f7ff f847 	bl	800258c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fe:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8003500:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003502:	6a23      	ldr	r3, [r4, #32]
 8003504:	423b      	tst	r3, r7
 8003506:	d19f      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x64>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003508:	f7ff f840 	bl	800258c <HAL_GetTick>
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800350e:	1b80      	subs	r0, r0, r6
 8003510:	4298      	cmp	r0, r3
 8003512:	d9f6      	bls.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8003514:	e7db      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	00010021 	.word	0x00010021
 800351c:	0800552b 	.word	0x0800552b
 8003520:	fffffcff 	.word	0xfffffcff
 8003524:	40021000 	.word	0x40021000
 8003528:	40007000 	.word	0x40007000
 800352c:	efffffff 	.word	0xefffffff
 8003530:	fffeffff 	.word	0xfffeffff
 8003534:	00001388 	.word	0x00001388

08003538 <HAL_TIM_Base_Start_IT>:
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003538:	6803      	ldr	r3, [r0, #0]
 800353a:	4a10      	ldr	r2, [pc, #64]	; (800357c <HAL_TIM_Base_Start_IT+0x44>)
{
 800353c:	b510      	push	{r4, lr}
 800353e:	0004      	movs	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003540:	4293      	cmp	r3, r2
 8003542:	d010      	beq.n	8003566 <HAL_TIM_Base_Start_IT+0x2e>
 8003544:	4a0e      	ldr	r2, [pc, #56]	; (8003580 <HAL_TIM_Base_Start_IT+0x48>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00d      	beq.n	8003566 <HAL_TIM_Base_Start_IT+0x2e>
 800354a:	4a0e      	ldr	r2, [pc, #56]	; (8003584 <HAL_TIM_Base_Start_IT+0x4c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00a      	beq.n	8003566 <HAL_TIM_Base_Start_IT+0x2e>
 8003550:	4a0d      	ldr	r2, [pc, #52]	; (8003588 <HAL_TIM_Base_Start_IT+0x50>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_TIM_Base_Start_IT+0x2e>
 8003556:	4a0d      	ldr	r2, [pc, #52]	; (800358c <HAL_TIM_Base_Start_IT+0x54>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d004      	beq.n	8003566 <HAL_TIM_Base_Start_IT+0x2e>
 800355c:	21af      	movs	r1, #175	; 0xaf
 800355e:	480c      	ldr	r0, [pc, #48]	; (8003590 <HAL_TIM_Base_Start_IT+0x58>)
 8003560:	0049      	lsls	r1, r1, #1
 8003562:	f7fe fec2 	bl	80022ea <assert_failed>

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003566:	2201      	movs	r2, #1
 8003568:	6823      	ldr	r3, [r4, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 800356a:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800356c:	68d9      	ldr	r1, [r3, #12]
 800356e:	4311      	orrs	r1, r2
 8003570:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8003572:	6819      	ldr	r1, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]
}
 8003578:	bd10      	pop	{r4, pc}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40000400 	.word	0x40000400
 8003584:	40002000 	.word	0x40002000
 8003588:	40014400 	.word	0x40014400
 800358c:	40014800 	.word	0x40014800
 8003590:	080055a6 	.word	0x080055a6

08003594 <HAL_TIM_OC_DelayElapsedCallback>:
 8003594:	4770      	bx	lr

08003596 <HAL_TIM_IC_CaptureCallback>:
 8003596:	4770      	bx	lr

08003598 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003598:	4770      	bx	lr

0800359a <HAL_TIM_TriggerCallback>:
 800359a:	4770      	bx	lr

0800359c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800359c:	2202      	movs	r2, #2
 800359e:	6803      	ldr	r3, [r0, #0]
{
 80035a0:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035a2:	6919      	ldr	r1, [r3, #16]
{
 80035a4:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035a6:	4211      	tst	r1, r2
 80035a8:	d00e      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80035aa:	68d9      	ldr	r1, [r3, #12]
 80035ac:	4211      	tst	r1, r2
 80035ae:	d00b      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035b0:	3a05      	subs	r2, #5
 80035b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035b6:	3204      	adds	r2, #4
 80035b8:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ba:	079b      	lsls	r3, r3, #30
 80035bc:	d100      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x24>
 80035be:	e079      	b.n	80036b4 <HAL_TIM_IRQHandler+0x118>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80035c0:	f7ff ffe9 	bl	8003596 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c4:	2300      	movs	r3, #0
 80035c6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035c8:	2204      	movs	r2, #4
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	6919      	ldr	r1, [r3, #16]
 80035ce:	4211      	tst	r1, r2
 80035d0:	d010      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x58>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80035d2:	68d9      	ldr	r1, [r3, #12]
 80035d4:	4211      	tst	r1, r2
 80035d6:	d00d      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035d8:	3a09      	subs	r2, #9
 80035da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035dc:	3207      	adds	r2, #7
 80035de:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	23c0      	movs	r3, #192	; 0xc0
 80035e4:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80035e6:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035e8:	421a      	tst	r2, r3
 80035ea:	d069      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80035ec:	f7ff ffd3 	bl	8003596 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f0:	2300      	movs	r3, #0
 80035f2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035f4:	2208      	movs	r2, #8
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	6919      	ldr	r1, [r3, #16]
 80035fa:	4211      	tst	r1, r2
 80035fc:	d00e      	beq.n	800361c <HAL_TIM_IRQHandler+0x80>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80035fe:	68d9      	ldr	r1, [r3, #12]
 8003600:	4211      	tst	r1, r2
 8003602:	d00b      	beq.n	800361c <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003604:	3a11      	subs	r2, #17
 8003606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003608:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800360a:	320d      	adds	r2, #13
 800360c:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800360e:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003610:	079b      	lsls	r3, r3, #30
 8003612:	d05b      	beq.n	80036cc <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8003614:	f7ff ffbf 	bl	8003596 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003618:	2300      	movs	r3, #0
 800361a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800361c:	2210      	movs	r2, #16
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	6919      	ldr	r1, [r3, #16]
 8003622:	4211      	tst	r1, r2
 8003624:	d010      	beq.n	8003648 <HAL_TIM_IRQHandler+0xac>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003626:	68d9      	ldr	r1, [r3, #12]
 8003628:	4211      	tst	r1, r2
 800362a:	d00d      	beq.n	8003648 <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800362c:	3a21      	subs	r2, #33	; 0x21
 800362e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003630:	3219      	adds	r2, #25
 8003632:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	23c0      	movs	r3, #192	; 0xc0
 8003638:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800363a:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800363c:	421a      	tst	r2, r3
 800363e:	d04b      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8003640:	f7ff ffa9 	bl	8003596 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003644:	2300      	movs	r3, #0
 8003646:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003648:	2201      	movs	r2, #1
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	6919      	ldr	r1, [r3, #16]
 800364e:	4211      	tst	r1, r2
 8003650:	d007      	beq.n	8003662 <HAL_TIM_IRQHandler+0xc6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003652:	68d9      	ldr	r1, [r3, #12]
 8003654:	4211      	tst	r1, r2
 8003656:	d004      	beq.n	8003662 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003658:	3a03      	subs	r2, #3
 800365a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800365c:	0020      	movs	r0, r4
 800365e:	f7fe fe2b 	bl	80022b8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003662:	2280      	movs	r2, #128	; 0x80
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	6919      	ldr	r1, [r3, #16]
 8003668:	4211      	tst	r1, r2
 800366a:	d008      	beq.n	800367e <HAL_TIM_IRQHandler+0xe2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800366c:	68d9      	ldr	r1, [r3, #12]
 800366e:	4211      	tst	r1, r2
 8003670:	d005      	beq.n	800367e <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003672:	3a02      	subs	r2, #2
 8003674:	3aff      	subs	r2, #255	; 0xff
 8003676:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003678:	0020      	movs	r0, r4
 800367a:	f000 f8d6 	bl	800382a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800367e:	2240      	movs	r2, #64	; 0x40
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	6919      	ldr	r1, [r3, #16]
 8003684:	4211      	tst	r1, r2
 8003686:	d007      	beq.n	8003698 <HAL_TIM_IRQHandler+0xfc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003688:	68d9      	ldr	r1, [r3, #12]
 800368a:	4211      	tst	r1, r2
 800368c:	d004      	beq.n	8003698 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800368e:	3a81      	subs	r2, #129	; 0x81
 8003690:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003692:	0020      	movs	r0, r4
 8003694:	f7ff ff81 	bl	800359a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003698:	2220      	movs	r2, #32
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	6919      	ldr	r1, [r3, #16]
 800369e:	4211      	tst	r1, r2
 80036a0:	d007      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x116>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80036a2:	68d9      	ldr	r1, [r3, #12]
 80036a4:	4211      	tst	r1, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036a8:	3a41      	subs	r2, #65	; 0x41
 80036aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80036ac:	0020      	movs	r0, r4
 80036ae:	f000 f8bb 	bl	8003828 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80036b2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b4:	f7ff ff6e 	bl	8003594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b8:	0020      	movs	r0, r4
 80036ba:	f7ff ff6d 	bl	8003598 <HAL_TIM_PWM_PulseFinishedCallback>
 80036be:	e781      	b.n	80035c4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c0:	f7ff ff68 	bl	8003594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	0020      	movs	r0, r4
 80036c6:	f7ff ff67 	bl	8003598 <HAL_TIM_PWM_PulseFinishedCallback>
 80036ca:	e791      	b.n	80035f0 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036cc:	f7ff ff62 	bl	8003594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d0:	0020      	movs	r0, r4
 80036d2:	f7ff ff61 	bl	8003598 <HAL_TIM_PWM_PulseFinishedCallback>
 80036d6:	e79f      	b.n	8003618 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d8:	f7ff ff5c 	bl	8003594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	0020      	movs	r0, r4
 80036de:	f7ff ff5b 	bl	8003598 <HAL_TIM_PWM_PulseFinishedCallback>
 80036e2:	e7af      	b.n	8003644 <HAL_TIM_IRQHandler+0xa8>

080036e4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e4:	4a19      	ldr	r2, [pc, #100]	; (800374c <TIM_Base_SetConfig+0x68>)
{
 80036e6:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80036e8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ea:	4290      	cmp	r0, r2
 80036ec:	d002      	beq.n	80036f4 <TIM_Base_SetConfig+0x10>
 80036ee:	4c18      	ldr	r4, [pc, #96]	; (8003750 <TIM_Base_SetConfig+0x6c>)
 80036f0:	42a0      	cmp	r0, r4
 80036f2:	d108      	bne.n	8003706 <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036f4:	2470      	movs	r4, #112	; 0x70
 80036f6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80036f8:	684c      	ldr	r4, [r1, #4]
 80036fa:	4323      	orrs	r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036fc:	4290      	cmp	r0, r2
 80036fe:	d00b      	beq.n	8003718 <TIM_Base_SetConfig+0x34>
 8003700:	4c13      	ldr	r4, [pc, #76]	; (8003750 <TIM_Base_SetConfig+0x6c>)
 8003702:	42a0      	cmp	r0, r4
 8003704:	d008      	beq.n	8003718 <TIM_Base_SetConfig+0x34>
 8003706:	4c13      	ldr	r4, [pc, #76]	; (8003754 <TIM_Base_SetConfig+0x70>)
 8003708:	42a0      	cmp	r0, r4
 800370a:	d005      	beq.n	8003718 <TIM_Base_SetConfig+0x34>
 800370c:	4c12      	ldr	r4, [pc, #72]	; (8003758 <TIM_Base_SetConfig+0x74>)
 800370e:	42a0      	cmp	r0, r4
 8003710:	d002      	beq.n	8003718 <TIM_Base_SetConfig+0x34>
 8003712:	4c12      	ldr	r4, [pc, #72]	; (800375c <TIM_Base_SetConfig+0x78>)
 8003714:	42a0      	cmp	r0, r4
 8003716:	d103      	bne.n	8003720 <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003718:	4c11      	ldr	r4, [pc, #68]	; (8003760 <TIM_Base_SetConfig+0x7c>)
 800371a:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800371c:	68cc      	ldr	r4, [r1, #12]
 800371e:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003720:	2480      	movs	r4, #128	; 0x80
 8003722:	43a3      	bics	r3, r4
 8003724:	694c      	ldr	r4, [r1, #20]
 8003726:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8003728:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800372a:	688b      	ldr	r3, [r1, #8]
 800372c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800372e:	680b      	ldr	r3, [r1, #0]
 8003730:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003732:	4290      	cmp	r0, r2
 8003734:	d005      	beq.n	8003742 <TIM_Base_SetConfig+0x5e>
 8003736:	4b08      	ldr	r3, [pc, #32]	; (8003758 <TIM_Base_SetConfig+0x74>)
 8003738:	4298      	cmp	r0, r3
 800373a:	d002      	beq.n	8003742 <TIM_Base_SetConfig+0x5e>
 800373c:	4b07      	ldr	r3, [pc, #28]	; (800375c <TIM_Base_SetConfig+0x78>)
 800373e:	4298      	cmp	r0, r3
 8003740:	d101      	bne.n	8003746 <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003742:	690b      	ldr	r3, [r1, #16]
 8003744:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003746:	2301      	movs	r3, #1
 8003748:	6143      	str	r3, [r0, #20]
}
 800374a:	bd10      	pop	{r4, pc}
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40000400 	.word	0x40000400
 8003754:	40002000 	.word	0x40002000
 8003758:	40014400 	.word	0x40014400
 800375c:	40014800 	.word	0x40014800
 8003760:	fffffcff 	.word	0xfffffcff

08003764 <HAL_TIM_Base_Init>:
{
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003768:	2001      	movs	r0, #1
  if(htim == NULL)
 800376a:	2c00      	cmp	r4, #0
 800376c:	d04c      	beq.n	8003808 <HAL_TIM_Base_Init+0xa4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	4a26      	ldr	r2, [pc, #152]	; (800380c <HAL_TIM_Base_Init+0xa8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00f      	beq.n	8003796 <HAL_TIM_Base_Init+0x32>
 8003776:	4a26      	ldr	r2, [pc, #152]	; (8003810 <HAL_TIM_Base_Init+0xac>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00c      	beq.n	8003796 <HAL_TIM_Base_Init+0x32>
 800377c:	4a25      	ldr	r2, [pc, #148]	; (8003814 <HAL_TIM_Base_Init+0xb0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d009      	beq.n	8003796 <HAL_TIM_Base_Init+0x32>
 8003782:	4a25      	ldr	r2, [pc, #148]	; (8003818 <HAL_TIM_Base_Init+0xb4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d006      	beq.n	8003796 <HAL_TIM_Base_Init+0x32>
 8003788:	4a24      	ldr	r2, [pc, #144]	; (800381c <HAL_TIM_Base_Init+0xb8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d003      	beq.n	8003796 <HAL_TIM_Base_Init+0x32>
 800378e:	21d4      	movs	r1, #212	; 0xd4
 8003790:	4823      	ldr	r0, [pc, #140]	; (8003820 <HAL_TIM_Base_Init+0xbc>)
 8003792:	f7fe fdaa 	bl	80022ea <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003796:	68a3      	ldr	r3, [r4, #8]
 8003798:	2210      	movs	r2, #16
 800379a:	0019      	movs	r1, r3
 800379c:	4391      	bics	r1, r2
 800379e:	d00a      	beq.n	80037b6 <HAL_TIM_Base_Init+0x52>
 80037a0:	2240      	movs	r2, #64	; 0x40
 80037a2:	0019      	movs	r1, r3
 80037a4:	4391      	bics	r1, r2
 80037a6:	2920      	cmp	r1, #32
 80037a8:	d005      	beq.n	80037b6 <HAL_TIM_Base_Init+0x52>
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_Base_Init+0x52>
 80037ae:	21d5      	movs	r1, #213	; 0xd5
 80037b0:	481b      	ldr	r0, [pc, #108]	; (8003820 <HAL_TIM_Base_Init+0xbc>)
 80037b2:	f7fe fd9a 	bl	80022ea <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80037b6:	6923      	ldr	r3, [r4, #16]
 80037b8:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <HAL_TIM_Base_Init+0xc0>)
 80037ba:	4213      	tst	r3, r2
 80037bc:	d007      	beq.n	80037ce <HAL_TIM_Base_Init+0x6a>
 80037be:	2280      	movs	r2, #128	; 0x80
 80037c0:	0092      	lsls	r2, r2, #2
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_Base_Init+0x6a>
 80037c6:	21d6      	movs	r1, #214	; 0xd6
 80037c8:	4815      	ldr	r0, [pc, #84]	; (8003820 <HAL_TIM_Base_Init+0xbc>)
 80037ca:	f7fe fd8e 	bl	80022ea <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	69a2      	ldr	r2, [r4, #24]
 80037d2:	439a      	bics	r2, r3
 80037d4:	d003      	beq.n	80037de <HAL_TIM_Base_Init+0x7a>
 80037d6:	21d7      	movs	r1, #215	; 0xd7
 80037d8:	4811      	ldr	r0, [pc, #68]	; (8003820 <HAL_TIM_Base_Init+0xbc>)
 80037da:	f7fe fd86 	bl	80022ea <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80037de:	0025      	movs	r5, r4
 80037e0:	353d      	adds	r5, #61	; 0x3d
 80037e2:	782b      	ldrb	r3, [r5, #0]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80037ea:	0022      	movs	r2, r4
 80037ec:	323c      	adds	r2, #60	; 0x3c
 80037ee:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80037f0:	0020      	movs	r0, r4
 80037f2:	f7fe fe19 	bl	8002428 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80037f6:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f8:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80037fa:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fc:	1d21      	adds	r1, r4, #4
 80037fe:	f7ff ff71 	bl	80036e4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003802:	2301      	movs	r3, #1
  return HAL_OK;
 8003804:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003806:	702b      	strb	r3, [r5, #0]
}
 8003808:	bd70      	pop	{r4, r5, r6, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40000400 	.word	0x40000400
 8003814:	40002000 	.word	0x40002000
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800
 8003820:	080055a6 	.word	0x080055a6
 8003824:	fffffeff 	.word	0xfffffeff

08003828 <HAL_TIMEx_CommutationCallback>:
 8003828:	4770      	bx	lr

0800382a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800382a:	4770      	bx	lr

0800382c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800382c:	6803      	ldr	r3, [r0, #0]
 800382e:	4906      	ldr	r1, [pc, #24]	; (8003848 <UART_EndRxTransfer+0x1c>)
 8003830:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003832:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003834:	400a      	ands	r2, r1
 8003836:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	3123      	adds	r1, #35	; 0x23
 800383c:	31ff      	adds	r1, #255	; 0xff
 800383e:	438a      	bics	r2, r1
 8003840:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8003842:	2320      	movs	r3, #32
 8003844:	7003      	strb	r3, [r0, #0]
}
 8003846:	4770      	bx	lr
 8003848:	fffffedf 	.word	0xfffffedf

0800384c <HAL_UART_Transmit_IT>:
{
 800384c:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800384e:	0006      	movs	r6, r0
 8003850:	3669      	adds	r6, #105	; 0x69
 8003852:	7833      	ldrb	r3, [r6, #0]
{
 8003854:	0004      	movs	r4, r0
    return HAL_BUSY;
 8003856:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8003858:	2b20      	cmp	r3, #32
 800385a:	d124      	bne.n	80038a6 <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 800385c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800385e:	2900      	cmp	r1, #0
 8003860:	d021      	beq.n	80038a6 <HAL_UART_Transmit_IT+0x5a>
 8003862:	2a00      	cmp	r2, #0
 8003864:	d01f      	beq.n	80038a6 <HAL_UART_Transmit_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	68a5      	ldr	r5, [r4, #8]
 800386a:	015b      	lsls	r3, r3, #5
 800386c:	429d      	cmp	r5, r3
 800386e:	d104      	bne.n	800387a <HAL_UART_Transmit_IT+0x2e>
 8003870:	6923      	ldr	r3, [r4, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_UART_Transmit_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 8003876:	4201      	tst	r1, r0
 8003878:	d115      	bne.n	80038a6 <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 800387a:	0025      	movs	r5, r4
 800387c:	3568      	adds	r5, #104	; 0x68
 800387e:	782b      	ldrb	r3, [r5, #0]
    return HAL_BUSY;
 8003880:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8003882:	2b01      	cmp	r3, #1
 8003884:	d00f      	beq.n	80038a6 <HAL_UART_Transmit_IT+0x5a>
    huart->TxXferSize = Size;
 8003886:	0023      	movs	r3, r4
 8003888:	3350      	adds	r3, #80	; 0x50
    huart->pTxBuffPtr = pData;
 800388a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferCount = Size;
 800388c:	805a      	strh	r2, [r3, #2]
    huart->TxXferSize = Size;
 800388e:	801a      	strh	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003892:	2221      	movs	r2, #33	; 0x21
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003894:	6821      	ldr	r1, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003896:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003898:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800389a:	6808      	ldr	r0, [r1, #0]
 800389c:	325f      	adds	r2, #95	; 0x5f
 800389e:	4302      	orrs	r2, r0
    return HAL_OK;
 80038a0:	0018      	movs	r0, r3
    __HAL_UNLOCK(huart);
 80038a2:	702b      	strb	r3, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038a4:	600a      	str	r2, [r1, #0]
}
 80038a6:	bd70      	pop	{r4, r5, r6, pc}

080038a8 <HAL_UART_Receive_IT>:
{
 80038a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 80038aa:	0006      	movs	r6, r0
 80038ac:	366a      	adds	r6, #106	; 0x6a
 80038ae:	7834      	ldrb	r4, [r6, #0]
{
 80038b0:	0003      	movs	r3, r0
    return HAL_BUSY;
 80038b2:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 80038b4:	2c20      	cmp	r4, #32
 80038b6:	d135      	bne.n	8003924 <HAL_UART_Receive_IT+0x7c>
      return HAL_ERROR;
 80038b8:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80038ba:	2900      	cmp	r1, #0
 80038bc:	d032      	beq.n	8003924 <HAL_UART_Receive_IT+0x7c>
 80038be:	2a00      	cmp	r2, #0
 80038c0:	d030      	beq.n	8003924 <HAL_UART_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c2:	2480      	movs	r4, #128	; 0x80
 80038c4:	689d      	ldr	r5, [r3, #8]
 80038c6:	0164      	lsls	r4, r4, #5
 80038c8:	42a5      	cmp	r5, r4
 80038ca:	d104      	bne.n	80038d6 <HAL_UART_Receive_IT+0x2e>
 80038cc:	691c      	ldr	r4, [r3, #16]
 80038ce:	2c00      	cmp	r4, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Receive_IT+0x2e>
      if((((uint32_t)pData)&1U) != 0U)
 80038d2:	4201      	tst	r1, r0
 80038d4:	d126      	bne.n	8003924 <HAL_UART_Receive_IT+0x7c>
    __HAL_LOCK(huart);
 80038d6:	001c      	movs	r4, r3
 80038d8:	3468      	adds	r4, #104	; 0x68
 80038da:	7827      	ldrb	r7, [r4, #0]
    return HAL_BUSY;
 80038dc:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80038de:	2f01      	cmp	r7, #1
 80038e0:	d020      	beq.n	8003924 <HAL_UART_Receive_IT+0x7c>
 80038e2:	3801      	subs	r0, #1
 80038e4:	7020      	strb	r0, [r4, #0]
    huart->pRxBuffPtr = pData;
 80038e6:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80038e8:	0019      	movs	r1, r3
 80038ea:	3158      	adds	r1, #88	; 0x58
 80038ec:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 80038ee:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 80038f0:	2280      	movs	r2, #128	; 0x80
 80038f2:	0152      	lsls	r2, r2, #5
 80038f4:	4295      	cmp	r5, r2
 80038f6:	d118      	bne.n	800392a <HAL_UART_Receive_IT+0x82>
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	2a00      	cmp	r2, #0
 80038fc:	d113      	bne.n	8003926 <HAL_UART_Receive_IT+0x7e>
 80038fe:	490e      	ldr	r1, [pc, #56]	; (8003938 <HAL_UART_Receive_IT+0x90>)
 8003900:	001a      	movs	r2, r3
 8003902:	325c      	adds	r2, #92	; 0x5c
 8003904:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003908:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390a:	66d8      	str	r0, [r3, #108]	; 0x6c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390c:	681b      	ldr	r3, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800390e:	7032      	strb	r2, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003910:	6899      	ldr	r1, [r3, #8]
 8003912:	3a21      	subs	r2, #33	; 0x21
 8003914:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8003916:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003918:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800391a:	2290      	movs	r2, #144	; 0x90
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	0052      	lsls	r2, r2, #1
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]
}
 8003924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8003926:	21ff      	movs	r1, #255	; 0xff
 8003928:	e7ea      	b.n	8003900 <HAL_UART_Receive_IT+0x58>
 800392a:	2d00      	cmp	r5, #0
 800392c:	d1eb      	bne.n	8003906 <HAL_UART_Receive_IT+0x5e>
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	2a00      	cmp	r2, #0
 8003932:	d0f8      	beq.n	8003926 <HAL_UART_Receive_IT+0x7e>
 8003934:	217f      	movs	r1, #127	; 0x7f
 8003936:	e7e3      	b.n	8003900 <HAL_UART_Receive_IT+0x58>
 8003938:	000001ff 	.word	0x000001ff

0800393c <HAL_UART_TxCpltCallback>:
 800393c:	4770      	bx	lr

0800393e <HAL_UART_ErrorCallback>:
 800393e:	4770      	bx	lr

08003940 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003940:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	0002      	movs	r2, r0
{
 8003946:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003948:	325a      	adds	r2, #90	; 0x5a
 800394a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800394c:	3a08      	subs	r2, #8
 800394e:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8003950:	f7ff fff5 	bl	800393e <HAL_UART_ErrorCallback>
}
 8003954:	bd10      	pop	{r4, pc}
	...

08003958 <UART_SetConfig>:
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003958:	4b5e      	ldr	r3, [pc, #376]	; (8003ad4 <UART_SetConfig+0x17c>)
 800395a:	6842      	ldr	r2, [r0, #4]
{
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	0004      	movs	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003960:	429a      	cmp	r2, r3
 8003962:	d903      	bls.n	800396c <UART_SetConfig+0x14>
 8003964:	495c      	ldr	r1, [pc, #368]	; (8003ad8 <UART_SetConfig+0x180>)
 8003966:	485d      	ldr	r0, [pc, #372]	; (8003adc <UART_SetConfig+0x184>)
 8003968:	f7fe fcbf 	bl	80022ea <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800396c:	4b5c      	ldr	r3, [pc, #368]	; (8003ae0 <UART_SetConfig+0x188>)
 800396e:	68a2      	ldr	r2, [r4, #8]
 8003970:	421a      	tst	r2, r3
 8003972:	d003      	beq.n	800397c <UART_SetConfig+0x24>
 8003974:	495b      	ldr	r1, [pc, #364]	; (8003ae4 <UART_SetConfig+0x18c>)
 8003976:	4859      	ldr	r0, [pc, #356]	; (8003adc <UART_SetConfig+0x184>)
 8003978:	f7fe fcb7 	bl	80022ea <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800397c:	4b5a      	ldr	r3, [pc, #360]	; (8003ae8 <UART_SetConfig+0x190>)
 800397e:	68e2      	ldr	r2, [r4, #12]
 8003980:	421a      	tst	r2, r3
 8003982:	d003      	beq.n	800398c <UART_SetConfig+0x34>
 8003984:	4959      	ldr	r1, [pc, #356]	; (8003aec <UART_SetConfig+0x194>)
 8003986:	4855      	ldr	r0, [pc, #340]	; (8003adc <UART_SetConfig+0x184>)
 8003988:	f7fe fcaf 	bl	80022ea <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800398c:	6923      	ldr	r3, [r4, #16]
 800398e:	4a58      	ldr	r2, [pc, #352]	; (8003af0 <UART_SetConfig+0x198>)
 8003990:	4213      	tst	r3, r2
 8003992:	d007      	beq.n	80039a4 <UART_SetConfig+0x4c>
 8003994:	22c0      	movs	r2, #192	; 0xc0
 8003996:	00d2      	lsls	r2, r2, #3
 8003998:	4293      	cmp	r3, r2
 800399a:	d003      	beq.n	80039a4 <UART_SetConfig+0x4c>
 800399c:	4955      	ldr	r1, [pc, #340]	; (8003af4 <UART_SetConfig+0x19c>)
 800399e:	484f      	ldr	r0, [pc, #316]	; (8003adc <UART_SetConfig+0x184>)
 80039a0:	f7fe fca3 	bl	80022ea <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80039a4:	6963      	ldr	r3, [r4, #20]
 80039a6:	220c      	movs	r2, #12
 80039a8:	0019      	movs	r1, r3
 80039aa:	4391      	bics	r1, r2
 80039ac:	d101      	bne.n	80039b2 <UART_SetConfig+0x5a>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <UART_SetConfig+0x62>
 80039b2:	4951      	ldr	r1, [pc, #324]	; (8003af8 <UART_SetConfig+0x1a0>)
 80039b4:	4849      	ldr	r0, [pc, #292]	; (8003adc <UART_SetConfig+0x184>)
 80039b6:	f7fe fc98 	bl	80022ea <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80039ba:	4b50      	ldr	r3, [pc, #320]	; (8003afc <UART_SetConfig+0x1a4>)
 80039bc:	69a2      	ldr	r2, [r4, #24]
 80039be:	421a      	tst	r2, r3
 80039c0:	d003      	beq.n	80039ca <UART_SetConfig+0x72>
 80039c2:	494f      	ldr	r1, [pc, #316]	; (8003b00 <UART_SetConfig+0x1a8>)
 80039c4:	4845      	ldr	r0, [pc, #276]	; (8003adc <UART_SetConfig+0x184>)
 80039c6:	f7fe fc90 	bl	80022ea <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80039ca:	4b4e      	ldr	r3, [pc, #312]	; (8003b04 <UART_SetConfig+0x1ac>)
 80039cc:	6a22      	ldr	r2, [r4, #32]
 80039ce:	421a      	tst	r2, r3
 80039d0:	d003      	beq.n	80039da <UART_SetConfig+0x82>
 80039d2:	494d      	ldr	r1, [pc, #308]	; (8003b08 <UART_SetConfig+0x1b0>)
 80039d4:	4841      	ldr	r0, [pc, #260]	; (8003adc <UART_SetConfig+0x184>)
 80039d6:	f7fe fc88 	bl	80022ea <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80039da:	4b4c      	ldr	r3, [pc, #304]	; (8003b0c <UART_SetConfig+0x1b4>)
 80039dc:	69e2      	ldr	r2, [r4, #28]
 80039de:	421a      	tst	r2, r3
 80039e0:	d003      	beq.n	80039ea <UART_SetConfig+0x92>
 80039e2:	494b      	ldr	r1, [pc, #300]	; (8003b10 <UART_SetConfig+0x1b8>)
 80039e4:	483d      	ldr	r0, [pc, #244]	; (8003adc <UART_SetConfig+0x184>)
 80039e6:	f7fe fc80 	bl	80022ea <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039ea:	6920      	ldr	r0, [r4, #16]
 80039ec:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039ee:	6825      	ldr	r5, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039f0:	4303      	orrs	r3, r0
 80039f2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039f4:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039f6:	69e2      	ldr	r2, [r4, #28]
 80039f8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039fa:	4846      	ldr	r0, [pc, #280]	; (8003b14 <UART_SetConfig+0x1bc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039fc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039fe:	4001      	ands	r1, r0
 8003a00:	430b      	orrs	r3, r1
 8003a02:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a04:	686b      	ldr	r3, [r5, #4]
 8003a06:	4944      	ldr	r1, [pc, #272]	; (8003b18 <UART_SetConfig+0x1c0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003a08:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a0a:	400b      	ands	r3, r1
 8003a0c:	68e1      	ldr	r1, [r4, #12]
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003a12:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003a14:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003a16:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003a18:	4840      	ldr	r0, [pc, #256]	; (8003b1c <UART_SetConfig+0x1c4>)
 8003a1a:	4001      	ands	r1, r0
 8003a1c:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a1e:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003a20:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a22:	4b3f      	ldr	r3, [pc, #252]	; (8003b20 <UART_SetConfig+0x1c8>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	400b      	ands	r3, r1
 8003a28:	493e      	ldr	r1, [pc, #248]	; (8003b24 <UART_SetConfig+0x1cc>)
 8003a2a:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d12c      	bne.n	8003a8e <UART_SetConfig+0x136>
    switch (clocksource)
 8003a34:	2808      	cmp	r0, #8
 8003a36:	d827      	bhi.n	8003a88 <UART_SetConfig+0x130>
 8003a38:	f7fc fb6e 	bl	8000118 <__gnu_thumb1_case_uqi>
 8003a3c:	260b2605 	.word	0x260b2605
 8003a40:	2626261e 	.word	0x2626261e
 8003a44:	21          	.byte	0x21
 8003a45:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003a46:	f7ff fcbd 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003a4a:	6863      	ldr	r3, [r4, #4]
 8003a4c:	0040      	lsls	r0, r0, #1
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	e002      	b.n	8003a58 <UART_SetConfig+0x100>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003a52:	6863      	ldr	r3, [r4, #4]
 8003a54:	0858      	lsrs	r0, r3, #1
 8003a56:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <UART_SetConfig+0x1d0>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003a58:	18c0      	adds	r0, r0, r3
 8003a5a:	6861      	ldr	r1, [r4, #4]
 8003a5c:	f7fc fb70 	bl	8000140 <__udivsi3>
 8003a60:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a62:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8003a64:	220f      	movs	r2, #15
 8003a66:	0019      	movs	r1, r3
 8003a68:	4391      	bics	r1, r2
 8003a6a:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a6c:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8003a6e:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a70:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60cb      	str	r3, [r1, #12]
}
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003a78:	f7ff fb7a 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8003a7c:	e7e5      	b.n	8003a4a <UART_SetConfig+0xf2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003a7e:	6863      	ldr	r3, [r4, #4]
 8003a80:	0858      	lsrs	r0, r3, #1
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	025b      	lsls	r3, r3, #9
 8003a86:	e7e7      	b.n	8003a58 <UART_SetConfig+0x100>
        ret = HAL_ERROR;
 8003a88:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e7ea      	b.n	8003a64 <UART_SetConfig+0x10c>
    switch (clocksource)
 8003a8e:	2808      	cmp	r0, #8
 8003a90:	d81d      	bhi.n	8003ace <UART_SetConfig+0x176>
 8003a92:	f7fc fb41 	bl	8000118 <__gnu_thumb1_case_uqi>
 8003a96:	1c05      	.short	0x1c05
 8003a98:	1c141c0a 	.word	0x1c141c0a
 8003a9c:	1c1c      	.short	0x1c1c
 8003a9e:	17          	.byte	0x17
 8003a9f:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003aa0:	f7ff fc90 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003aa4:	6861      	ldr	r1, [r4, #4]
 8003aa6:	084b      	lsrs	r3, r1, #1
 8003aa8:	e002      	b.n	8003ab0 <UART_SetConfig+0x158>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003aaa:	6861      	ldr	r1, [r4, #4]
 8003aac:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <UART_SetConfig+0x1d4>)
 8003aae:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ab0:	18c0      	adds	r0, r0, r3
 8003ab2:	f7fc fb45 	bl	8000140 <__udivsi3>
 8003ab6:	b280      	uxth	r0, r0
 8003ab8:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aba:	2000      	movs	r0, #0
        break;
 8003abc:	e7db      	b.n	8003a76 <UART_SetConfig+0x11e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003abe:	f7ff fb57 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8003ac2:	e7ef      	b.n	8003aa4 <UART_SetConfig+0x14c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	6861      	ldr	r1, [r4, #4]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	0848      	lsrs	r0, r1, #1
 8003acc:	e7f0      	b.n	8003ab0 <UART_SetConfig+0x158>
        ret = HAL_ERROR;
 8003ace:	2001      	movs	r0, #1
 8003ad0:	e7d1      	b.n	8003a76 <UART_SetConfig+0x11e>
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	005b8d80 	.word	0x005b8d80
 8003ad8:	00000846 	.word	0x00000846
 8003adc:	08005622 	.word	0x08005622
 8003ae0:	ffffefff 	.word	0xffffefff
 8003ae4:	00000847 	.word	0x00000847
 8003ae8:	ffffdfff 	.word	0xffffdfff
 8003aec:	00000848 	.word	0x00000848
 8003af0:	fffffbff 	.word	0xfffffbff
 8003af4:	00000849 	.word	0x00000849
 8003af8:	0000084a 	.word	0x0000084a
 8003afc:	fffffcff 	.word	0xfffffcff
 8003b00:	0000084b 	.word	0x0000084b
 8003b04:	fffff7ff 	.word	0xfffff7ff
 8003b08:	0000084c 	.word	0x0000084c
 8003b0c:	ffff7fff 	.word	0xffff7fff
 8003b10:	0000084d 	.word	0x0000084d
 8003b14:	ffff69f3 	.word	0xffff69f3
 8003b18:	ffffcfff 	.word	0xffffcfff
 8003b1c:	fffff4ff 	.word	0xfffff4ff
 8003b20:	40021000 	.word	0x40021000
 8003b24:	0800561e 	.word	0x0800561e
 8003b28:	00f42400 	.word	0x00f42400
 8003b2c:	007a1200 	.word	0x007a1200

08003b30 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8003b30:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003b32:	b570      	push	{r4, r5, r6, lr}
 8003b34:	0004      	movs	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8003b36:	2bff      	cmp	r3, #255	; 0xff
 8003b38:	d903      	bls.n	8003b42 <UART_AdvFeatureConfig+0x12>
 8003b3a:	4954      	ldr	r1, [pc, #336]	; (8003c8c <UART_AdvFeatureConfig+0x15c>)
 8003b3c:	4854      	ldr	r0, [pc, #336]	; (8003c90 <UART_AdvFeatureConfig+0x160>)
 8003b3e:	f7fe fbd4 	bl	80022ea <assert_failed>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b44:	07db      	lsls	r3, r3, #31
 8003b46:	d50d      	bpl.n	8003b64 <UART_AdvFeatureConfig+0x34>
 8003b48:	4d52      	ldr	r5, [pc, #328]	; (8003c94 <UART_AdvFeatureConfig+0x164>)
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8003b4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b4c:	422b      	tst	r3, r5
 8003b4e:	d003      	beq.n	8003b58 <UART_AdvFeatureConfig+0x28>
 8003b50:	4951      	ldr	r1, [pc, #324]	; (8003c98 <UART_AdvFeatureConfig+0x168>)
 8003b52:	484f      	ldr	r0, [pc, #316]	; (8003c90 <UART_AdvFeatureConfig+0x160>)
 8003b54:	f7fe fbc9 	bl	80022ea <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b58:	6822      	ldr	r2, [r4, #0]
 8003b5a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003b5c:	6853      	ldr	r3, [r2, #4]
 8003b5e:	402b      	ands	r3, r5
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b66:	079b      	lsls	r3, r3, #30
 8003b68:	d50d      	bpl.n	8003b86 <UART_AdvFeatureConfig+0x56>
 8003b6a:	4d4c      	ldr	r5, [pc, #304]	; (8003c9c <UART_AdvFeatureConfig+0x16c>)
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8003b6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b6e:	422b      	tst	r3, r5
 8003b70:	d003      	beq.n	8003b7a <UART_AdvFeatureConfig+0x4a>
 8003b72:	494b      	ldr	r1, [pc, #300]	; (8003ca0 <UART_AdvFeatureConfig+0x170>)
 8003b74:	4846      	ldr	r0, [pc, #280]	; (8003c90 <UART_AdvFeatureConfig+0x160>)
 8003b76:	f7fe fbb8 	bl	80022ea <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b7a:	6822      	ldr	r2, [r4, #0]
 8003b7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003b7e:	6853      	ldr	r3, [r2, #4]
 8003b80:	402b      	ands	r3, r5
 8003b82:	430b      	orrs	r3, r1
 8003b84:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b88:	075b      	lsls	r3, r3, #29
 8003b8a:	d50d      	bpl.n	8003ba8 <UART_AdvFeatureConfig+0x78>
 8003b8c:	4d45      	ldr	r5, [pc, #276]	; (8003ca4 <UART_AdvFeatureConfig+0x174>)
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8003b8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b90:	422b      	tst	r3, r5
 8003b92:	d003      	beq.n	8003b9c <UART_AdvFeatureConfig+0x6c>
 8003b94:	4944      	ldr	r1, [pc, #272]	; (8003ca8 <UART_AdvFeatureConfig+0x178>)
 8003b96:	483e      	ldr	r0, [pc, #248]	; (8003c90 <UART_AdvFeatureConfig+0x160>)
 8003b98:	f7fe fba7 	bl	80022ea <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b9c:	6822      	ldr	r2, [r4, #0]
 8003b9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003ba0:	6853      	ldr	r3, [r2, #4]
 8003ba2:	402b      	ands	r3, r5
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003baa:	071b      	lsls	r3, r3, #28
 8003bac:	d50d      	bpl.n	8003bca <UART_AdvFeatureConfig+0x9a>
 8003bae:	4d3f      	ldr	r5, [pc, #252]	; (8003cac <UART_AdvFeatureConfig+0x17c>)
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8003bb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bb2:	422b      	tst	r3, r5
 8003bb4:	d003      	beq.n	8003bbe <UART_AdvFeatureConfig+0x8e>
 8003bb6:	493e      	ldr	r1, [pc, #248]	; (8003cb0 <UART_AdvFeatureConfig+0x180>)
 8003bb8:	4835      	ldr	r0, [pc, #212]	; (8003c90 <UART_AdvFeatureConfig+0x160>)
 8003bba:	f7fe fb96 	bl	80022ea <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bbe:	6822      	ldr	r2, [r4, #0]
 8003bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bc2:	6853      	ldr	r3, [r2, #4]
 8003bc4:	402b      	ands	r3, r5
 8003bc6:	430b      	orrs	r3, r1
 8003bc8:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bcc:	06db      	lsls	r3, r3, #27
 8003bce:	d50d      	bpl.n	8003bec <UART_AdvFeatureConfig+0xbc>
 8003bd0:	4d38      	ldr	r5, [pc, #224]	; (8003cb4 <UART_AdvFeatureConfig+0x184>)
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8003bd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bd4:	422b      	tst	r3, r5
 8003bd6:	d003      	beq.n	8003be0 <UART_AdvFeatureConfig+0xb0>
 8003bd8:	4937      	ldr	r1, [pc, #220]	; (8003cb8 <UART_AdvFeatureConfig+0x188>)
 8003bda:	482d      	ldr	r0, [pc, #180]	; (8003c90 <UART_AdvFeatureConfig+0x160>)
 8003bdc:	f7fe fb85 	bl	80022ea <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be0:	6822      	ldr	r2, [r4, #0]
 8003be2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003be4:	6893      	ldr	r3, [r2, #8]
 8003be6:	402b      	ands	r3, r5
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bee:	069b      	lsls	r3, r3, #26
 8003bf0:	d50d      	bpl.n	8003c0e <UART_AdvFeatureConfig+0xde>
 8003bf2:	4d32      	ldr	r5, [pc, #200]	; (8003cbc <UART_AdvFeatureConfig+0x18c>)
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8003bf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003bf6:	422b      	tst	r3, r5
 8003bf8:	d003      	beq.n	8003c02 <UART_AdvFeatureConfig+0xd2>
 8003bfa:	4931      	ldr	r1, [pc, #196]	; (8003cc0 <UART_AdvFeatureConfig+0x190>)
 8003bfc:	4824      	ldr	r0, [pc, #144]	; (8003c90 <UART_AdvFeatureConfig+0x160>)
 8003bfe:	f7fe fb74 	bl	80022ea <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003c06:	6893      	ldr	r3, [r2, #8]
 8003c08:	402b      	ands	r3, r5
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c10:	065b      	lsls	r3, r3, #25
 8003c12:	d528      	bpl.n	8003c66 <UART_AdvFeatureConfig+0x136>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8003c14:	4b2b      	ldr	r3, [pc, #172]	; (8003cc4 <UART_AdvFeatureConfig+0x194>)
 8003c16:	6822      	ldr	r2, [r4, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d003      	beq.n	8003c24 <UART_AdvFeatureConfig+0xf4>
 8003c1c:	492a      	ldr	r1, [pc, #168]	; (8003cc8 <UART_AdvFeatureConfig+0x198>)
 8003c1e:	481c      	ldr	r0, [pc, #112]	; (8003c90 <UART_AdvFeatureConfig+0x160>)
 8003c20:	f7fe fb63 	bl	80022ea <assert_failed>
 8003c24:	4d29      	ldr	r5, [pc, #164]	; (8003ccc <UART_AdvFeatureConfig+0x19c>)
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8003c26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c28:	422b      	tst	r3, r5
 8003c2a:	d003      	beq.n	8003c34 <UART_AdvFeatureConfig+0x104>
 8003c2c:	4928      	ldr	r1, [pc, #160]	; (8003cd0 <UART_AdvFeatureConfig+0x1a0>)
 8003c2e:	4818      	ldr	r0, [pc, #96]	; (8003c90 <UART_AdvFeatureConfig+0x160>)
 8003c30:	f7fe fb5b 	bl	80022ea <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c34:	6821      	ldr	r1, [r4, #0]
 8003c36:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c38:	684b      	ldr	r3, [r1, #4]
 8003c3a:	402b      	ands	r3, r5
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	035b      	lsls	r3, r3, #13
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d10e      	bne.n	8003c66 <UART_AdvFeatureConfig+0x136>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8003c48:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <UART_AdvFeatureConfig+0x1a4>)
 8003c4a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003c4c:	421a      	tst	r2, r3
 8003c4e:	d003      	beq.n	8003c58 <UART_AdvFeatureConfig+0x128>
 8003c50:	4921      	ldr	r1, [pc, #132]	; (8003cd8 <UART_AdvFeatureConfig+0x1a8>)
 8003c52:	480f      	ldr	r0, [pc, #60]	; (8003c90 <UART_AdvFeatureConfig+0x160>)
 8003c54:	f7fe fb49 	bl	80022ea <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c58:	6822      	ldr	r2, [r4, #0]
 8003c5a:	4920      	ldr	r1, [pc, #128]	; (8003cdc <UART_AdvFeatureConfig+0x1ac>)
 8003c5c:	6853      	ldr	r3, [r2, #4]
 8003c5e:	400b      	ands	r3, r1
 8003c60:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003c62:	430b      	orrs	r3, r1
 8003c64:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	d50d      	bpl.n	8003c88 <UART_AdvFeatureConfig+0x158>
 8003c6c:	4d1c      	ldr	r5, [pc, #112]	; (8003ce0 <UART_AdvFeatureConfig+0x1b0>)
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8003c6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003c70:	422b      	tst	r3, r5
 8003c72:	d003      	beq.n	8003c7c <UART_AdvFeatureConfig+0x14c>
 8003c74:	491b      	ldr	r1, [pc, #108]	; (8003ce4 <UART_AdvFeatureConfig+0x1b4>)
 8003c76:	4806      	ldr	r0, [pc, #24]	; (8003c90 <UART_AdvFeatureConfig+0x160>)
 8003c78:	f7fe fb37 	bl	80022ea <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c7c:	6822      	ldr	r2, [r4, #0]
 8003c7e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003c80:	6853      	ldr	r3, [r2, #4]
 8003c82:	402b      	ands	r3, r5
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6053      	str	r3, [r2, #4]
}
 8003c88:	bd70      	pop	{r4, r5, r6, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	000008a9 	.word	0x000008a9
 8003c90:	08005622 	.word	0x08005622
 8003c94:	fffdffff 	.word	0xfffdffff
 8003c98:	000008ae 	.word	0x000008ae
 8003c9c:	fffeffff 	.word	0xfffeffff
 8003ca0:	000008b5 	.word	0x000008b5
 8003ca4:	fffbffff 	.word	0xfffbffff
 8003ca8:	000008bc 	.word	0x000008bc
 8003cac:	ffff7fff 	.word	0xffff7fff
 8003cb0:	000008c3 	.word	0x000008c3
 8003cb4:	ffffefff 	.word	0xffffefff
 8003cb8:	000008ca 	.word	0x000008ca
 8003cbc:	ffffdfff 	.word	0xffffdfff
 8003cc0:	000008d1 	.word	0x000008d1
 8003cc4:	40013800 	.word	0x40013800
 8003cc8:	000008d8 	.word	0x000008d8
 8003ccc:	ffefffff 	.word	0xffefffff
 8003cd0:	000008d9 	.word	0x000008d9
 8003cd4:	ffdfffff 	.word	0xffdfffff
 8003cd8:	000008de 	.word	0x000008de
 8003cdc:	ff9fffff 	.word	0xff9fffff
 8003ce0:	fff7ffff 	.word	0xfff7ffff
 8003ce4:	000008e6 	.word	0x000008e6

08003ce8 <HAL_UART_Init>:
{
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003cee:	2001      	movs	r0, #1
}
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003cf2:	6981      	ldr	r1, [r0, #24]
 8003cf4:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <HAL_UART_Init+0x98>)
 8003cf6:	6802      	ldr	r2, [r0, #0]
 8003cf8:	2900      	cmp	r1, #0
 8003cfa:	d03b      	beq.n	8003d74 <HAL_UART_Init+0x8c>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d004      	beq.n	8003d0a <HAL_UART_Init+0x22>
 8003d00:	2197      	movs	r1, #151	; 0x97
 8003d02:	0049      	lsls	r1, r1, #1
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003d04:	481f      	ldr	r0, [pc, #124]	; (8003d84 <HAL_UART_Init+0x9c>)
 8003d06:	f7fe faf0 	bl	80022ea <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003d0a:	0025      	movs	r5, r4
 8003d0c:	3569      	adds	r5, #105	; 0x69
 8003d0e:	782b      	ldrb	r3, [r5, #0]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d105      	bne.n	8003d22 <HAL_UART_Init+0x3a>
    huart->Lock = HAL_UNLOCKED;
 8003d16:	0022      	movs	r2, r4
 8003d18:	3268      	adds	r2, #104	; 0x68
 8003d1a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003d1c:	0020      	movs	r0, r4
 8003d1e:	f7fe fbd1 	bl	80024c4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003d22:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003d24:	2101      	movs	r1, #1
 8003d26:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003d28:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8003d2a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d2c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003d2e:	438b      	bics	r3, r1
 8003d30:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d32:	f7ff fe11 	bl	8003958 <UART_SetConfig>
 8003d36:	2801      	cmp	r0, #1
 8003d38:	d0d9      	beq.n	8003cee <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_UART_Init+0x5e>
    UART_AdvFeatureConfig(huart);
 8003d40:	0020      	movs	r0, r4
 8003d42:	f7ff fef5 	bl	8003b30 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	490f      	ldr	r1, [pc, #60]	; (8003d88 <HAL_UART_Init+0xa0>)
 8003d4a:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003d4e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003d50:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	438a      	bics	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	6819      	ldr	r1, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8003d62:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8003d64:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d66:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8003d68:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8003d6a:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8003d6c:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8003d70:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003d72:	e7bd      	b.n	8003cf0 <HAL_UART_Init+0x8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d0c8      	beq.n	8003d0a <HAL_UART_Init+0x22>
 8003d78:	2134      	movs	r1, #52	; 0x34
 8003d7a:	31ff      	adds	r1, #255	; 0xff
 8003d7c:	e7c2      	b.n	8003d04 <HAL_UART_Init+0x1c>
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	40013800 	.word	0x40013800
 8003d84:	08005622 	.word	0x08005622
 8003d88:	fffff7ff 	.word	0xfffff7ff

08003d8c <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d8c:	0003      	movs	r3, r0
{
 8003d8e:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d90:	3369      	adds	r3, #105	; 0x69
 8003d92:	781b      	ldrb	r3, [r3, #0]
{
 8003d94:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8003d96:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d98:	2b21      	cmp	r3, #33	; 0x21
 8003d9a:	d10f      	bne.n	8003dbc <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 8003d9c:	0014      	movs	r4, r2
 8003d9e:	3452      	adds	r4, #82	; 0x52
 8003da0:	8823      	ldrh	r3, [r4, #0]
 8003da2:	6811      	ldr	r1, [r2, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003daa:	680a      	ldr	r2, [r1, #0]
 8003dac:	307e      	adds	r0, #126	; 0x7e
 8003dae:	4382      	bics	r2, r0
 8003db0:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003db2:	2240      	movs	r2, #64	; 0x40
 8003db4:	6808      	ldr	r0, [r1, #0]
 8003db6:	4302      	orrs	r2, r0
 8003db8:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 8003dba:	2000      	movs	r0, #0
  }
}
 8003dbc:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dbe:	2080      	movs	r0, #128	; 0x80
 8003dc0:	6895      	ldr	r5, [r2, #8]
 8003dc2:	0140      	lsls	r0, r0, #5
 8003dc4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003dc6:	4285      	cmp	r5, r0
 8003dc8:	d10d      	bne.n	8003de6 <UART_Transmit_IT+0x5a>
 8003dca:	6910      	ldr	r0, [r2, #16]
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	d10a      	bne.n	8003de6 <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003dd0:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 8003dd2:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003dd4:	05c0      	lsls	r0, r0, #23
 8003dd6:	0dc0      	lsrs	r0, r0, #23
 8003dd8:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003dda:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 8003ddc:	8823      	ldrh	r3, [r4, #0]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	8023      	strh	r3, [r4, #0]
 8003de4:	e7e9      	b.n	8003dba <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003de6:	1c58      	adds	r0, r3, #1
 8003de8:	64d0      	str	r0, [r2, #76]	; 0x4c
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	850b      	strh	r3, [r1, #40]	; 0x28
 8003dee:	e7f5      	b.n	8003ddc <UART_Transmit_IT+0x50>

08003df0 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003df0:	2140      	movs	r1, #64	; 0x40
 8003df2:	6802      	ldr	r2, [r0, #0]
{
 8003df4:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003df6:	6813      	ldr	r3, [r2, #0]
 8003df8:	438b      	bics	r3, r1
 8003dfa:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	2220      	movs	r2, #32
 8003e00:	3369      	adds	r3, #105	; 0x69
 8003e02:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 8003e04:	f7ff fd9a 	bl	800393c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8003e08:	2000      	movs	r0, #0
 8003e0a:	bd10      	pop	{r4, pc}

08003e0c <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e0c:	0002      	movs	r2, r0
{
 8003e0e:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e10:	326a      	adds	r2, #106	; 0x6a
 8003e12:	7811      	ldrb	r1, [r2, #0]
 8003e14:	6803      	ldr	r3, [r0, #0]
 8003e16:	2922      	cmp	r1, #34	; 0x22
 8003e18:	d12d      	bne.n	8003e76 <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 8003e1a:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1c:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 8003e1e:	315c      	adds	r1, #92	; 0x5c
 8003e20:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e22:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e24:	0164      	lsls	r4, r4, #5
 8003e26:	4029      	ands	r1, r5
 8003e28:	6885      	ldr	r5, [r0, #8]
 8003e2a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003e2c:	42a5      	cmp	r5, r4
 8003e2e:	d11e      	bne.n	8003e6e <UART_Receive_IT+0x62>
 8003e30:	6904      	ldr	r4, [r0, #16]
 8003e32:	2c00      	cmp	r4, #0
 8003e34:	d11b      	bne.n	8003e6e <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8003e36:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8003e38:	3302      	adds	r3, #2
 8003e3a:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8003e3c:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8003e3e:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 8003e40:	315a      	adds	r1, #90	; 0x5a
 8003e42:	880b      	ldrh	r3, [r1, #0]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	800b      	strh	r3, [r1, #0]
 8003e4a:	42a3      	cmp	r3, r4
 8003e4c:	d10d      	bne.n	8003e6a <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4e:	6803      	ldr	r3, [r0, #0]
 8003e50:	4d0c      	ldr	r5, [pc, #48]	; (8003e84 <UART_Receive_IT+0x78>)
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	4029      	ands	r1, r5
 8003e56:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e58:	6899      	ldr	r1, [r3, #8]
 8003e5a:	3523      	adds	r5, #35	; 0x23
 8003e5c:	35ff      	adds	r5, #255	; 0xff
 8003e5e:	43a9      	bics	r1, r5
 8003e60:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003e62:	2320      	movs	r3, #32
 8003e64:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 8003e66:	f7fc fadb 	bl	8000420 <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8003e6a:	0020      	movs	r0, r4
 8003e6c:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e6e:	1c5c      	adds	r4, r3, #1
 8003e70:	6544      	str	r4, [r0, #84]	; 0x54
 8003e72:	7019      	strb	r1, [r3, #0]
 8003e74:	e7e2      	b.n	8003e3c <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e76:	2208      	movs	r2, #8
 8003e78:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 8003e7a:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8003e80:	e7f3      	b.n	8003e6a <UART_Receive_IT+0x5e>
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	fffffedf 	.word	0xfffffedf

08003e88 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003e88:	220f      	movs	r2, #15
{
 8003e8a:	b570      	push	{r4, r5, r6, lr}
 8003e8c:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e8e:	6800      	ldr	r0, [r0, #0]
 8003e90:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e92:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003e94:	401a      	ands	r2, r3
  if (errorflags == RESET)
 8003e96:	d108      	bne.n	8003eaa <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e98:	2520      	movs	r5, #32
 8003e9a:	422b      	tst	r3, r5
 8003e9c:	d005      	beq.n	8003eaa <HAL_UART_IRQHandler+0x22>
 8003e9e:	4229      	tst	r1, r5
 8003ea0:	d003      	beq.n	8003eaa <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 8003ea2:	0020      	movs	r0, r4
 8003ea4:	f7ff ffb2 	bl	8003e0c <UART_Receive_IT>
}
 8003ea8:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8003eaa:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 8003eac:	2a00      	cmp	r2, #0
 8003eae:	d060      	beq.n	8003f72 <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	4015      	ands	r5, r2
 8003eb4:	d103      	bne.n	8003ebe <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003eb6:	2690      	movs	r6, #144	; 0x90
 8003eb8:	0076      	lsls	r6, r6, #1
 8003eba:	4231      	tst	r1, r6
 8003ebc:	d059      	beq.n	8003f72 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ebe:	4213      	tst	r3, r2
 8003ec0:	d005      	beq.n	8003ece <HAL_UART_IRQHandler+0x46>
 8003ec2:	05ce      	lsls	r6, r1, #23
 8003ec4:	d503      	bpl.n	8003ece <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003ec6:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ec8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8003eca:	4332      	orrs	r2, r6
 8003ecc:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ece:	2202      	movs	r2, #2
 8003ed0:	4213      	tst	r3, r2
 8003ed2:	d006      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x5a>
 8003ed4:	2d00      	cmp	r5, #0
 8003ed6:	d004      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003ed8:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eda:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8003edc:	1892      	adds	r2, r2, r2
 8003ede:	4332      	orrs	r2, r6
 8003ee0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	4213      	tst	r3, r2
 8003ee6:	d006      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x6e>
 8003ee8:	2d00      	cmp	r5, #0
 8003eea:	d004      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003eec:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003eee:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8003ef0:	3a02      	subs	r2, #2
 8003ef2:	4332      	orrs	r2, r6
 8003ef4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003ef6:	071a      	lsls	r2, r3, #28
 8003ef8:	d508      	bpl.n	8003f0c <HAL_UART_IRQHandler+0x84>
 8003efa:	068a      	lsls	r2, r1, #26
 8003efc:	d401      	bmi.n	8003f02 <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003efe:	2d00      	cmp	r5, #0
 8003f00:	d004      	beq.n	8003f0c <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003f02:	2208      	movs	r2, #8
 8003f04:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f06:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003f08:	4302      	orrs	r2, r0
 8003f0a:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f0c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003f0e:	2a00      	cmp	r2, #0
 8003f10:	d0ca      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f12:	2220      	movs	r2, #32
 8003f14:	4213      	tst	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_UART_IRQHandler+0x9a>
 8003f18:	4211      	tst	r1, r2
 8003f1a:	d002      	beq.n	8003f22 <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 8003f1c:	0020      	movs	r0, r4
 8003f1e:	f7ff ff75 	bl	8003e0c <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003f22:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8003f24:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003f26:	071b      	lsls	r3, r3, #28
 8003f28:	d404      	bmi.n	8003f34 <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	689d      	ldr	r5, [r3, #8]
 8003f2e:	2340      	movs	r3, #64	; 0x40
 8003f30:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003f32:	d01a      	beq.n	8003f6a <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 8003f34:	f7ff fc7a 	bl	800382c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f38:	2140      	movs	r1, #64	; 0x40
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	420a      	tst	r2, r1
 8003f40:	d00f      	beq.n	8003f62 <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f42:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003f44:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f46:	438a      	bics	r2, r1
 8003f48:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f4e:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <HAL_UART_IRQHandler+0x114>)
 8003f50:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f52:	f7fe fb87 	bl	8002664 <HAL_DMA_Abort_IT>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d0a6      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f5a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003f5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f5e:	4798      	blx	r3
 8003f60:	e7a2      	b.n	8003ea8 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8003f62:	0020      	movs	r0, r4
 8003f64:	f7ff fceb 	bl	800393e <HAL_UART_ErrorCallback>
 8003f68:	e79e      	b.n	8003ea8 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8003f6a:	f7ff fce8 	bl	800393e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6e:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003f70:	e79a      	b.n	8003ea8 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f72:	2280      	movs	r2, #128	; 0x80
 8003f74:	4213      	tst	r3, r2
 8003f76:	d005      	beq.n	8003f84 <HAL_UART_IRQHandler+0xfc>
 8003f78:	4211      	tst	r1, r2
 8003f7a:	d003      	beq.n	8003f84 <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 8003f7c:	0020      	movs	r0, r4
 8003f7e:	f7ff ff05 	bl	8003d8c <UART_Transmit_IT>
    return;
 8003f82:	e791      	b.n	8003ea8 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f84:	2240      	movs	r2, #64	; 0x40
 8003f86:	4213      	tst	r3, r2
 8003f88:	d100      	bne.n	8003f8c <HAL_UART_IRQHandler+0x104>
 8003f8a:	e78d      	b.n	8003ea8 <HAL_UART_IRQHandler+0x20>
 8003f8c:	4211      	tst	r1, r2
 8003f8e:	d100      	bne.n	8003f92 <HAL_UART_IRQHandler+0x10a>
 8003f90:	e78a      	b.n	8003ea8 <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8003f92:	0020      	movs	r0, r4
 8003f94:	f7ff ff2c 	bl	8003df0 <UART_EndTransmit_IT>
    return;
 8003f98:	e786      	b.n	8003ea8 <HAL_UART_IRQHandler+0x20>
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	08003941 	.word	0x08003941

08003fa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003fa0:	480d      	ldr	r0, [pc, #52]	; (8003fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003fa2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fa4:	480d      	ldr	r0, [pc, #52]	; (8003fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8003fa6:	490e      	ldr	r1, [pc, #56]	; (8003fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fa8:	4a0e      	ldr	r2, [pc, #56]	; (8003fe4 <LoopForever+0xe>)
  movs r3, #0
 8003faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fac:	e002      	b.n	8003fb4 <LoopCopyDataInit>

08003fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fb2:	3304      	adds	r3, #4

08003fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fb8:	d3f9      	bcc.n	8003fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fba:	4a0b      	ldr	r2, [pc, #44]	; (8003fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003fbc:	4c0b      	ldr	r4, [pc, #44]	; (8003fec <LoopForever+0x16>)
  movs r3, #0
 8003fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fc0:	e001      	b.n	8003fc6 <LoopFillZerobss>

08003fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fc4:	3204      	adds	r2, #4

08003fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fc8:	d3fb      	bcc.n	8003fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003fca:	f7fe f9c7 	bl	800235c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003fce:	f000 f811 	bl	8003ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003fd2:	f7fe f943 	bl	800225c <main>

08003fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8003fd6:	e7fe      	b.n	8003fd6 <LoopForever>
  ldr   r0, =_estack
 8003fd8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8003fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fe0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003fe4:	080056a4 	.word	0x080056a4
  ldr r2, =_sbss
 8003fe8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003fec:	20000250 	.word	0x20000250

08003ff0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ff0:	e7fe      	b.n	8003ff0 <ADC1_IRQHandler>
	...

08003ff4 <__libc_init_array>:
 8003ff4:	b570      	push	{r4, r5, r6, lr}
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	4d0c      	ldr	r5, [pc, #48]	; (800402c <__libc_init_array+0x38>)
 8003ffa:	4c0d      	ldr	r4, [pc, #52]	; (8004030 <__libc_init_array+0x3c>)
 8003ffc:	1b64      	subs	r4, r4, r5
 8003ffe:	10a4      	asrs	r4, r4, #2
 8004000:	42a6      	cmp	r6, r4
 8004002:	d109      	bne.n	8004018 <__libc_init_array+0x24>
 8004004:	2600      	movs	r6, #0
 8004006:	f000 f843 	bl	8004090 <_init>
 800400a:	4d0a      	ldr	r5, [pc, #40]	; (8004034 <__libc_init_array+0x40>)
 800400c:	4c0a      	ldr	r4, [pc, #40]	; (8004038 <__libc_init_array+0x44>)
 800400e:	1b64      	subs	r4, r4, r5
 8004010:	10a4      	asrs	r4, r4, #2
 8004012:	42a6      	cmp	r6, r4
 8004014:	d105      	bne.n	8004022 <__libc_init_array+0x2e>
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	00b3      	lsls	r3, r6, #2
 800401a:	58eb      	ldr	r3, [r5, r3]
 800401c:	4798      	blx	r3
 800401e:	3601      	adds	r6, #1
 8004020:	e7ee      	b.n	8004000 <__libc_init_array+0xc>
 8004022:	00b3      	lsls	r3, r6, #2
 8004024:	58eb      	ldr	r3, [r5, r3]
 8004026:	4798      	blx	r3
 8004028:	3601      	adds	r6, #1
 800402a:	e7f2      	b.n	8004012 <__libc_init_array+0x1e>
 800402c:	0800569c 	.word	0x0800569c
 8004030:	0800569c 	.word	0x0800569c
 8004034:	0800569c 	.word	0x0800569c
 8004038:	080056a0 	.word	0x080056a0

0800403c <memcpy>:
 800403c:	2300      	movs	r3, #0
 800403e:	b510      	push	{r4, lr}
 8004040:	429a      	cmp	r2, r3
 8004042:	d100      	bne.n	8004046 <memcpy+0xa>
 8004044:	bd10      	pop	{r4, pc}
 8004046:	5ccc      	ldrb	r4, [r1, r3]
 8004048:	54c4      	strb	r4, [r0, r3]
 800404a:	3301      	adds	r3, #1
 800404c:	e7f8      	b.n	8004040 <memcpy+0x4>

0800404e <memset>:
 800404e:	0003      	movs	r3, r0
 8004050:	1882      	adds	r2, r0, r2
 8004052:	4293      	cmp	r3, r2
 8004054:	d100      	bne.n	8004058 <memset+0xa>
 8004056:	4770      	bx	lr
 8004058:	7019      	strb	r1, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	e7f9      	b.n	8004052 <memset+0x4>

0800405e <strstr>:
 800405e:	b510      	push	{r4, lr}
 8004060:	0002      	movs	r2, r0
 8004062:	7800      	ldrb	r0, [r0, #0]
 8004064:	2800      	cmp	r0, #0
 8004066:	d104      	bne.n	8004072 <strstr+0x14>
 8004068:	7809      	ldrb	r1, [r1, #0]
 800406a:	2900      	cmp	r1, #0
 800406c:	d00d      	beq.n	800408a <strstr+0x2c>
 800406e:	bd10      	pop	{r4, pc}
 8004070:	3201      	adds	r2, #1
 8004072:	7810      	ldrb	r0, [r2, #0]
 8004074:	2800      	cmp	r0, #0
 8004076:	d0fa      	beq.n	800406e <strstr+0x10>
 8004078:	2300      	movs	r3, #0
 800407a:	5cc8      	ldrb	r0, [r1, r3]
 800407c:	2800      	cmp	r0, #0
 800407e:	d004      	beq.n	800408a <strstr+0x2c>
 8004080:	5cd4      	ldrb	r4, [r2, r3]
 8004082:	4284      	cmp	r4, r0
 8004084:	d1f4      	bne.n	8004070 <strstr+0x12>
 8004086:	3301      	adds	r3, #1
 8004088:	e7f7      	b.n	800407a <strstr+0x1c>
 800408a:	0010      	movs	r0, r2
 800408c:	e7ef      	b.n	800406e <strstr+0x10>
	...

08004090 <_init>:
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004096:	bc08      	pop	{r3}
 8004098:	469e      	mov	lr, r3
 800409a:	4770      	bx	lr

0800409c <_fini>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr
